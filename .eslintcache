[{"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\index.js":"1","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\reportWebVitals.js":"2","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\App.js":"3","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\AppContents.jsx":"4","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\AppView.jsx":"5","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\AddTrackUrls.jsx":"6","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\Login.jsx":"7","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\session.js":"8","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\dispatcher.js":"9","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes.js":"10","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\User.js":"11","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Errors.js":"12","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Session.js":"13","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\api\\User.js":"14","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\SocketEvents.js":"15","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\ScrapingThread.js":"16","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\api\\_Api.js":"17","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Environment.js":"18","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\ClientData.js":"19","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket.js":"20","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\session.js":"21","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\ManageUsers.jsx":"22","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Session.js":"23","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\UI.js":"24","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\AppSnackbar.jsx":"25","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\UI.js":"26","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\UI.js":"27","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\ApiError.js":"28","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\ScrapingThread.js":"29","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\ScrapingThread.js":"30","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\ScrapingThreads.js":"31","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\helpers\\validate.js":"32","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\AddTrackUrl.jsx":"33","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\Pagination.jsx":"34","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\EmptyPlaceholder.jsx":"35","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\TableData.js":"36","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\ScrapingThread.js":"37","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\helpers\\time.js":"38","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Table.js":"39","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\Tables.js":"40","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Tables.js":"41","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Table.js":"42","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\Table.js":"43","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\FAQ.jsx":"44","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Users.js":"45","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\ManageUsers.jsx":"46","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\AppPreload.jsx":"47","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\AddUser.jsx":"48","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\ManageUrls.jsx":"49","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\ManageUrls.jsx":"50","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\theme.jsx":"51","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Filters\\CountryFilter.jsx":"52","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\helpers\\utils.js":"53","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\DateRanges.js":"54","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\api\\ScrapingThread.js":"55","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\SpinnerGrow.jsx":"56","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\services\\bundle.js":"57","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\services\\UserFilter.js":"58","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\services\\CountryFilter.js":"59","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Statistics.js":"60","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\CountryFilter.js":"61","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\UserFilter.js":"62","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Hosts.js":"63","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\User\\Avatar\\ShortLettersAvatar.jsx":"64","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\UserFilter.js":"65","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\UserFilter.js":"66","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\CountryFilter.js":"67","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\CountryFilter.js":"68","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\CountryFilter.js":"69","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\UserFilter.js":"70","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\Hosts.js":"71","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\Statistics.js":"72","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\CrawlingExtension.jsx":"73","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\Country.js":"74","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Statistics.js":"75","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Hosts.js":"76","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\Statistics.js":"77","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\Hosts.js":"78","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\api\\Hosts.js":"79","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\Statistics.js":"80","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\XmlManagement.jsx":"81","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\DomainsManagement.jsx":"82","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\CountriesManagement.jsx":"83","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\ManageUrlsAdmin.jsx":"84","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\Statistics.jsx":"85","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\StatisticsAdmin.jsx":"86","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\ScrapingThreadDetails.jsx":"87","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Collapsable.jsx":"88","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\XmlHistory.jsx":"89","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\DomainsManagement.jsx":"90","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\CountriesManagement.jsx":"91","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\ManageUrlsAdmin.jsx":"92","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Table\\ScrapingThreadStatus.jsx":"93","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Filters\\MultiFilter.jsx":"94","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Countries.js":"95","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Scraper.js":"96","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Dialogs\\Rename.jsx":"97","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Dialogs\\CountryPicker.jsx":"98","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Dialogs\\EditHostParsingRegex.jsx":"99","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Table\\MultifunctionalHeading.jsx":"100","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\helpers\\url.js":"101","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\styles\\tables.js":"102","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Table\\Headers\\ManageUrls.js":"103","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Filters\\DateFilter.jsx":"104","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Filters\\UserFilter.jsx":"105","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\CrawlerThreadsStatuses.js":"106","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Selects\\ChartViewMode.js":"107","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\TrackedUrls.jsx":"108","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Charts\\CrawlerThreads.jsx":"109","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Statistics.js":"110","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Charts\\TrackedUrls.jsx":"111"},{"size":600,"mtime":1616967739694,"results":"112","hashOfConfig":"113"},{"size":362,"mtime":1616967739700,"results":"114","hashOfConfig":"113"},{"size":2150,"mtime":1616967739652,"results":"115","hashOfConfig":"113"},{"size":14849,"mtime":1618839588802,"results":"116","hashOfConfig":"113"},{"size":2795,"mtime":1618413822860,"results":"117","hashOfConfig":"113"},{"size":3598,"mtime":1616967739712,"results":"118","hashOfConfig":"113"},{"size":5021,"mtime":1616967739715,"results":"119","hashOfConfig":"113"},{"size":4285,"mtime":1616967739710,"results":"120","hashOfConfig":"113"},{"size":102,"mtime":1616967739691,"results":"121","hashOfConfig":"113"},{"size":909,"mtime":1616967739683,"results":"122","hashOfConfig":"113"},{"size":737,"mtime":1618416124110,"results":"123","hashOfConfig":"113"},{"size":1368,"mtime":1616970289720,"results":"124","hashOfConfig":"113"},{"size":2990,"mtime":1616967739656,"results":"125","hashOfConfig":"113"},{"size":702,"mtime":1616967739660,"results":"126","hashOfConfig":"113"},{"size":833,"mtime":1616967739690,"results":"127","hashOfConfig":"113"},{"size":1098,"mtime":1618416123993,"results":"128","hashOfConfig":"113"},{"size":2028,"mtime":1616967739661,"results":"129","hashOfConfig":"113"},{"size":267,"mtime":1618839829183,"results":"130","hashOfConfig":"113"},{"size":614,"mtime":1618416123942,"results":"131","hashOfConfig":"113"},{"size":1428,"mtime":1616967739706,"results":"132","hashOfConfig":"113"},{"size":791,"mtime":1616967739705,"results":"133","hashOfConfig":"113"},{"size":3460,"mtime":1616967739716,"results":"134","hashOfConfig":"113"},{"size":445,"mtime":1616967739685,"results":"135","hashOfConfig":"113"},{"size":547,"mtime":1616967739687,"results":"136","hashOfConfig":"113"},{"size":3891,"mtime":1616967739665,"results":"137","hashOfConfig":"113"},{"size":1824,"mtime":1616967739709,"results":"138","hashOfConfig":"113"},{"size":677,"mtime":1616967739657,"results":"139","hashOfConfig":"113"},{"size":855,"mtime":1618416124051,"results":"140","hashOfConfig":"113"},{"size":511,"mtime":1616967739685,"results":"141","hashOfConfig":"113"},{"size":2707,"mtime":1616967739655,"results":"142","hashOfConfig":"113"},{"size":3211,"mtime":1616967739708,"results":"143","hashOfConfig":"113"},{"size":649,"mtime":1616967739694,"results":"144","hashOfConfig":"113"},{"size":13438,"mtime":1618413755547,"results":"145","hashOfConfig":"113"},{"size":2573,"mtime":1616967739680,"results":"146","hashOfConfig":"113"},{"size":709,"mtime":1616967739678,"results":"147","hashOfConfig":"113"},{"size":3324,"mtime":1618416124215,"results":"148","hashOfConfig":"113"},{"size":1624,"mtime":1616967739703,"results":"149","hashOfConfig":"113"},{"size":1525,"mtime":1616967739692,"results":"150","hashOfConfig":"113"},{"size":285,"mtime":1616967739686,"results":"151","hashOfConfig":"113"},{"size":5273,"mtime":1616967739709,"results":"152","hashOfConfig":"113"},{"size":270,"mtime":1618582792368,"results":"153","hashOfConfig":"113"},{"size":1416,"mtime":1616967739656,"results":"154","hashOfConfig":"113"},{"size":1226,"mtime":1616967739704,"results":"155","hashOfConfig":"113"},{"size":1222,"mtime":1618489603573,"results":"156","hashOfConfig":"113"},{"size":142,"mtime":1616967739688,"results":"157","hashOfConfig":"113"},{"size":16637,"mtime":1616967739680,"results":"158","hashOfConfig":"113"},{"size":498,"mtime":1616967739665,"results":"159","hashOfConfig":"113"},{"size":10292,"mtime":1618501249651,"results":"160","hashOfConfig":"113"},{"size":3666,"mtime":1618488437391,"results":"161","hashOfConfig":"113"},{"size":16971,"mtime":1618488456526,"results":"162","hashOfConfig":"113"},{"size":384,"mtime":1618413832161,"results":"163","hashOfConfig":"113"},{"size":5766,"mtime":1616967739670,"results":"164","hashOfConfig":"113"},{"size":168,"mtime":1616967739693,"results":"165","hashOfConfig":"113"},{"size":1677,"mtime":1618492905318,"results":"166","hashOfConfig":"113"},{"size":464,"mtime":1616967739659,"results":"167","hashOfConfig":"113"},{"size":700,"mtime":1616967739672,"results":"168","hashOfConfig":"113"},{"size":231,"mtime":1616967739701,"results":"169","hashOfConfig":"113"},{"size":710,"mtime":1616967739701,"results":"170","hashOfConfig":"113"},{"size":731,"mtime":1616967739700,"results":"171","hashOfConfig":"113"},{"size":182,"mtime":1616967739686,"results":"172","hashOfConfig":"113"},{"size":177,"mtime":1616967739684,"results":"173","hashOfConfig":"113"},{"size":171,"mtime":1616967739687,"results":"174","hashOfConfig":"113"},{"size":137,"mtime":1616967739684,"results":"175","hashOfConfig":"113"},{"size":2779,"mtime":1618485279783,"results":"176","hashOfConfig":"113"},{"size":465,"mtime":1616967739658,"results":"177","hashOfConfig":"113"},{"size":1458,"mtime":1616967739710,"results":"178","hashOfConfig":"113"},{"size":484,"mtime":1616967739654,"results":"179","hashOfConfig":"113"},{"size":1713,"mtime":1616967739706,"results":"180","hashOfConfig":"113"},{"size":444,"mtime":1616967739702,"results":"181","hashOfConfig":"113"},{"size":424,"mtime":1616967739705,"results":"182","hashOfConfig":"113"},{"size":1572,"mtime":1616967739703,"results":"183","hashOfConfig":"113"},{"size":688,"mtime":1616967739704,"results":"184","hashOfConfig":"113"},{"size":828,"mtime":1616967739714,"results":"185","hashOfConfig":"113"},{"size":104,"mtime":1618416123881,"results":"186","hashOfConfig":"113"},{"size":924,"mtime":1618585483813,"results":"187","hashOfConfig":"113"},{"size":1428,"mtime":1616967739655,"results":"188","hashOfConfig":"113"},{"size":2995,"mtime":1618585566854,"results":"189","hashOfConfig":"113"},{"size":1199,"mtime":1616967739707,"results":"190","hashOfConfig":"113"},{"size":558,"mtime":1616967739659,"results":"191","hashOfConfig":"113"},{"size":324,"mtime":1618502311694,"results":"192","hashOfConfig":"113"},{"size":2792,"mtime":1616967739719,"results":"193","hashOfConfig":"113"},{"size":2955,"mtime":1616967739714,"results":"194","hashOfConfig":"113"},{"size":3109,"mtime":1616967739713,"results":"195","hashOfConfig":"113"},{"size":3616,"mtime":1616967739716,"results":"196","hashOfConfig":"113"},{"size":9204,"mtime":1618925751958,"results":"197","hashOfConfig":"113"},{"size":7584,"mtime":1618501274873,"results":"198","hashOfConfig":"113"},{"size":13881,"mtime":1616967739717,"results":"199","hashOfConfig":"113"},{"size":1448,"mtime":1616967739667,"results":"200","hashOfConfig":"113"},{"size":19058,"mtime":1616967739681,"results":"201","hashOfConfig":"113"},{"size":20227,"mtime":1618846393853,"results":"202","hashOfConfig":"113"},{"size":22847,"mtime":1616967739677,"results":"203","hashOfConfig":"113"},{"size":18022,"mtime":1618582800210,"results":"204","hashOfConfig":"113"},{"size":1724,"mtime":1616971813279,"results":"205","hashOfConfig":"113"},{"size":14247,"mtime":1616967739671,"results":"206","hashOfConfig":"113"},{"size":615,"mtime":1616967739654,"results":"207","hashOfConfig":"113"},{"size":92,"mtime":1616967739689,"results":"208","hashOfConfig":"113"},{"size":3099,"mtime":1616967739669,"results":"209","hashOfConfig":"113"},{"size":3434,"mtime":1616967739668,"results":"210","hashOfConfig":"113"},{"size":3162,"mtime":1616967739668,"results":"211","hashOfConfig":"113"},{"size":2655,"mtime":1616967739674,"results":"212","hashOfConfig":"113"},{"size":373,"mtime":1616967739692,"results":"213","hashOfConfig":"113"},{"size":217,"mtime":1615982977849,"results":"214","hashOfConfig":"113"},{"size":4255,"mtime":1616967739673,"results":"215","hashOfConfig":"113"},{"size":3354,"mtime":1616967739670,"results":"216","hashOfConfig":"113"},{"size":6032,"mtime":1618570691497,"results":"217","hashOfConfig":"113"},{"size":114,"mtime":1616968674648,"results":"218","hashOfConfig":"113"},{"size":2161,"mtime":1618418373887,"results":"219","hashOfConfig":"113"},{"size":18239,"mtime":1618582876083,"results":"220","hashOfConfig":"113"},{"size":2736,"mtime":1618583748729,"results":"221","hashOfConfig":"113"},{"size":159,"mtime":1618570625879,"results":"222","hashOfConfig":"113"},{"size":2323,"mtime":1618583746766,"results":"223","hashOfConfig":"113"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},"1dejazk",{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"226"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"226"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"226"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"226"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"226"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"226"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"226"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"226"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"226"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"226"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"226"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"226"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"226"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"226"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"226"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"226"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"226"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"226"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"226"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"226"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"226"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"226"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"226"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"226"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"226"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"226"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"226"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"226"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"226"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"226"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"226"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"226"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"226"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"226"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"226"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"226"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"226"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"226"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"226"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"226"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"226"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"226"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"226"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"226"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"226"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"226"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"226"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"226"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"226"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"226"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"226"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"446","messages":"447","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"226"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"226"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"226"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"226"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"226"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"226"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"226"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"226"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"226"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"226"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"226"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"226"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"226"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"226"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"226"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"495"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"226"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"226"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"226"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"509"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"226"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"226"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"226"},"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\index.js",[],["521","522"],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\reportWebVitals.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\App.js",["523"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AppContents from \"./components/AppContents\";\nimport { ConfirmProvider } from \"material-ui-confirm\";\nimport sessionActions from \"./actions/Session\";\nimport sessionStore from \"./store/session\";\nimport AppPreload from \"./components/AppPreload\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport defaultTheme from \"./theme\";\nimport StartServices from \"./services/bundle\";\n\nexport default function App() {\n  document.title = \"BeBee Crawling\";\n  const [ShowPreload, setShowPreload] = useState(true);\n  const history = useHistory();\n\n  const onIsAuthenticatingChanged = (data) => {\n    const isAuthenticating = sessionStore.isAuthenticating();\n    const isAuthenticated = sessionStore.isAuthenticated();\n    const canAuthenticate = !!sessionStore.getAuthenticationToken();\n    if (canAuthenticate && !isAuthenticated && !isAuthenticating) {\n      if (!ShowPreload) setShowPreload(true);\n      setTimeout(() => {\n        sessionActions.tryAuthentication();\n      });\n    } else if (!isAuthenticated && !canAuthenticate) {\n      history.push(\"/login\");\n      if (ShowPreload) setShowPreload(false);\n    } else if (isAuthenticated) {\n      if (ShowPreload) setShowPreload(false);\n    }\n  };\n  StartServices();\n  onIsAuthenticatingChanged();\n  useEffect(() => {\n    sessionStore.addChangeListener(\n      ActionTypes.Session.IS_AUTHENTICATING,\n      onIsAuthenticatingChanged\n    );\n\n    sessionStore.addChangeListener(\n      ActionTypes.Session.USER_DATA_UPDATED,\n      onIsAuthenticatingChanged\n    );\n    return () => {\n      sessionStore.removeChangeListener(\n        ActionTypes.Session.IS_AUTHENTICATING,\n        onIsAuthenticatingChanged\n      );\n      sessionStore.removeChangeListener(\n        ActionTypes.Session.USER_DATA_UPDATED,\n        onIsAuthenticatingChanged\n      );\n    };\n  });\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <ConfirmProvider>\n        {ShowPreload ? <AppPreload /> : <AppContents />}\n      </ConfirmProvider>\n    </ThemeProvider>\n  );\n}\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\AppContents.jsx",["524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539"],"import React, { useEffect, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport LanguageIcon from \"@material-ui/icons/Language\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport faviconIconPng from \"../assets/favicon128.png\";\r\nimport ExtensionIcon from \"@material-ui/icons/Extension\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport UserAvatar from \"../components/User/Avatar/ShortLettersAvatar\";\r\nimport {\r\n  Drawer,\r\n  Avatar,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  ListItem,\r\n  AppBar,\r\n  Typography,\r\n  Toolbar,\r\n  Divider,\r\n  Button,\r\n  IconButton,\r\n  List,\r\n  Box,\r\n  Badge,\r\n} from \"@material-ui/core\";\r\n\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nimport AppSnackbar from \"./AppSnackbar\";\r\n\r\nimport sessionActions from \"../actions/Session\";\r\n\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { deepOrange, deepPurple } from \"@material-ui/core/colors\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport {\r\n  Link as LinkIcon,\r\n  Code as CodeIcon,\r\n  AccountCircle as AccountIcon,\r\n  Help as HelpIcon,\r\n  Timeline as TimelineIcon,\r\n  SupervisedUserCircle as SupervisedUserCircleIcon,\r\n  PowerSettingsNew as PowerSettingsNewIcon,\r\n  AddCircleOutline as AddCircleOutlineIcon,\r\n  Public as GlobeIcon,\r\n  Domain,\r\n} from \"@material-ui/icons\";\r\nimport AppView from \"./AppView\";\r\nimport sessionStore from \"../store/session\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport logoIconSvg from \"../assets/l4c.svg\";\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n    overflow: \"hidden\",\r\n  },\r\n  avatar: {\r\n    height: 32,\r\n    width: 32,\r\n    fontSize: theme.typography.body1.fontSize,\r\n    marginLeft: -3,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    background: \"white\",\r\n    color: \"rgb(127, 127, 127)\",\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  drawerHeader: {},\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: \"nowrap\",\r\n    backgroundColor: \"#f2902b\",\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: \"hidden\",\r\n    width: \"58px !important\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appContent: {\r\n    flexGrow: 1,\r\n    display: \"contents\",\r\n    padding: theme.spacing(3),\r\n  },\r\n  contentDrawerOpen: {},\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n  },\r\n  purple: {\r\n    color: theme.palette.getContrastText(deepPurple[500]),\r\n    backgroundColor: deepPurple[500],\r\n  },\r\n\r\n  drawerPaper: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: \"#ffffff\",\r\n    \"& .MuiListItemIcon-root\": {\r\n      color: \"#ffffff\",\r\n    },\r\n    \"& .MuiDivider-root\": {\r\n      backgroundColor: \"#ffffff2e\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction AppContents() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [drawerOpen, setDrawerOpen] = React.useState(true);\r\n\r\n  const [User, setUser] = useState(sessionStore.getUser());\r\n  const IsAdmin = (User && User.isAdmin) || false;\r\n  const [isAuthenticated, setIsAuthenticated] = useState(\r\n    sessionStore.isAuthenticated()\r\n  );\r\n\r\n  const onAuthenticationStatusChanged = () => {\r\n    setIsAuthenticated(sessionStore.isAuthenticated());\r\n  };\r\n  useEffect(() => {\r\n    sessionStore.addChangeListener(\r\n      ActionTypes.Session.USER_DATA_UPDATED,\r\n      onAuthenticationStatusChanged\r\n    );\r\n    return () => {\r\n      sessionStore.removeChangeListener(\r\n        ActionTypes.Session.USER_DATA_UPDATED,\r\n        onAuthenticationStatusChanged\r\n      );\r\n    };\r\n  });\r\n\r\n  const handleDrawerOpen = () => {\r\n    setDrawerOpen(!drawerOpen);\r\n  };\r\n\r\n  const location = useLocation();\r\n\r\n  const renderShortLetters = () => {\r\n    if (!User || !User.name) {\r\n      return \"\";\r\n    }\r\n    const fullName = User.name;\r\n    let shortLetters = \"\";\r\n    const nameParts = fullName.split(\" \");\r\n    if (nameParts.length >= 2) {\r\n      shortLetters =\r\n        nameParts[0].substring(0, 1) + nameParts[1].substring(0, 1);\r\n    } else {\r\n      shortLetters = nameParts[0].substring(0, 2);\r\n    }\r\n    // alert(fullName);\r\n    return shortLetters;\r\n  };\r\n  console.log(\"isAuthenticated\", isAuthenticated);\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      {isAuthenticated && User && User.name && (\r\n        <React.Fragment>\r\n          <AppBar\r\n            position=\"fixed\"\r\n            className={clsx(classes.appBar, {\r\n              [classes.appBarShift]: isAuthenticated && drawerOpen,\r\n            })}\r\n          >\r\n            <Toolbar>\r\n              <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                onClick={handleDrawerOpen}\r\n                edge=\"start\"\r\n                className={classes.menuButton}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n              <Button\r\n                variant=\"text\"\r\n                color={\r\n                  location.pathname === \"/\" || location.pathname === \"\"\r\n                    ? \"secondary\"\r\n                    : \"rgb(127, 127, 127)\"\r\n                }\r\n                startIcon={\r\n                  <AddCircleOutlineIcon\r\n                    color={\r\n                      location.pathname === \"/\" || location.pathname === \"\"\r\n                        ? \"secondary\"\r\n                        : \"rgb(127, 127, 127)\"\r\n                    }\r\n                  />\r\n                }\r\n                component={Link}\r\n                to=\"/\"\r\n              >\r\n                Crawl URLs\r\n              </Button>\r\n              <Button\r\n                variant=\"text\"\r\n                style={{ marginLeft: theme.spacing(1) }}\r\n                component={Link}\r\n                to=\"/manage-urls\"\r\n                startIcon={\r\n                  <EditIcon\r\n                    color={\r\n                      location.pathname === \"/manage-urls\"\r\n                        ? \"secondary\"\r\n                        : \"rgb(127, 127, 127)\"\r\n                    }\r\n                  />\r\n                }\r\n                color={\r\n                  location.pathname === \"/manage-urls\"\r\n                    ? \"secondary\"\r\n                    : theme.palette.text.hint\r\n                }\r\n              >\r\n                Manage URLs\r\n              </Button>\r\n            </Toolbar>\r\n          </AppBar>\r\n\r\n          <Drawer\r\n            variant=\"permanent\"\r\n            className={clsx(classes.drawer, {\r\n              [classes.drawerOpen]: drawerOpen,\r\n              [classes.drawerClose]: !drawerOpen,\r\n              [classes.hide]: !isAuthenticated,\r\n            })}\r\n            classes={{\r\n              paper: clsx({\r\n                [classes.drawerOpen]: drawerOpen,\r\n                [classes.drawerClose]: !drawerOpen,\r\n                [classes.drawerPaper]: true,\r\n              }),\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                flexDirection: \"column\",\r\n                flex: 1,\r\n              }}\r\n            >\r\n              <div>\r\n                <div className={classes.drawerHeader}>\r\n                  <List>\r\n                    <ListItem button>\r\n                      <img\r\n                        style={{ width: 64 }}\r\n                        src={faviconIconPng}\r\n                        alt=\"yes\"\r\n                      />\r\n                      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          style={{ marginLeft: theme.spacing(3) }}\r\n                        >\r\n                          BeBee\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"body1\"\r\n                          style={{\r\n                            marginLeft: theme.spacing(3),\r\n                            marginTop: -4,\r\n                          }}\r\n                        >\r\n                          Crawling\r\n                        </Typography>\r\n                      </div>\r\n                    </ListItem>\r\n                  </List>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                  {false && IsAdmin && (\r\n                    <ListItem style={{ padding: 0 }}>\r\n                      <div\r\n                        style={{\r\n                          width: \"100%\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"flex-end\",\r\n                          paddingRight: theme.spacing(2),\r\n                          transform: \"scale(0.9)\",\r\n                        }}\r\n                      >\r\n                        <Badge\r\n                          size=\"small\"\r\n                          style={{ marginLeft: 24, marginBottom: -8 }}\r\n                          badgeContent={\r\n                            <div style={{ fontSize: 11 }}>ADMIN</div>\r\n                          }\r\n                          color=\"secondary\"\r\n                          anchorOrigin={{\r\n                            vertical: \"bottom\",\r\n                            horizontal: \"right\",\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </ListItem>\r\n                  )}\r\n                  <ListItem button key={\"userId\"}>\r\n                    <ListItemIcon>\r\n                      <UserAvatar username={User.name} fullname={User.name} />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={User.name || User.username} />\r\n                  </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <List>\r\n                  <ListItem\r\n                    button\r\n                    key={\"stats\"}\r\n                    component={Link}\r\n                    to=\"/statistics\"\r\n                  >\r\n                    <ListItemIcon>\r\n                      <TimelineIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={\"Statistics\"} />\r\n                  </ListItem>\r\n                  {/* <ListItem\r\n                    button\r\n                    key={\"FAQ\"}\r\n                    component={Link}\r\n                    to=\"/faq\"\r\n                    selected={location.pathname === \"/faq\"}\r\n                  >\r\n                    <ListItemIcon>\r\n                      <HelpIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={\"FAQ\"} />\r\n                  </ListItem> */}\r\n                  {/* <ListItem\r\n                    button\r\n                    key={\"Extension\"}\r\n                    component={Link}\r\n                    to=\"/extension\"\r\n                    selected={location.pathname === \"/extension\"}\r\n                  >\r\n                    <ListItemIcon>\r\n                      <ExtensionIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={\"Crawling Extension\"} />\r\n                  </ListItem> */}\r\n                </List>\r\n                <Divider />\r\n                {IsAdmin && (\r\n                  <React.Fragment>\r\n                    <List>\r\n                      <ListItem\r\n                        button\r\n                        key={\"tracked-urls\"}\r\n                        component={Link}\r\n                        to={\"/tracked-urls\"}\r\n                      >\r\n                        <ListItemIcon>\r\n                          <LinkIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Tracked URLs\"} />\r\n                      </ListItem>\r\n                      <ListItem\r\n                        button\r\n                        key={\"domains\"}\r\n                        component={Link}\r\n                        to=\"/domains\"\r\n                      >\r\n                        <ListItemIcon>\r\n                          <LanguageIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Target websites\"} />\r\n                      </ListItem>\r\n                      <ListItem\r\n                        button\r\n                        key={\"users\"}\r\n                        selected={location.pathname === \"/manage-users\"}\r\n                        component={Link}\r\n                        to=\"/manage-users\"\r\n                      >\r\n                        <ListItemIcon>\r\n                          <AccountIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Users\"} />\r\n                      </ListItem>\r\n                    </List>\r\n                    <Divider />\r\n                  </React.Fragment>\r\n                )}\r\n              </div>\r\n              <List>\r\n                <ListItem button key={\"users\"} onClick={sessionActions.logout}>\r\n                  <ListItemIcon>\r\n                    <PowerSettingsNewIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={\"Disconnect\"} />\r\n                </ListItem>\r\n              </List>\r\n            </div>\r\n          </Drawer>\r\n        </React.Fragment>\r\n      )}\r\n\r\n      <main\r\n        className={clsx({\r\n          [classes.appContent]: true,\r\n        })}\r\n      >\r\n        <AppView />\r\n        <AppSnackbar />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default React.memo(AppContents);\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\AppView.jsx",["540","541","542","543","544","545","546","547"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport uiActions from \"../actions/UI\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { Backdrop } from \"@material-ui/core\";\r\nimport AddTrackUrlsView from \"../views/AddTrackUrls\";\r\nimport LoginView from \"../views/Login\";\r\nimport ManageUsersView from \"../views/ManageUsers\";\r\nimport AddUsersView from \"../views/AddUser\";\r\nimport ManageUrlsView from \"../views/ManageUrls\";\r\nimport sessionStore from \"../store/session\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport FAQView from \"../views/FAQ\";\r\nimport StatisticsView from \"../views/Statistics\";\r\nimport StatisticsAdminView from \"../views/StatisticsAdmin\";\r\nimport ManageUrlsAdminView from \"../views/ManageUrlsAdmin\";\r\nimport XmlManagementView from \"../views/XmlManagement\";\r\nimport CountriesManagementView from \"../views/CountriesManagement\";\r\nimport ScrapingThreadDetailsView from \"../views/ScrapingThreadDetails\";\r\nimport DomainsManagementView from \"../views/DomainsManagement\";\r\nimport CrawlingExtensionView from \"../views/CrawlingExtension\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appView: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    flex: 1,\r\n    background: \"rgb(250,250,250)\",\r\n    padding: theme.spacing(2),\r\n    paddingTop: 86,\r\n    height: \"100%\",\r\n    overflowY: \"hidden\",\r\n    maxHeight: \"100%\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst AppView = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.appView}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={AddTrackUrlsView} />\r\n        <Route exact path=\"/login\" component={LoginView} />\r\n        <Route exact path=\"/faq\" component={FAQView} />\r\n        <Route exact path=\"/manage-users\" component={ManageUsersView} />\r\n        <Route exact path=\"/manage-urls\" component={ManageUrlsView} />\r\n        <Route exact path=\"/tracked-urls\" component={ManageUrlsAdminView} />\r\n        <Route exact path=\"/add-user\" component={AddUsersView} />\r\n        <Route exact path=\"/statistics\" component={StatisticsView} />\r\n        <Route exact path=\"/user-statistics\" component={StatisticsAdminView} />\r\n        <Route exact path=\"/xml\" component={XmlManagementView} />\r\n        <Route exact path=\"/countries\" component={CountriesManagementView} />\r\n        <Route exact path=\"/domains\" component={DomainsManagementView} />\r\n        <Route exact path=\"/extension\" component={CrawlingExtensionView} />\r\n        <Route\r\n          path=\"/url-details/:threadId\"\r\n          render={(props) => <ScrapingThreadDetailsView {...props} />}\r\n        />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppView;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\AddTrackUrls.jsx",["548","549","550"],"import {\r\n  Button,\r\n  Divider,\r\n  FormControl,\r\n  InputAdornment,\r\n  OutlinedInput,\r\n} from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport AddCircleIcon from \"@material-ui/icons/Add\";\r\nimport LinkIcon from \"@material-ui/icons/Link\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport scrapingThreadsActions from \"../actions/ScrapingThread\";\r\nimport SpinnerGrow from \"../components/SpinnerGrow\";\r\nimport AddTrackUrlTable from \"../components/Tables/AddTrackUrl\";\r\nimport urlHelpers from \"../helpers/url\";\r\n\r\nfunction createData(name, calories, fat) {\r\n  return { name, calories, fat };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    overflowY: \"hidden\",\r\n    padding: 2,\r\n  },\r\n  tableContainer: {\r\n    overflow: \"hidden\",\r\n    overflowY: \"hidden\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n});\r\nlet lastChanged = null;\r\n\r\n/**\r\n * @typedef {Object} InputValue\r\n * @property {string} inputValue\r\n * @property {string} hostName\r\n */\r\n\r\nexport default function CustomPaginationActionsTable() {\r\n  /**\r\n   * @type {[InputValue, CallableFunction]}\r\n   */\r\n  const [UrlInputValue, setUrlInputValue] = useState(\"\");\r\n\r\n  const hostName = UrlInputValue.hostName;\r\n\r\n  console.log(hostName);\r\n\r\n  //const [Host, setHost] = useState(hostsStore.getByName(hostName));\r\n\r\n  const classes = useStyles();\r\n\r\n  const history = useHistory();\r\n\r\n  const theme = useTheme();\r\n\r\n  const createThread = () => {\r\n    scrapingThreadsActions.create(UrlInputValue);\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper} className={classes.tableContainer}>\r\n      <div\r\n        style={{\r\n          padding: theme.spacing(2),\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          flexWrap: \"nowrap\",\r\n        }}\r\n      >\r\n        {/* <ButtonGroup>\r\n            <TextField\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              placeholder=\"URL to track\"\r\n            ></TextField>\r\n            <Button>Track</Button>\r\n          </ButtonGroup> */}\r\n        <FormControl fullWidth size=\"small\" className={classes.margin}>\r\n          <OutlinedInput\r\n            id=\"standard-adornment-amount\"\r\n            size=\"small\"\r\n            placeholder=\"URL to track\"\r\n            value={UrlInputValue.inputValue}\r\n            onChange={(evt) => {\r\n              const inputValue = evt.target.value;\r\n              setUrlInputValue({\r\n                inputValue,\r\n                hostName: urlHelpers.parseHostname(inputValue),\r\n              });\r\n            }}\r\n            onKeyPress={(evt) => {\r\n              if (evt.key === \"Enter\") {\r\n                createThread();\r\n              }\r\n            }}\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <LinkIcon />\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          disableElevation\r\n          startIcon={<AddCircleIcon />}\r\n          endIcon={<SpinnerGrow />}\r\n          onClick={createThread}\r\n          style={{ whiteSpace: \"nowrap\", marginLeft: theme.spacing(2) }}\r\n        >\r\n          Add URL\r\n        </Button>\r\n      </div>\r\n      {/* {hostName && <HostPatternInputComponent hostName={hostName} />} */}\r\n\r\n      <Divider />\r\n      <AddTrackUrlTable />\r\n    </TableContainer>\r\n  );\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\Login.jsx",["551"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  FormControl,\r\n  OutlinedInput,\r\n  InputAdornment,\r\n  Button,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\n\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\n\r\nimport sessionActions from \"../actions/Session\";\r\nimport sessionStore from \"../store/session\";\r\nimport BebeeCrawlingLogo from \"../assets/favicon128.png\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  formPaper: {\r\n    padding: theme.spacing(3),\r\n    maxWidth: 420, // Blaze it\r\n    width: \"100%\",\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n  },\r\n  inputField: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst LoginView = () => {\r\n  const [IsAuthenticating, setIsAuthenticating] = useState(false);\r\n  const [Email, setEmail] = useState(\"\");\r\n  const [Password, setPassword] = useState(\"\");\r\n  const history = useHistory();\r\n  const storedAuthToken = sessionStore.getAuthenticationToken();\r\n  const isAuthenticating = sessionStore.isAuthenticating();\r\n  const performAuthentication = () => {\r\n    setTimeout(async () => {\r\n      const authData = {\r\n        email: Email,\r\n        password: Password,\r\n      };\r\n\r\n      sessionActions.userAuthenticate(authData).then();\r\n    });\r\n  };\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const onUserAuthenticatingChanged = () => {\r\n    setIsAuthenticating(sessionStore.isAuthenticating());\r\n  };\r\n  useEffect(() => {\r\n    if (sessionStore.isAuthenticated()) {\r\n      history.push(\"/\");\r\n      return <div></div>;\r\n    }\r\n\r\n    // Bind event listeners\r\n    sessionStore.addChangeListener(\r\n      ActionTypes.Session.IS_AUTHENTICATING,\r\n      onUserAuthenticatingChanged\r\n    );\r\n\r\n    if (storedAuthToken && !isAuthenticating) {\r\n      sessionActions.tryAuthentication();\r\n    }\r\n    return () => {\r\n      sessionStore.removeChangeListener(\r\n        ActionTypes.Session.IS_AUTHENTICATING,\r\n        onUserAuthenticatingChanged\r\n      );\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"inline-flex\",\r\n        flexDirection: \"column\",\r\n        margin: \"0 auto\",\r\n        width: 420,\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          marginBottom: theme.spacing(3),\r\n        }}\r\n      >\r\n        <img\r\n          src={BebeeCrawlingLogo}\r\n          style={{ height: 32, marginRight: theme.spacing(2) }}\r\n          alt=\"bebeee\"\r\n        />\r\n        <Typography variant=\"h5\">Bebee Crawling</Typography>\r\n      </div>\r\n      <Paper className={classes.formPaper}>\r\n        <Typography variant=\"h6\">Sign in</Typography>\r\n\r\n        <FormControl fullWidth className={classes.inputField}>\r\n          <OutlinedInput\r\n            id=\"standard-adornment-amount\"\r\n            disabled={!!IsAuthenticating}\r\n            value={Email}\r\n            placeholder=\"Email / Username\"\r\n            onChange={(evt) => {\r\n              setEmail(evt.target.value);\r\n            }}\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <EmailIcon />\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl fullWidth className={classes.inputField}>\r\n          <OutlinedInput\r\n            id=\"standard-adornment-amount\"\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n            disabled={!!IsAuthenticating}\r\n            onChange={(evt) => {\r\n              setPassword(evt.target.value);\r\n            }}\r\n            onKeyPress={(evt) => {\r\n              if (evt.key === \"Enter\") {\r\n                performAuthentication();\r\n              }\r\n            }}\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <LockIcon />\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          fullWidth\r\n          disableElevation\r\n          color=\"secondary\"\r\n          style={{ marginTop: theme.spacing(2) }}\r\n          onClick={performAuthentication}\r\n          disabled={!!IsAuthenticating}\r\n        >\r\n          {IsAuthenticating ? (\r\n            <CircularProgress\r\n              style={{ color: \"white\", width: 24, height: 24 }}\r\n            />\r\n          ) : (\r\n            \"Login\"\r\n          )}\r\n        </Button>\r\n\r\n        <Link\r\n          to=\"reset-password\"\r\n          fullWidth\r\n          style={{ textAlign: \"center\", marginTop: theme.spacing(1) }}\r\n        >\r\n          Forgot your password?\r\n        </Link>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginView;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\session.js",["552"],"import { EventEmitter } from \"events\";\r\nimport dispatcher from \"../dispatcher\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport User from \"../models/User\";\r\n\r\nconst Errors = require(\"../constants/Errors\");\r\n\r\nclass SessionStore extends EventEmitter {\r\n  constructor(params) {\r\n    super(params);\r\n    this.dispatchToken = undefined;\r\n\r\n    this.connectionInitiatedTimestamp = undefined; // When\r\n    this._isAuthenticated = false;\r\n    this.user = {\r\n      authentication_token: localStorage.authentication_token,\r\n      email: undefined,\r\n      username: undefined,\r\n    };\r\n    this.authentication_token_sent_timestamp = false;\r\n    this.sessionId = undefined;\r\n  }\r\n  addChangeListener(event, callback) {\r\n    this.on(event, callback);\r\n  }\r\n\r\n  removeChangeListener(event, callback) {\r\n    this.removeListener(event, callback);\r\n  }\r\n\r\n  emitChange(event, data) {\r\n    this.emit(event, data);\r\n  }\r\n\r\n  getUser() {\r\n    return this.user;\r\n  }\r\n\r\n  needsToAuthenticate() {\r\n    return (\r\n      !this.isAuthenticated() &&\r\n      !this.isAuthenticating &&\r\n      this.getAuthenticationToken()\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {User} user\r\n   */\r\n  setUser(user) {\r\n    this.user = user;\r\n    if (user && user.authentication_token) {\r\n      this.setAuthenticationToken(user.authentication_token);\r\n      this._isAuthenticated = true;\r\n    } else {\r\n      this._isAuthenticated = false;\r\n    }\r\n  }\r\n\r\n  getAuthenticationToken() {\r\n    let _ret = localStorage.getItem(\"authentication_token\");\r\n    document.cookie = `authentication_token=${_ret};`;\r\n    if (_ret === undefined || _ret === null || _ret.length < 64) {\r\n      _ret = undefined;\r\n    }\r\n    return _ret;\r\n  }\r\n  setAuthenticationToken(authentication_token) {\r\n    authentication_token = authentication_token || \"\";\r\n    localStorage.setItem(\"authentication_token\", authentication_token);\r\n  }\r\n  setSessionId(sessionId) {\r\n    this.sessionId = sessionId;\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return this.user instanceof User;\r\n  }\r\n\r\n  updateAvatar(avatar) {\r\n    this.user.avatar = avatar;\r\n  }\r\n  setIsAuthenticating(isIt) {\r\n    this._hasTriedAuthentication = true;\r\n    this._isAuthenticating = isIt;\r\n  }\r\n  hasTriedAuthentication() {\r\n    return !!this._hasTriedAuthentication;\r\n  }\r\n  isAuthenticating() {\r\n    return this._isAuthenticating;\r\n  }\r\n\r\n  logout() {\r\n    this.setAuthenticationToken(\"\");\r\n  }\r\n}\r\n\r\nconst sessionStore = new SessionStore();\r\n\r\nsessionStore.dispatchToken = dispatcher.register((event) => {\r\n  switch (event.actionType) {\r\n    case ActionTypes.Session.USER_DATA_UPDATED:\r\n      sessionStore.setUser(event.data.user);\r\n      break;\r\n\r\n    case ActionTypes.Session.AUTHENTICATION_FAILED:\r\n      sessionStore.setAuthenticationToken(null);\r\n      break;\r\n    case ActionTypes.Session.USER_LOGOUT:\r\n      sessionStore.logout();\r\n      break;\r\n    case ActionTypes.Session.IS_AUTHENTICATING:\r\n      sessionStore.setIsAuthenticating(event.data.isAuthenticating);\r\n      break;\r\n    // case ActionTypes.Session.:\r\n    //   let errorMessage = undefined;\r\n    //   let errorHasToBeFormatted = Array.isArray(event.data);\r\n\r\n    //   if (errorHasToBeFormatted) {\r\n    //     let params = [];\r\n    //     for (let i = 1; i < event.data.length; i++) {\r\n    //       params.push(event.data[i]);\r\n    //     }\r\n    //     errorMessage = Errors[event.data[0]].toString().format(params);\r\n    //   } else {\r\n    //     errorMessage = Errors[event.data];\r\n    //   }\r\n\r\n    //   setTimeout(() => {\r\n    //     dispatcher.dispatch({\r\n    //       actionType: ActionTypes.UI_SHOW_SNACKBAR,\r\n    //       data: {\r\n    //         message: errorMessage,\r\n    //         severity: \"error\",\r\n    //       },\r\n    //     });\r\n    //   });\r\n    //   break;\r\n\r\n    // case ActionTypes.API_SUCCESS:\r\n    //   // Snackbar component will subscribe to this\r\n\r\n    //   setTimeout(() => {\r\n    //     dispatcher.dispatch({\r\n    //       actionType: ActionTypes.UI_SHOW_SNACKBAR,\r\n    //       data: {\r\n    //         message: Errors[event.data] || event.data,\r\n    //         severity: \"success\",\r\n    //       },\r\n    //     });\r\n    //   });\r\n    //   break;\r\n    default:\r\n      break; // do nothing\r\n  }\r\n  sessionStore.emitChange(event.actionType, event.data);\r\n});\r\n\r\nexport default sessionStore;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\dispatcher.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\User.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Errors.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Session.js",["553","554"],"/* eslint-disable import/no-anonymous-default-export */\r\nimport dispatcher from \"../dispatcher\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\n\r\nimport SocketEvents from \"../constants/SocketEvents\";\r\n\r\nimport sessionStore from \"../store/session\";\r\n\r\nimport { sendMessage } from \"../socket\";\r\n\r\nimport User from \"../models/User\";\r\n\r\nimport ClientData from \"../models/ClientData.js\";\r\nimport UserApi from \"../api/User\";\r\nimport { SettingsRemote } from \"@material-ui/icons\";\r\nimport ApiError from \"../models/ApiError\";\r\n\r\nfunction logout() {\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.Session.USER_LOGOUT,\r\n  });\r\n  window.location.reload();\r\n}\r\n\r\nconst setIsAuthenticating = (isIt) => {\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.Session.IS_AUTHENTICATING,\r\n    data: { isAuthenticating: isIt },\r\n  });\r\n};\r\n\r\nasync function userAuthenticate({ email, password }) {\r\n  setIsAuthenticating(true);\r\n  try {\r\n    const { user } = await UserApi.Authenticate(email, password);\r\n    if (user) {\r\n      sessionStore.setAuthenticationToken(user.authentication_token);\r\n      setTimeout(() => {\r\n        tryAuthentication();\r\n      });\r\n    } else {\r\n      onAuthenticationFailed();\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    onAuthenticationFailed();\r\n  } finally {\r\n    setIsAuthenticating(false);\r\n  }\r\n}\r\n\r\nfunction onAuthenticationFailed() {\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.Session.AUTHENTICATION_FAILED,\r\n  });\r\n  setIsAuthenticating(false);\r\n}\r\n\r\nfunction onUserDataReceived(userData) {\r\n  if (!User.isValid(userData)) {\r\n    return;\r\n  }\r\n  const user = new User(userData);\r\n  // Dispatch user data received and balance changes\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.Session.USER_DATA_UPDATED,\r\n    data: { user },\r\n  });\r\n}\r\n/**\r\n *\r\n * @param {ApiError} apiError\r\n */\r\nfunction onApiError(apiError) {\r\n  let err = \"\";\r\n  if (typeof apiError === \"object\") {\r\n    err = new ApiError(apiError).toString();\r\n  } else {\r\n    err = apiError;\r\n  }\r\n\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.UI.SHOW_SNACKBAR,\r\n    data: { message: err, severity: \"error\" },\r\n  });\r\n}\r\n\r\nfunction onApiSuccess(successMessage) {\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.Session.API_ERROR,\r\n    data: successMessage,\r\n  });\r\n}\r\nfunction tryAuthentication() {\r\n  const storedAuthenticationToken = sessionStore.getAuthenticationToken();\r\n  const isAuthenticating = sessionStore.isAuthenticating();\r\n  if (!storedAuthenticationToken || isAuthenticating) {\r\n    return;\r\n  }\r\n  setIsAuthenticating(true);\r\n  sendMessage(SocketEvents.AUTHENTICATE, storedAuthenticationToken);\r\n}\r\n\r\nconst onSessionIdReceived = (sessionId) => {\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.Session.ID_RECEIVED,\r\n    data: { sessionId },\r\n  });\r\n};\r\n\r\nexport default {\r\n  userAuthenticate,\r\n  onApiError,\r\n  onApiSuccess,\r\n  onSessionIdReceived,\r\n  tryAuthentication,\r\n  onUserDataReceived,\r\n  onAuthenticationFailed,\r\n  logout,\r\n};\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\api\\User.js",["555","556","557"],"import MakeRequest from \"./_Api\";\r\nimport UrlTrackingThread from \"../models/ScrapingThread\";\r\nimport User from \"../models/User\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\n\r\nexport default class UserApi {\r\n  /**\r\n   * @returns {User}\r\n   * @param {string} email\r\n   * @param {string} password\r\n   */\r\n  static async Authenticate(email, password) {\r\n    return await MakeRequest.post(\"/authenticate\", { email, password });\r\n  }\r\n\r\n  static async AddUser(userData) {\r\n    return await MakeRequest.post(\"/add-user\", userData);\r\n  }\r\n  /**\r\n   *\r\n   * @param {number[]} userIds\r\n   */\r\n  static async DeleteUsers(userIds) {\r\n    return await MakeRequest.post(\"/delete-users\", userIds);\r\n  }\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\SocketEvents.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\ScrapingThread.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\api\\_Api.js",["558","559","560"],"import constants from \"../constants/Environment\";\r\nimport sessionStore from \"../store/session\";\r\nimport sessionActions from \"../actions/Session\";\r\nimport Errors from \"../constants/Errors\";\r\nimport ApiError from \"../models/ApiError\";\r\nString.prototype.trimChar = function (charToRemove) {\r\n  let string = this;\r\n  while (string.charAt(0) == charToRemove) {\r\n    string = string.substring(1);\r\n  }\r\n\r\n  while (string.charAt(string.length - 1) == charToRemove) {\r\n    string = string.substring(0, string.length - 1);\r\n  }\r\n\r\n  return string;\r\n};\r\n\r\n// The class will automatically handle errors (notifies genericAppErrorHanelr)\r\nexport default class MakeRequest {\r\n  static _req(method, endpoint, data) {\r\n    endpoint = `${constants.ENDPOINT.trimChar(\"/\")}/${endpoint.trimChar(\"/\")}`;\r\n\r\n    const headers = { \"Content-Type\": \"application/json\" };\r\n    // If authentication token, append it\r\n    const authentication_token = sessionStore.getAuthenticationToken();\r\n\r\n    if (authentication_token) {\r\n      headers[\"X-Authentication-Token\"] = authentication_token;\r\n    }\r\n    return new Promise((resolve) => {\r\n      let requestOptions = {\r\n        method: method,\r\n        headers,\r\n        body: JSON.stringify(data),\r\n      };\r\n      fetch(endpoint, requestOptions)\r\n        .then((response) => {\r\n          response.json().then((json) => {\r\n            try {\r\n              if (ApiError.isError(json)) {\r\n                sessionActions.onApiError(new ApiError(json));\r\n                return resolve(json);\r\n              }\r\n              resolve(json);\r\n            } catch (error) {\r\n              sessionActions.onApiError(new ApiError(Errors.ERR_UNKNOWN));\r\n              resolve(error);\r\n            }\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n          resolve(false);\r\n        });\r\n    });\r\n  }\r\n  static post(endpoint, data) {\r\n    // Adjust endpoint\r\n\r\n    return this._req(\"POST\", endpoint, data);\r\n  }\r\n  static get(endpoint) {\r\n    return this._req(\"GET\", endpoint);\r\n  }\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Environment.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\ClientData.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket.js",["561","562"],"import dispatcher from \"./dispatcher\";\r\nimport ActionTypes from \"./constants/ActionTypes\";\r\nimport EnvironmentConstants from \"./constants/Environment\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport bindSessionSocketHandler from \"./socket-handlers/session\";\r\nimport bindScrapingThreadSocketHandler from \"./socket-handlers/ScrapingThread\";\r\nimport bindTableSocketHandler from \"./socket-handlers/Table\";\r\nimport bindStatisticsSocketHandler from \"./socket-handlers/Statistics\";\r\nimport bindUserFilter from \"./socket-handlers/UserFilter\";\r\nimport bindCountryFilter from \"./socket-handlers/CountryFilter\";\r\nimport bindHostsSocketInterface from \"./socket-handlers/Hosts\";\r\n\r\nvar socketInstance = initialize();\r\n\r\nexport function initialize() {\r\n  // Should be called once, maybe\r\n  const socket = io.connect(EnvironmentConstants.ENDPOINT_SOCKET, {\r\n    reconnect: true,\r\n    secure: true,\r\n    rejectUnauthorized: false,\r\n    transports: [\"websocket\"],\r\n  });\r\n\r\n  bindSessionSocketHandler(socket);\r\n  bindScrapingThreadSocketHandler(socket);\r\n  bindTableSocketHandler(socket);\r\n  bindStatisticsSocketHandler(socket);\r\n  bindUserFilter(socket);\r\n  bindCountryFilter(socket);\r\n  bindHostsSocketInterface(socket);\r\n\r\n  socket.on(\"disconnect\", async () => {\r\n    window.location.reload();\r\n  });\r\n\r\n  return socket;\r\n}\r\nexport function sendMessage(event, data) {\r\n  socketInstance.emit(event, data);\r\n}\r\n\r\nexport default socketInstance;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\session.js",["563"],"import dispatcher from \"../dispatcher\";\r\n\r\nimport sessionActions from \"../actions/Session\";\r\n\r\nimport SocketEvents from \"../constants/SocketEvents\";\r\n\r\nconst bindSessionSocketHandler = (socket) => {\r\n  socket.on(SocketEvents.AUTHENTICATION_FAILED, () => {\r\n    // Do nothing for now\r\n  });\r\n\r\n  socket.on(SocketEvents.USER_DATA, ({ user }) => {\r\n    sessionActions.onUserDataReceived(user);\r\n  });\r\n\r\n  socket.on(SocketEvents.ERROR, (errorCode) => {\r\n    sessionActions.onApiError(errorCode);\r\n  });\r\n\r\n  socket.on(SocketEvents.SUCCESS, (successMessage) => {\r\n    sessionActions.onApiSuccess(successMessage);\r\n  });\r\n\r\n  socket.on(SocketEvents.AUTHENTICATION_FAILED, (successMessage) => {\r\n    sessionActions.onAuthenticationFailed();\r\n  });\r\n};\r\n\r\nexport default bindSessionSocketHandler;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\ManageUsers.jsx",["564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useConfirm } from \"material-ui-confirm\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport scrapingThreadsActions from \"../actions/ScrapingThread\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ManageUsersTable from \"../components/Tables/ManageUsers\";\r\nimport {\r\n  Divider,\r\n  Input,\r\n  TableHead,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  InputAdornment,\r\n  ButtonGroup,\r\n  OutlinedInput,\r\n} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport sessionStore from \"../store/session\";\r\nimport AddTrackUrlTable from \"../components/Tables/AddTrackUrl\";\r\nimport dispatcher from \"../dispatcher\";\r\nimport { Search } from \"@material-ui/icons\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction createData(name, calories, fat) {\r\n  return { name, calories, fat };\r\n}\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\nlet filterTimeout = undefined;\r\nexport default function ManageUsersView() {\r\n  const [Filter, setFilter] = useState(\"\");\r\n  const classes = useStyles2();\r\n\r\n  const history = useHistory();\r\n\r\n  const theme = useTheme();\r\n\r\n  const onFilterChanged = (f) => {\r\n    clearTimeout(filterTimeout);\r\n    filterTimeout = setTimeout(() => {\r\n      console.log(\"Setting filter\");\r\n      setFilter(f);\r\n    }, 500);\r\n  };\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <div\r\n        style={{\r\n          padding: theme.spacing(2),\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          flexWrap: \"nowrap\",\r\n        }}\r\n      >\r\n        <FormControl fullWidth size=\"small\" className={classes.margin}>\r\n          <OutlinedInput\r\n            id=\"standard-adornment-amount\"\r\n            size=\"small\"\r\n            placeholder=\"Search users\"\r\n            onChange={(evt) => {\r\n              onFilterChanged(evt.target.value);\r\n            }}\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon />\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          disableElevation\r\n          startIcon={<Search />}\r\n          style={{ whiteSpace: \"nowrap\", marginLeft: theme.spacing(2) }}\r\n        >\r\n          Search\r\n        </Button>\r\n      </div>\r\n      <Divider />\r\n      <ManageUsersTable filter={Filter} />\r\n    </TableContainer>\r\n  );\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Session.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\UI.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\AppSnackbar.jsx",["591"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nimport uiStore from \"../store/UI\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport clsx from \"clsx\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  close: {\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  error: {\r\n    background: \"red\",\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\n// Need to pass handleClick(message) as prop\r\nexport default function Snackbars() {\r\n  const [snackPack, setSnackPack] = React.useState([]);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [messageInfo, setMessageInfo] = React.useState(undefined);\r\n  React.useEffect(() => {\r\n    if (snackPack.length && !messageInfo) {\r\n      // Set a new snack when we don't have an active one\r\n      setMessageInfo({ ...snackPack[0] });\r\n      setSnackPack((prev) => prev.slice(1));\r\n      setOpen(true);\r\n    } else if (snackPack.length && messageInfo && open) {\r\n      // Close an active snack when a new one is added\r\n      setOpen(false);\r\n    }\r\n  }, [snackPack, messageInfo, open]);\r\n\r\n  useEffect(() => {\r\n    uiStore.addChangeListener(ActionTypes.UI.SHOW_SNACKBAR, showSnackbar); // When component mounted, subscribe to dispatcher events.\r\n\r\n    return () => {\r\n      // On component unmounting, remove previous listener.\r\n      uiStore.removeChangeListener(ActionTypes.UI.SHOW_SNACKBAR, showSnackbar);\r\n    };\r\n  });\r\n\r\n  const showSnackbar = ({ message, severity }) => {\r\n    setSnackPack((prev) => [\r\n      ...prev,\r\n      { severity, message, key: new Date().getTime() },\r\n    ]);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleExited = () => {\r\n    setMessageInfo(undefined);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      {messageInfo && messageInfo.severity && (\r\n        <Snackbar\r\n          key={messageInfo ? messageInfo.key : undefined}\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\",\r\n          }}\r\n          open={open}\r\n          autoHideDuration={2750}\r\n          onClose={handleClose}\r\n          onExited={handleExited}\r\n        >\r\n          <Alert\r\n            onClose={handleClose}\r\n            severity={messageInfo && messageInfo.severity}\r\n            className={clsx({\r\n              [classes.error]: messageInfo && messageInfo.severity === \"error\",\r\n            })}\r\n          >\r\n            {messageInfo ? messageInfo.message : undefined}\r\n          </Alert>\r\n        </Snackbar>\r\n      )}\r\n      {(!messageInfo || !messageInfo.severity) && (\r\n        <Snackbar\r\n          key={messageInfo ? messageInfo.key : undefined}\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\",\r\n          }}\r\n          open={open}\r\n          autoHideDuration={2750}\r\n          onClose={handleClose}\r\n          onExited={handleExited}\r\n          message={messageInfo ? messageInfo.message : undefined}\r\n          action={\r\n            <React.Fragment>\r\n              <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\r\n                UNDO\r\n              </Button>\r\n              <IconButton\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                className={classes.close}\r\n                onClick={handleClose}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\UI.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\UI.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\ApiError.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\ScrapingThread.js",["592"],"import keyMirror from \"keymirror\";\r\n\r\nconst ActionTypes = {\r\n  THREAD_CREATION_REQUESTED: \"SCRAPING_THREAD_CREATION_REQUESTED\",\r\n  THREAD_CREATED: \"SCRAPING_THREAD_CREATED\",\r\n  IS_LOADING_THREADS: \"IS_LOADING_SCRAPING_THREADS\",\r\n  TABLE_DATA_RECEIVED: \"SCRAPING_THREADS_TABLE_DATA_RECEIVED\",\r\n  TABLE_DATA_REQUESTED: \"SCRAPING_THREADS_TABLE_DATA_REQUESTED\",\r\n  THREAD_MODIFIED: \"SCRAPING_THREAD_MODIFIED\",\r\n  SCRAPING_THREAD_STATUS_CHANGED: \"SCRAPING_THREAD_STATUS_CHANGED\",\r\n};\r\n\r\nexport default ActionTypes;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\ScrapingThread.js",["593","594","595","596","597"],"/* eslint-disable import/no-anonymous-default-export */\nimport scrapingThreadStore from \"../store/ScrapingThreads\";\nimport sessionStore from \"../store/session\";\nimport { sendMessage } from \"../socket\";\nimport SocketEvents from \"../constants/SocketEvents\";\n\nimport validate from \"../helpers/validate\";\nimport uiActions from \"../actions/UI\";\nimport Errors from \"../constants/Errors\";\nimport ApiError from \"../models/ApiError\";\nimport ScrapingThread from \"../models/ScrapingThread\";\nimport dispatcher from \"../dispatcher\";\nimport ActionTypes from \"../constants/ActionTypes\";\nimport { Socket } from \"socket.io-client\";\nimport TableData from \"../models/TableData\";\nimport tableActions from \"../actions/Table\";\n\nimport TableConstants from \"../constants/Tables\";\nconst create = ({ inputValue: url }) => {\n  // Make sure it's authenticated, just in case\n  if (!sessionStore.isAuthenticated()) {\n    uiActions.showSnackbar(\n      new ApiError(Errors.ERR_UNAUTHENTICATED).toString(),\n      \"error\"\n    );\n    return false;\n  }\n\n  if (typeof url !== \"string\") {\n    uiActions.showSnackbar(Errors.ERR_INVALID_URL, \"error\");\n    return false;\n  }\n  url = url.trim();\n  if (!validate.url(url)) {\n    uiActions.showSnackbar(Errors.ERR_INVALID_URL, \"error\");\n    return false;\n  }\n  sendMessage(SocketEvents.CREATE_SCRAPING_THREAD, url);\n\n  // Send a socket message requesting a thread creation\n};\n\n/**\n *\n * @param {ScrapingThread} scrapingThread\n */\nconst onThreadCreated = (scrapingThread) => {\n  uiActions.showSnackbar(\"URL successfuly registered for tracking\", \"success\");\n  dispatcher.dispatch({\n    actionType: ActionTypes.ScrapingThread.THREAD_CREATED,\n    data: { scrapingThread },\n  });\n};\n\nconst onThreadModified = (scrapingThread) => {\n  //uiActions.showSnackbar(\"URL successfuly registered for tracking\", \"success\");\n  dispatcher.dispatch({\n    actionType: ActionTypes.Table.DATA_MODIFIED,\n    data: {\n      key: \"threadId\",\n      tableNames: [\n        TableConstants.ADD_TRACK_URL,\n        TableConstants.TRACKED_URLS,\n        TableConstants.MANAGE_URLS,\n      ],\n      row: scrapingThread,\n    },\n  });\n};\n\n/**\n *\n * @param {TableData} tableData\n */\nconst requestTableDataRows = (tableData) => {\n  dispatcher.dispatch({\n    actionType: ActionTypes.ScrapingThread.TABLE_DATA_REQUESTED,\n    data: { tableData },\n  });\n\n  // Create an unreferenced object\n  const packet = { ...tableData };\n  delete packet.rows;\n  delete packet.isLoading;\n  sendMessage(SocketEvents.SCRAPING_THREADS_TABLE_REQUEST, packet);\n};\n\nconst retryThread = (threadId) => {\n  sendMessage(SocketEvents.RETRY_THREAD, threadId);\n};\n\nexport default {\n  create,\n  retryThread,\n  onThreadCreated,\n  requestTableDataRows,\n  onThreadModified,\n};\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\ScrapingThreads.js",["598","599"],"import { EventEmitter } from \"events\";\r\nimport dispatcher from \"../dispatcher\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport ScrapingThread from \"../models/ScrapingThread\";\r\nimport TableData from \"../models/TableData\";\r\nconst Errors = require(\"../constants/Errors\");\r\n\r\nclass ScrapingThreadsStore extends EventEmitter {\r\n  /**\r\n   * @type {ScrapingThread[]} threads\r\n   */\r\n  #threads;\r\n  /**\r\n   * Generally set to true whenever the client is waiting for thread creation feedback from the server\r\n   * @type {boolean}\r\n   */\r\n  #add_track_url_is_busy;\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  #is_waiting_for_results;\r\n\r\n  /**\r\n   * @type {Object.<string,TableData>}\r\n   */\r\n  #tables;\r\n  constructor(params) {\r\n    super(params);\r\n    this.#tables = {};\r\n\r\n    this.#add_track_url_is_busy = true;\r\n  }\r\n\r\n  canAddUrl() {\r\n    return this.#add_track_url_is_busy;\r\n  }\r\n  addChangeListener(event, callback) {\r\n    this.on(event, callback);\r\n  }\r\n\r\n  removeChangeListener(event, callback) {\r\n    this.removeListener(event, callback);\r\n  }\r\n\r\n  emitChange(event, data) {\r\n    this.emit(event, data);\r\n  }\r\n\r\n  /**\r\n   * @param {ScrapingThread[]} threads\r\n   */\r\n  storeThreads(threads) {\r\n    this.#threads = threads;\r\n  }\r\n\r\n  threadUpdated(threadId, threadData) {}\r\n\r\n  storeSingleThread(thread) {\r\n    this.#threads[thread.threadId] = thread;\r\n  }\r\n\r\n  getThreads() {\r\n    return this.#threads;\r\n  }\r\n\r\n  hasTableData(tableName) {\r\n    return Object.keys(this.#tables).includes(tableName);\r\n  }\r\n\r\n  /**\r\n   * @returns {TableData}\r\n   * @param {string} tableName\r\n   */\r\n  getTableData(tableName) {\r\n    if (!Object.keys(this.#tables).includes(tableName)) {\r\n      // Prepare table data object\r\n      return undefined;\r\n    }\r\n    return this.#tables[tableName];\r\n  }\r\n\r\n  setLoadingResults(isWaiting) {\r\n    this.#is_waiting_for_results = isWaiting;\r\n  }\r\n\r\n  isLoadingTableData(tableName) {\r\n    const td = this.getTableData(tableName);\r\n    if (td instanceof TableData && td.isLoading) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {TableData} tableData\r\n   */\r\n  setTableLoading(tableData) {\r\n    if (!this.hasTableData(tableData)) {\r\n      this.#tables[tableData.tableName] = tableData;\r\n    } else {\r\n      this.#tables[tableData.tableName].isLoading = true;\r\n    }\r\n  }\r\n  /**\r\n   *\r\n   * @param {TableData} tableData\r\n   */\r\n  setTableData(tableData) {\r\n    console.log(tableData.rows);\r\n    if (this.hasTableData(tableData.tableName)) {\r\n      this.#tables[tableData.tableName].rows = tableData.rows;\r\n      this.#tables[tableData.tableName].totalRowsCount =\r\n        tableData.totalRowsCount;\r\n      this.#tables[tableData.tableName].isLoading = false;\r\n    }\r\n  }\r\n}\r\n\r\nconst scrapingThreadsStore = new ScrapingThreadsStore();\r\n\r\nscrapingThreadsStore.dispatchToken = dispatcher.register((event) => {\r\n  let willEmitChange = true;\r\n  switch (event.actionType) {\r\n    case ActionTypes.ScrapingThread.THREAD_CREATED:\r\n      break;\r\n    default:\r\n      // Do nothing.\r\n      willEmitChange = false;\r\n      break;\r\n  }\r\n  willEmitChange &&\r\n    scrapingThreadsStore.emitChange(event.actionType, event.data);\r\n});\r\n\r\nexport default scrapingThreadsStore;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\helpers\\validate.js",["600"],"/**\n *\n * @param {string} str\n */\nconst url = (str) => {\n  if (!str || typeof str !== \"string\") {\n    return false;\n  }\n  const regex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n  return !!str.match(regex);\n};\n\nexport default { url };\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\AddTrackUrl.jsx",["601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { prettyTimelapse, timeSince } from \"../../helpers/time\";\r\nimport { Statuses } from \"../../constants/CrawlerThreadsStatuses\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  CircularProgress,\r\n  LinearProgress,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  Tooltip,\r\n  TableCell,\r\n  TableContainer,\r\n  TableFooter,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport sessionStore from \"../../store/session\";\r\nimport tableStore from \"../../store/Tables\";\r\nimport scrapingThreadsStore from \"../../store/ScrapingThreads\";\r\nimport TablePaginationActions from \"./Pagination\";\r\nimport EmptyTablePlaceholder from \"./EmptyPlaceholder\";\r\nimport ScrapingThreadStatus from \"../Table/ScrapingThreadStatus\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport ActionTypes from \"../../constants/ActionTypes\";\r\nimport scrapingThreadsActions from \"../../actions/ScrapingThread\";\r\nimport {\r\n  BrandingWatermark,\r\n  Cancel,\r\n  HourglassFull,\r\n  Today,\r\n  HourglassEmpty,\r\n  DoneAll,\r\n  BrandingWatermarkOutlined,\r\n  Check,\r\n  ErrorOutline,\r\n  BugReport,\r\n} from \"@material-ui/icons\";\r\n\r\nimport tableActions from \"../../actions/Table\";\r\nimport TableNames from \"../../constants/Tables\";\r\nimport TableData from \"../../models/TableData\";\r\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\r\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\r\nimport FindInPageIcon from \"@material-ui/icons/FindInPage\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ScrapingThread from \"../../models/ScrapingThread\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableContainer: {\r\n    overflowY: \"scroll\",\r\n    overflowX: \"hidden\",\r\n  },\r\n  table: {\r\n    minWidth: 500,\r\n    tableLayout: \"fixed\",\r\n    overflowY: \"auto\",\r\n    overflowX: \"hidden\",\r\n  },\r\n  tableRow: {\r\n    height: 70,\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  tableBody: {},\r\n  emptyRow: {\r\n    height: 70,\r\n    backgroundColor: \"white!important\",\r\n    \"&:first-child td\": {\r\n      paddingTop: \"8rem\",\r\n      paddingBottom: \"8rem\",\r\n    },\r\n  },\r\n\r\n  columnCheckbox: {\r\n    width: 64,\r\n  },\r\n}));\r\n\r\nconst THIS_TABLE_NAME = TableNames.TRACKED_URLS;\r\nvar TRIGGER_ROW_ADDED_ANIMATION = false;\r\nconst AddTrackUrlTable = () => {\r\n  let [tableData, setTableData] = useState(\r\n    tableStore.getTableData(THIS_TABLE_NAME)\r\n  );\r\n\r\n  const HasTableData = tableData !== undefined;\r\n\r\n  if (!HasTableData) {\r\n    tableData = TableData.defaults(THIS_TABLE_NAME);\r\n  }\r\n  const rowsPerPage = tableData.rowsPerPage;\r\n  const page = tableData.page;\r\n  let rows = tableData.rows;\r\n\r\n  const IsLoadingResults = tableData.isLoading;\r\n  let hasInheritedRows = false;\r\n  if (IsLoadingResults && tableData.previousTableData) {\r\n    rows = tableData.previousTableData.rows;\r\n    hasInheritedRows = true;\r\n  }\r\n\r\n  const isLoadingResults = tableData ? tableData.isLoading : true;\r\n  const rowsLength = Array.isArray(rows) ? rows.length : 0;\r\n  const classes = useStyles();\r\n  // const emptyRows =\r\n  //   rowsPerPage - Math.min(rowsPerPage, rowsLength - page * rowsPerPage);\r\n\r\n  const syncTableData = ({ newPage, newRowsPerPage }) => {\r\n    const _tableData = getTableData();\r\n\r\n    tableActions.createTableData({\r\n      rowsPerPage:\r\n        newRowsPerPage !== undefined ? newRowsPerPage : _tableData.rowsPerPage,\r\n      page:\r\n        newRowsPerPage !== -1\r\n          ? newPage !== undefined\r\n            ? newPage\r\n            : _tableData.page\r\n          : 0,\r\n      filter: \"\",\r\n      tableName: THIS_TABLE_NAME,\r\n      previousRowCount:\r\n        _tableData && _tableData.totalRowsCount\r\n          ? _tableData.totalRowsCount\r\n          : undefined,\r\n    });\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    console.log(\"handleChangePage.newPage\", newPage);\r\n    syncTableData({ newPage });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    syncTableData({ newRowsPerPage, newPage: 0 });\r\n  };\r\n\r\n  /**\r\n   * @type {Object} obj\r\n   * @type {TableData} obj.tableData\r\n   */\r\n  const onTableRowsDataUpdated = ({ tableData }) => {\r\n    if (tableData.tableName === THIS_TABLE_NAME) {\r\n      const foundTable = tableStore.getByTableName(THIS_TABLE_NAME);\r\n      console.log(\"foundTable\", foundTable);\r\n      setTableData(foundTable);\r\n    }\r\n  };\r\n\r\n  const getTableData = () => {\r\n    return tableStore.getTableData(THIS_TABLE_NAME) || tableData;\r\n  };\r\n  /**\r\n   * @type {Object} obj\r\n   * @type {TableData} obj.tableData\r\n   */\r\n  const onTableRowsDataModified = ({ tableNames }) => {\r\n    console.log(\"data modified on table \", tableNames);\r\n    if (tableNames.includes(THIS_TABLE_NAME)) {\r\n      const foundTable = tableStore.getByTableName(THIS_TABLE_NAME);\r\n      console.log(\"foundTable\", foundTable);\r\n      setTableData({ ...foundTable });\r\n    }\r\n  };\r\n  console.log(\"rendering\", tableData);\r\n\r\n  const onScrapingThreadCreated = () => {\r\n    TRIGGER_ROW_ADDED_ANIMATION = true;\r\n    setTimeout(() => {\r\n      syncTableData({ newPage: 0 });\r\n    });\r\n  };\r\n  const registerEventListeners = () => {\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_CREATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_UPDATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_MODIFIED,\r\n      onTableRowsDataModified\r\n    );\r\n    scrapingThreadsStore.addChangeListener(\r\n      ActionTypes.ScrapingThread.THREAD_CREATED,\r\n      onScrapingThreadCreated\r\n    );\r\n    return () => {\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_CREATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_UPDATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_MODIFIED,\r\n        onTableRowsDataModified\r\n      );\r\n      scrapingThreadsStore.removeChangeListener(\r\n        ActionTypes.ScrapingThread.THREAD_CREATED,\r\n        onScrapingThreadCreated\r\n      );\r\n    };\r\n  };\r\n\r\n  const renderEmptyRows = () => {\r\n    if (rowsPerPage === rowsLength) {\r\n      return \"\";\r\n    }\r\n    const isJustFilling = rowsLength > 0;\r\n    const hasFilterApplied =\r\n      tableData.totalRowsCount < tableData.unfilteredRowsCount;\r\n    const _renderHint = () => {\r\n      if (hasFilterApplied) {\r\n        return (\r\n          <Typography\r\n            variant={isJustFilling ? \"body2\" : \"h6\"}\r\n            style={{ color: theme.palette.text.hint }}\r\n          >\r\n            Try changing filter options\r\n          </Typography>\r\n        );\r\n      }\r\n      if (!isJustFilling)\r\n        return (\r\n          <Typography variant=\"h6\" style={{ color: theme.palette.text.hint }}>\r\n            Add some links to get started\r\n          </Typography>\r\n        );\r\n    };\r\n    const _emptyRowContent = () => (\r\n      <TableCell colspan=\"6\">\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n        >\r\n          {!isJustFilling && (\r\n            <Search\r\n              style={{\r\n                color: theme.palette.text.disabled,\r\n                width: 48,\r\n                height: 48,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography\r\n              variant={isJustFilling ? \"h6\" : \"h4\"}\r\n              style={{\r\n                color: isJustFilling\r\n                  ? theme.palette.text.hint\r\n                  : theme.palette.text.primary,\r\n              }}\r\n            >\r\n              No{rowsLength > 0 ? \" more\" : \"\"} links found\r\n            </Typography>\r\n          </Box>\r\n          {_renderHint()}\r\n        </Box>\r\n      </TableCell>\r\n    );\r\n\r\n    const _createRow = () => (\r\n      <TableRow\r\n        className={clsx({\r\n          [classes.tableRow]: true,\r\n          [classes.emptyRow]: true,\r\n        })}\r\n        key={Math.random()}\r\n      >\r\n        {_emptyRowContent()}\r\n      </TableRow>\r\n    );\r\n\r\n    return _createRow();\r\n  };\r\n\r\n  const refreshFunc = () => {\r\n    const _tableData = getTableData();\r\n\r\n    if (\r\n      _tableData.isLoading ||\r\n      parseInt(new Date() / 1000) - _tableData.age < 10\r\n    ) {\r\n      console.log(\"@@@@@ Skipping REFRESH\");\r\n      return;\r\n    }\r\n    syncTableData({});\r\n  };\r\n  useEffect(() => {\r\n    // Create an interval that refreshes the page every X\r\n    const refreshInterval = setInterval(refreshFunc, 5000);\r\n    setTimeout(() => {\r\n      syncTableData({});\r\n    });\r\n\r\n    const revokeEventListeners = registerEventListeners();\r\n\r\n    return () => {\r\n      clearInterval(refreshInterval);\r\n      revokeEventListeners();\r\n    };\r\n  }, []);\r\n\r\n  const theme = useTheme();\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.tableContainer}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          <colgroup>\r\n            <col style={{ width: \"70%\" }} />\r\n            <col style={{ width: \"15%\" }} />\r\n            <col style={{ width: \"15%\" }} />\r\n          </colgroup>\r\n          <TableBody className={classes.tableBody}>\r\n            {isLoadingResults && !hasInheritedRows\r\n              ? [\r\n                  ...Array(rowsPerPage !== undefined ? rowsPerPage : 10).keys(),\r\n                ].map((x) => (\r\n                  <TableRow\r\n                    key={x}\r\n                    className={classes.tableRow}\r\n                    style={{ height: 56 }}\r\n                  >\r\n                    <TableCell>\r\n                      <Skeleton style={{ width: \"100%\" }} />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton style={{ width: \"100%\" }} />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton style={{ width: \"100%\" }} />\r\n                    </TableCell>\r\n\r\n                    <TableCell style={{ opacity: \"0\" }}>\r\n                      <Skeleton style={{ width: \"100%\" }} />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              : rows.map((row, index) => {\r\n                  const innerRow = (\r\n                    <React.Fragment>\r\n                      <TableCell\r\n                        width=\"60%\"\r\n                        style={{\r\n                          width: \"60%\",\r\n                          textOverflow: \"ellipsis\",\r\n                          overflow: \"hidden\",\r\n                        }}\r\n                      >\r\n                        <Link href={row.url} target=\"_blank\">\r\n                          {row.url}\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell width=\"20%\" align=\"left\">\r\n                        <Box\r\n                          display=\"inline-flex\"\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"start\"\r\n                        >\r\n                          <Today\r\n                            style={{\r\n                              width: 18,\r\n                              height: 18,\r\n                              color: theme.palette.text.hint,\r\n                            }}\r\n                          />\r\n                          <Typography\r\n                            variant=\"body2\"\r\n                            noWrap={true}\r\n                            style={{ marginLeft: theme.spacing(1) }}\r\n                          >\r\n                            {timeSince(row.age)}\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell width=\"20%\" align=\"right\">\r\n                        <ScrapingThreadStatus row={row} />\r\n                      </TableCell>\r\n                    </React.Fragment>\r\n                  );\r\n                  const wrapComponent = (\r\n                    <TableRow className={classes.tableRow} key={row.uuid}>\r\n                      {innerRow}\r\n                    </TableRow>\r\n                  );\r\n                  return wrapComponent;\r\n                })}\r\n            {!IsLoadingResults && renderEmptyRows()}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      {rowsLength > 0 && (\r\n        <div>\r\n          <TablePagination\r\n            style={{ width: \"100%\", float: \"right\" }}\r\n            rowsPerPageOptions={[\r\n              5,\r\n              8,\r\n              10,\r\n              25,\r\n              50,\r\n              100,\r\n              // { label: \"All\", value: -1 },\r\n            ]}\r\n            colSpan={3}\r\n            count={tableData.totalRowsCount}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            SelectProps={{\r\n              inputProps: { \"aria-label\": \"rows per page\" },\r\n              native: true,\r\n            }}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            ActionsComponent={TablePaginationActions}\r\n          />\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(AddTrackUrlTable);\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\Pagination.jsx",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\EmptyPlaceholder.jsx",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\TableData.js",["628"],"/**\r\n * Enum string values.\r\n * @enum {string}\r\n */\r\nvar SortVariants = {\r\n  asc: \"asc\",\r\n  desc: \"desc\",\r\n};\r\n\r\nexport class SortColumn {\r\n  /**\r\n   *\r\n   */\r\n  name;\r\n  /**\r\n   * @type {SortVariants}\r\n   */\r\n  order;\r\n\r\n  /**\r\n   *\r\n   * @param {string} name\r\n   * @param {SortVariants} order\r\n   */\r\n  constructor(name, order) {\r\n    this.name = name;\r\n    this.order = order;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} DateRange\r\n * @property {number} dateStart\r\n * @property {number} dateEnd\r\n */\r\nexport default class TableData {\r\n  /**\r\n   * @type {Object[]}\r\n   */\r\n  rows;\r\n  /**\r\n   * @type {number}\r\n   */\r\n  rowsPerPage;\r\n  /**\r\n   * @type {number}\r\n   */\r\n  page;\r\n\r\n  /**\r\n   * @type {string}\r\n   */\r\n  filter;\r\n  /**\r\n   * @type {string}\r\n   */\r\n  tableName;\r\n\r\n  /**\r\n   * @type {DateRange}\r\n   */\r\n  dateRange;\r\n\r\n  /**\r\n   * @type {SortColumn}\r\n   */\r\n  sort;\r\n\r\n  /**\r\n   * Appliable to specific tables only\r\n   * @type {string[]}\r\n   */\r\n  countryFilter;\r\n\r\n  ///////////////////////////////////\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  isLoading;\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  totalRowsCount;\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  unfilteredRowsCount;\r\n\r\n  /**\r\n   * @type {string}\r\n   */\r\n  hash;\r\n\r\n  /**\r\n   * @type {TableData}\r\n   */\r\n  previousTableData;\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  scrapingFinished;\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  scrapedJobs;\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  age;\r\n  // getSortForColumn(columnName) {\r\n  //   if (this.sortColumns && Array.isArray(this.sortColumns)) {\r\n  //     for (let col of this.sortColumns) {\r\n  //       if (col.name === columnName) {\r\n  //         return col.order;\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   return undefined;\r\n  // }\r\n\r\n  getColumns() {}\r\n  // Uniquely identify each TableData representation by a hash\r\n  createHash() {\r\n    const hashable = [\r\n      this.tableName,\r\n      this.rowsPerPage,\r\n      this.filter,\r\n      this.page,\r\n      Object.values(this.dateRange).join(),\r\n    ].reduce((a, b) => {\r\n      return (a || \"\").toString() + (b || \"\").toString();\r\n    });\r\n    return Buffer.from(hashable).toString(\"base64\");\r\n  }\r\n\r\n  static defaults(tableName) {\r\n    return new TableData({\r\n      tableName,\r\n      rowsPerPage: 8,\r\n      page: 0,\r\n      filter: 0,\r\n      isLoading: true,\r\n      totalRowsCount: -1,\r\n      rows: [],\r\n      dateRange: {},\r\n      countryFilter: [],\r\n      unfilteredRowsCount: 0,\r\n    });\r\n  }\r\n\r\n  constructor({\r\n    tableName,\r\n    rows,\r\n    rowsPerPage,\r\n    page,\r\n    filter,\r\n    isLoading,\r\n    totalRowsCount,\r\n    dateRange,\r\n    sort,\r\n    countryFilter,\r\n    unfilteredRowsCount,\r\n  }) {\r\n    this.rows = rows;\r\n    this.rowsPerPage = rowsPerPage !== undefined ? rowsPerPage : 5;\r\n    this.filter = filter || \"\";\r\n    this.page = page !== undefined ? page : 0;\r\n    this.tableName = tableName;\r\n    this.totalRowsCount = totalRowsCount;\r\n    this.sort = sort;\r\n    this.isLoading = isLoading || true;\r\n    this.countryFilter = Array.isArray(countryFilter) ? countryFilter : [];\r\n    this.dateRange =\r\n      typeof dateRange === \"object\" && Object.values(dateRange).length > 0\r\n        ? dateRange\r\n        : {};\r\n    this.unfilteredRowsCount = unfilteredRowsCount || 0;\r\n    this.hash = this.createHash();\r\n    this.age = parseInt(new Date() / 1000);\r\n  }\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\ScrapingThread.js",["629","630","631","632","633","634","635"],"import dispatcher from \"../dispatcher\";\r\n\r\nimport sessionActions from \"../actions/Session\";\r\nimport scrapingThreadActions from \"../actions/ScrapingThread\";\r\n\r\nimport SocketEvents from \"../constants/SocketEvents\";\r\nimport sessionStore from \"../store/session\";\r\nimport tableStore from \"../store/Tables\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport TableNames from \"../constants/Tables\";\r\nimport { sendMessage } from \"../socket\";\r\nconst bindSessionSocketHandler = (socket) => {\r\n  socket.on(SocketEvents.SCRAPING_THREAD_CREATED, (scrapingThread) => {\r\n    scrapingThreadActions.onThreadCreated(scrapingThread);\r\n  });\r\n\r\n  socket.on(SocketEvents.SCRAPING_THREAD_SYNC, (scrapingThread) => {\r\n    scrapingThreadActions.onThreadModified(scrapingThread);\r\n  });\r\n\r\n  // socket.on(SocketEvents.SCRAPING_THREADS_TABLE_DATA, (tableData) => {\r\n  //   console.log(\"SocketEvents.SCRAPING_THREADS_TABLE_DATA\");\r\n  //   scrapingThreadActions.onTableDataReceived(tableData);\r\n  // });\r\n\r\n  /**\r\n   *\r\n   * @param {object} param0\r\n   * @param {TableData} param0.tableData\r\n   */\r\n  // const onTableHashCreated = ({ tableData }) => {\r\n  //   if (tableData.tableName === TableNames.ADD_TRACK_URL) {\r\n  //     // Request table data for this\r\n  //     delete tableData.rows;\r\n  //     delete tableData.isLoading;\r\n  //     sendMessage(SocketEvents.SCRAPING_THREADS_TABLE_REQUEST, tableData);\r\n  //   }\r\n  //   console.log(\"onTableHashCreated\", tableData);\r\n  // };\r\n\r\n  // tableStore.addChangeListener(\r\n  //   ActionTypes.Table.DATA_CREATED,\r\n  //   onTableHashCreated\r\n  // );\r\n};\r\n\r\nexport default bindSessionSocketHandler;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\helpers\\time.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Table.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\Tables.js",["636","637","638"],"import { EventEmitter } from \"events\";\r\nimport dispatcher from \"../dispatcher\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport User from \"../models/User\";\r\nimport TableData from \"../models/TableData\";\r\nimport { getPanelId } from \"@material-ui/lab\";\r\n\r\nconst Errors = require(\"../constants/Errors\");\r\n\r\nclass TableStore extends EventEmitter {\r\n  /**\r\n   * @type {Object.<string,TableData[]>}\r\n   */\r\n  #tables;\r\n\r\n  /**\r\n   * @type {Object.<string,string>}\r\n   */\r\n  #tables_name_hash_keypairs;\r\n\r\n  /**\r\n   * @type {string}\r\n   */\r\n  #current_table_name;\r\n  constructor(params) {\r\n    super(params);\r\n    this.dispatchToken = undefined;\r\n    this.#current_table_name = undefined;\r\n    this.#tables = {};\r\n    this.#tables_name_hash_keypairs = {};\r\n  }\r\n  addChangeListener(event, callback) {\r\n    this.on(event, callback);\r\n  }\r\n\r\n  removeChangeListener(event, callback) {\r\n    this.removeListener(event, callback);\r\n  }\r\n\r\n  emitChange(event, data) {\r\n    this.emit(event, data);\r\n  }\r\n\r\n  /**\r\n   * @returns {TableData}\r\n   * @param {string} tableName\r\n   */\r\n  getTableData(tableName) {\r\n    const tableHash = this.#tables_name_hash_keypairs[tableName];\r\n    if (!tableHash) {\r\n      const td = TableData.defaults(tableName);\r\n      const cachedResult = this.getCachedRowsPerPage(tableName);\r\n      if (cachedResult) {\r\n        td.rowsPerPage = cachedResult;\r\n      }\r\n      return td;\r\n    }\r\n    return this.#tables[tableHash];\r\n  }\r\n\r\n  isLoadingTableData(tableName) {\r\n    const td = this.getTableData(tableName);\r\n    if (td instanceof TableData && td.isLoading) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {TableData} tableData\r\n   */\r\n  setTableLoading(tableData) {\r\n    if (!this.hasTableData(tableData)) {\r\n      this.#tables[tableData.tableName] = tableData;\r\n    } else {\r\n      this.#tables[tableData.tableName].isLoading = true;\r\n    }\r\n  }\r\n  /**\r\n   * @param {TableData} tableData\r\n   */\r\n  storeTableData(tableData) {\r\n    this.#current_table_name = tableData.tableName;\r\n    const previousTableData = this.getByTableName(tableData.tableName);\r\n    if (previousTableData) {\r\n      tableData.previousTableData = { ...previousTableData };\r\n      this.deleteTableData(previousTableData.hash);\r\n    }\r\n\r\n    this.#tables_name_hash_keypairs[tableData.tableName] = tableData.hash;\r\n    this.#tables[tableData.hash] = tableData;\r\n\r\n    // Store settings for current table data\r\n    console.log(\">> CACHING\", tableData.tableName, tableData.rowsPerPage);\r\n    this.cacheRowsPerPage(tableData.tableName, tableData.rowsPerPage);\r\n  }\r\n\r\n  // cachePagination(tableName, page) {\r\n  //   localStorage.setItem(`table_pagination_${tableName}`, page);\r\n  // }\r\n\r\n  // getCachedRowsPerPage(tableName) {\r\n  //   localStorage.getItem(`table_pagination_${tableName}`);\r\n  // }\r\n\r\n  cacheRowsPerPage(tableName, rrp) {\r\n    localStorage.setItem(`table_rowsperpage_${tableName}`, rrp);\r\n  }\r\n\r\n  getCachedRowsPerPage(tableName) {\r\n    return parseInt(\r\n      localStorage.getItem(`table_rowsperpage_${tableName}`) || 0\r\n    );\r\n  }\r\n\r\n  deleteTableData(hash) {\r\n    delete this.#tables[hash];\r\n  }\r\n\r\n  /**\r\n   * @param {TableData} tableData\r\n   */\r\n  updateTableData(tableData) {\r\n    tableData.age = parseInt(new Date() / 1000);\r\n    this.#tables[tableData.hash] = tableData;\r\n    console.log(\"newTabelData\", this.#tables);\r\n  }\r\n\r\n  getByHash(tableHash) {\r\n    return this.#tables[tableHash];\r\n  }\r\n\r\n  /**\r\n   * @returns {TableData}\r\n   * @param {string} tableName\r\n   */\r\n  getByTableName(tableName) {\r\n    const foundHash = this.#tables_name_hash_keypairs[tableName];\r\n    if (foundHash) {\r\n      return this.getByHash(foundHash);\r\n    }\r\n  }\r\n\r\n  addRow({ row, tableName }) {\r\n    const tableData = this.getByTableName(tableName);\r\n    if (!tableData) {\r\n      // Wtf\r\n      return;\r\n    }\r\n    tableData.rows = [row, ...tableData.rows];\r\n    tableData.totalRowsCount++;\r\n    // That's it\r\n  }\r\n\r\n  alterRow({ row, key, tableName }) {\r\n    const tableData = this.getByTableName(tableName);\r\n    if (!tableData) {\r\n      // Wtf\r\n      return;\r\n    }\r\n    const replaceable = tableData.rows.findIndex((c) => c[key] === row[key]);\r\n    if (replaceable !== -1) {\r\n      tableData.rows[replaceable] = row;\r\n    }\r\n  }\r\n\r\n  getCurrentTableName() {\r\n    return this.#current_table_name;\r\n  }\r\n}\r\n\r\nconst tableStore = new TableStore();\r\n\r\ntableStore.dispatchToken = dispatcher.register((event) => {\r\n  switch (event.actionType) {\r\n    case ActionTypes.Table.DATA_CREATED:\r\n      tableStore.storeTableData(event.data.tableData);\r\n      break;\r\n    case ActionTypes.Table.DATA_UPDATED:\r\n      tableStore.updateTableData(event.data.tableData);\r\n      break;\r\n    case ActionTypes.Table.DATA_MODIFIED:\r\n      const { row, key, tableNames } = event.data;\r\n      const currentTable = tableStore.getCurrentTableName();\r\n      if (tableNames.includes(currentTable)) {\r\n        event.data.tableName = currentTable;\r\n        tableStore.alterRow({ row, key, tableName: currentTable });\r\n      }\r\n      break;\r\n    case ActionTypes.Table.ROW_ADDED:\r\n      tableStore.addRow(event.data);\r\n      break;\r\n    default:\r\n      break; // do nothing\r\n  }\r\n  tableStore.emitChange(event.actionType, event.data);\r\n});\r\n\r\nexport default tableStore;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Tables.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Table.js",["639","640"],"import ActionTypes from \"../constants/ActionTypes\";\r\nimport dispatcher from \"../dispatcher\";\r\nimport TableData from \"../models/TableData\";\r\nimport sessionStore from \"../store/session\";\r\nimport tableStore from \"../store/Tables\";\r\n\r\n/**\r\n * @returns {TableData}\r\n * @param {TableData} param0\r\n */\r\nconst createTableData = ({\r\n  tableName,\r\n  filter,\r\n  page,\r\n  rowsPerPage,\r\n  sort,\r\n  previousRowCount,\r\n  countryFilter,\r\n  dateRange,\r\n}) => {\r\n  const createdTableData = new TableData({\r\n    tableName,\r\n    filter,\r\n    rowsPerPage,\r\n    page,\r\n    sort,\r\n    isLoading: true,\r\n    totalRowsCount: previousRowCount !== undefined ? previousRowCount : -1,\r\n    rows: [],\r\n    dateRange,\r\n    countryFilter,\r\n  });\r\n\r\n  console.log(\"createdTableData\", createdTableData);\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.Table.DATA_CREATED,\r\n    data: {\r\n      tableData: createdTableData,\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n *\r\n * @param {TableData} tableData\r\n */\r\nconst onTableDataReceived = (tableData) => {\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.Table.DATA_UPDATED,\r\n    data: { tableData },\r\n  });\r\n};\r\n\r\nconst onRowAdded = ({ row, tableName }) => {\r\n  dispatcher.dispatch({\r\n    actionType: ActionTypes.Table.ROW_ADDED,\r\n    data: { row, tableName },\r\n  });\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { createTableData, onTableDataReceived, onRowAdded };\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\Table.js",["641","642","643","644","645"],"import dispatcher from \"../dispatcher\";\r\n\r\nimport sessionActions from \"../actions/Session\";\r\nimport scrapingThreadActions from \"../actions/ScrapingThread\";\r\n\r\nimport SocketEvents from \"../constants/SocketEvents\";\r\nimport sessionStore from \"../store/session\";\r\nimport tableStore from \"../store/Tables\";\r\nimport tableActions from \"../actions/Table\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport TableNames from \"../constants/Tables\";\r\nimport { sendMessage } from \"../socket\";\r\nconst bindSocketHandler = (socket) => {\r\n  //   socket.on(SocketEvents.SCRAPING_THREAD_CREATED, (scrapingThread) => {\r\n  //     scrapingThreadActions.onThreadCreated(scrapingThread);\r\n  //   });\r\n\r\n  socket.on(SocketEvents.TABLE_DATA, (tableData) => {\r\n    tableActions.onTableDataReceived(tableData);\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @param {object} param0\r\n   * @param {TableData} param0.tableData\r\n   */\r\n  const onTableHashCreated = ({ tableData }) => {\r\n    const dup = { ...tableData };\r\n    delete dup.rows;\r\n    delete dup.isLoading;\r\n    sendMessage(SocketEvents.TABLE_SYNC, dup);\r\n  };\r\n\r\n  tableStore.addChangeListener(\r\n    ActionTypes.Table.DATA_CREATED,\r\n    onTableHashCreated\r\n  );\r\n};\r\n\r\nexport default bindSocketHandler;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\FAQ.jsx",["646"],"import { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst FAQView = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"subtitle2\">How is URL score calculated?</Typography>\r\n      <Typography variant=\"body1\" noWrap={false}>{`\r\n      a) Variables\r\n\r\n      SEQ[UJ, TL] = Pair sequence representing amount of (Unique Jobs) yielded per crawl in relation with (Total Links) extracted\r\n      \r\n      b) Boundaries\r\n      Min score =  0 \r\n      Max score = 10\r\n      \r\n      \r\n      \r\n      c) The math\r\n      \r\n      # Calcualte percentage of good links that yielded a job\r\n      fPC(UJ,TL) = UJ/TL*100 \r\n      \r\n      # Example\r\n      # Seq( A[32,48], B[20,20], D[32,50])\r\n      \r\n      PCa = fPC(SeqA) = 66,66%\r\n      PCb = fPC(SeqB) = 100%\r\n      PCc = fPC(SeqC) = 64%\r\n      \r\n      # Average down percentages\r\n      AvgPC = (PCa + PCb + PCc) / 3 = 76,88&\r\n      \r\n      \r\n      # Narrow down to decimal scores\r\n      SCORE = AvgPC / Max score = 7.7\r\n      `}</Typography>\r\n      <img\r\n        style={{ width: 320, height: \"auto\" }}\r\n        src=\"https://media.makeameme.org/created/what-the-faq-lj9cpd.jpg\"\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FAQView;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Users.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\ManageUsers.jsx",["647","648","649","650","651","652","653","654","655","656","657","658","659"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { useConfirm } from \"material-ui-confirm\";\r\nimport { prettyTimelapse, timeSince } from \"../../helpers/time\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Divider,\r\n  IconButton,\r\n  LinearProgress,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableFooter,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport uiActions from \"../../actions/UI\";\r\nimport UserApi from \"../../api/User\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport sessionStore from \"../../store/session\";\r\nimport tableStore from \"../../store/Tables\";\r\nimport scrapingThreadsStore from \"../../store/ScrapingThreads\";\r\nimport TablePaginationActions from \"./Pagination\";\r\nimport EmptyTablePlaceholder from \"./EmptyPlaceholder\";\r\n\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport ActionTypes from \"../../constants/ActionTypes\";\r\nimport scrapingThreadsActions from \"../../actions/ScrapingThread\";\r\nimport {\r\n  Add,\r\n  AddCircle,\r\n  Delete,\r\n  Today,\r\n  Search,\r\n  AssignmentTurnedIn,\r\n} from \"@material-ui/icons\";\r\n\r\nimport tableActions from \"../../actions/Table\";\r\nimport TableNames from \"../../constants/Tables\";\r\nimport TableData from \"../../models/TableData\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  tableRow: {\r\n    height: 70,\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  emptyRow: {\r\n    height: 70,\r\n    backgroundColor: \"white!important\",\r\n    \"&:first-child td\": {\r\n      paddingTop: \"8rem\",\r\n      paddingBottom: \"8rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst THIS_TABLE_NAME = TableNames.USERS_ADMIN;\r\n\r\nconst ManageUsersTable = ({ filter }) => {\r\n  let [tableData, setTableData] = useState(\r\n    tableStore.getTableData(THIS_TABLE_NAME)\r\n  );\r\n\r\n  const [SelectedRows, setSelectedRows] = useState([]);\r\n\r\n  const HasTableData = tableData !== undefined;\r\n\r\n  if (!HasTableData) {\r\n    tableData = TableData.defaults(THIS_TABLE_NAME);\r\n  }\r\n  const rowsPerPage = tableData.rowsPerPage;\r\n  const page = tableData.page;\r\n  let rows = tableData.rows;\r\n\r\n  const IsLoadingResults = tableData.isLoading;\r\n  let hasInheritedRows = false;\r\n  if (IsLoadingResults && tableData.previousTableData) {\r\n    rows = tableData.previousTableData.rows;\r\n    hasInheritedRows = true;\r\n  }\r\n\r\n  const rowsLength = Array.isArray(rows) ? rows.length : 0;\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, rowsLength - page * rowsPerPage) +\r\n    (rowsLength > 1 ? 0 : 1);\r\n\r\n  const isLoadingResults = tableData ? tableData.isLoading : true;\r\n  const classes = useStyles();\r\n  // const emptyRows =\r\n  //   rowsPerPage - Math.min(rowsPerPage, rowsLength - page * rowsPerPage);\r\n  const confirm = useConfirm();\r\n  const deleteUser = async (userId, username) => {\r\n    confirm({\r\n      description: `Are you sure you want to delete \"${username}\" (ID: ${userId})?`,\r\n      title: `Delete user \"${username}\"`,\r\n    })\r\n      .then(async () => {\r\n        const res = await UserApi.DeleteUsers([userId]);\r\n        if (res && res.success) {\r\n          uiActions.showSnackbar(`User \"${username}\" deleted`, \"success\");\r\n          syncTableData({});\r\n        }\r\n      })\r\n      .catch();\r\n  };\r\n  const getTableData = () => {\r\n    return tableStore.getTableData(THIS_TABLE_NAME) || tableData;\r\n  };\r\n  const syncTableData = ({ newPage, newRowsPerPage, newDateRange }) => {\r\n    const _tableData = getTableData();\r\n\r\n    tableActions.createTableData({\r\n      rowsPerPage:\r\n        newRowsPerPage !== undefined ? newRowsPerPage : _tableData.rowsPerPage,\r\n      totalRowsCount: _tableData.totalRowsCount,\r\n      page:\r\n        newRowsPerPage !== -1\r\n          ? newPage !== undefined\r\n            ? newPage\r\n            : _tableData.page\r\n          : 0,\r\n      filter: filter || \"\",\r\n      tableName: THIS_TABLE_NAME,\r\n      previousRowCount:\r\n        _tableData && _tableData.totalRowsCount\r\n          ? _tableData.totalRowsCount\r\n          : undefined,\r\n      dateRange:\r\n        newDateRange !== undefined ? newDateRange : _tableData.dateRange,\r\n    });\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    console.log(\"handleChangePage.newPage\", newPage);\r\n    syncTableData({ newPage, newFilter: filter });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    syncTableData({ newRowsPerPage, newPage: 0, newFilter: filter });\r\n  };\r\n\r\n  /**\r\n   * @type {Object} obj\r\n   * @type {TableData} obj.tableData\r\n   */\r\n  const onTableRowsDataUpdated = ({ tableData }) => {\r\n    if (tableData.tableName === THIS_TABLE_NAME) {\r\n      const foundTable = tableStore.getByTableName(THIS_TABLE_NAME);\r\n      console.log(\"foundTable\", foundTable);\r\n      setTableData(foundTable);\r\n    }\r\n  };\r\n  console.log(\"rendering\", tableData);\r\n\r\n  const selectAllRows = (evt) => {\r\n    const checked = evt.target.checked;\r\n    if (!checked) {\r\n      setSelectedRows([]);\r\n    } else if (checked) {\r\n      if (Array.isArray(rows)) {\r\n        setSelectedRows(rows.map((row) => row.id));\r\n      }\r\n    }\r\n  };\r\n\r\n  const bindListeners = () => {\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_CREATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_UPDATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n\r\n    return () => {\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_CREATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_UPDATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Means data has not yet loaded nor requested\r\n    setTimeout(() => {\r\n      syncTableData({});\r\n    });\r\n\r\n    return bindListeners();\r\n  }, []);\r\n  // if (rows.length <= 0) {\r\n  //   return <EmptyTablePlaceholder />;\r\n  // }\r\n\r\n  const theme = useTheme();\r\n  const onRowSelectionChanged = (id) => {\r\n    console.log(SelectedRows);\r\n    const alreadySelectedIndex = SelectedRows.findIndex((c) => c === id);\r\n    const alreadySelected =\r\n      alreadySelectedIndex !== -1 && alreadySelectedIndex !== false;\r\n    if (alreadySelected) {\r\n      SelectedRows.splice(alreadySelectedIndex, 1);\r\n      setSelectedRows([...SelectedRows]);\r\n    } else {\r\n      setSelectedRows([id, ...SelectedRows]);\r\n    }\r\n  };\r\n  const deleteSelectedUsers = () => {\r\n    if (SelectedRows.length) {\r\n      confirm({\r\n        description: `Are you sure you want to delete ${SelectedRows.length} users?`,\r\n        title: `Delete ${SelectedRows.length} users`,\r\n      })\r\n        .then(async () => {\r\n          const res = await UserApi.DeleteUsers(SelectedRows);\r\n          if (res && res.success) {\r\n            uiActions.showSnackbar(`Users deleted successfully`, \"success\");\r\n            setSelectedRows([]);\r\n            setTimeout(() => {\r\n              syncTableData({});\r\n            });\r\n          }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n  const renderName = (row) => {\r\n    let toWrap = undefined;\r\n    if (row.name) {\r\n      toWrap = (\r\n        <React.Fragment>\r\n          {row.name}\r\n          <Typography variant=\"caption\">{row.username}</Typography>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    toWrap = row.username;\r\n    return <TableCell>{toWrap}</TableCell>;\r\n  };\r\n  const renderEmptyRows = () => {\r\n    if (rowsPerPage === rowsLength) {\r\n      return \"\";\r\n    }\r\n    const isJustFilling = rowsLength > 0;\r\n    const hasFilterApplied =\r\n      tableData.totalRowsCount < tableData.unfilteredRowsCount;\r\n    const _renderHint = () => {\r\n      if (hasFilterApplied) {\r\n        return (\r\n          <Typography variant=\"h6\" style={{ color: theme.palette.text.hint }}>\r\n            Try changing filter options\r\n          </Typography>\r\n        );\r\n      }\r\n    };\r\n    const _emptyRowContent = () => (\r\n      <TableCell colspan=\"6\">\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n        >\r\n          {!isJustFilling && (\r\n            <Search\r\n              style={{\r\n                color: theme.palette.text.disabled,\r\n                width: 48,\r\n                height: 48,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography\r\n              variant={isJustFilling ? \"h6\" : \"h4\"}\r\n              style={{\r\n                color: isJustFilling\r\n                  ? theme.palette.text.hint\r\n                  : theme.palette.text.primary,\r\n              }}\r\n            >\r\n              No{rowsLength > 0 ? \" more\" : \"\"} users found\r\n            </Typography>\r\n          </Box>\r\n          {_renderHint()}\r\n        </Box>\r\n      </TableCell>\r\n    );\r\n\r\n    const _createRow = () => (\r\n      <TableRow\r\n        className={clsx({\r\n          [classes.tableRow]: true,\r\n          [classes.emptyRow]: true,\r\n        })}\r\n        key={Math.random()}\r\n      >\r\n        {_emptyRowContent()}\r\n      </TableRow>\r\n    );\r\n\r\n    return _createRow();\r\n  };\r\n  return (\r\n    <Table className={classes.table} stickyHeader>\r\n      {/* <LinearProgress\r\n        variant=\"indeterminate\"\r\n        color=\"secondary\"\r\n        style={{ height: 2, opacity: IsLoadingResults ? \"0.5\" : 0 }}\r\n      /> */}\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell component=\"th\" colspan=\"6\">\r\n            <Box display=\"flex\" width=\"100%\">\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <Checkbox\r\n                  size=\"small\"\r\n                  disabled={rows.length < 1}\r\n                  checked={rows.length && SelectedRows.length === rows.length}\r\n                  onChange={selectAllRows}\r\n                />\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  marginLeft: theme.spacing(1),\r\n                }}\r\n              >\r\n                <Tooltip\r\n                  title={`Permanently delete ${SelectedRows.length} users`}\r\n                >\r\n                  <IconButton\r\n                    size=\"small\"\r\n                    disabled={SelectedRows.length < 1}\r\n                    onClick={deleteSelectedUsers}\r\n                  >\r\n                    <Badge badgeContent={SelectedRows.length} color=\"secondary\">\r\n                      <Delete />\r\n                    </Badge>\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  marginLeft: theme.spacing(1),\r\n                }}\r\n              >\r\n                <Tooltip title=\"Register new user\">\r\n                  <Button\r\n                    style={{ marginLeft: theme.spacing(1) }}\r\n                    startIcon={<AddCircle color=\"primary\" />}\r\n                    component={RouterLink}\r\n                    to=\"/add-user\"\r\n                  >\r\n                    Add user\r\n                  </Button>\r\n                </Tooltip>\r\n              </div>\r\n            </Box>\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {isLoadingResults && !hasInheritedRows\r\n          ? [...Array(rowsPerPage !== undefined ? rowsPerPage : 10).keys()].map(\r\n              (x) => (\r\n                <TableRow key={x} style={{ height: 56 }}>\r\n                  {/* {[...Array(3).keys()].map((c) => (\r\n                  <TableCell key={c} colSpan={6 / c}>\r\n                    <Skeleton animation=\"wave\" style={{ height: 48 }} />\r\n                  </TableCell>\r\n                ))} */}\r\n                  <TableCell width=\"45%\">\r\n                    <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                  </TableCell>\r\n                  <TableCell width=\"27,5%\">\r\n                    <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                  </TableCell>\r\n                  <TableCell width=\"27,5%\" align=\"right\">\r\n                    <Skeleton\r\n                      animation=\"wave\"\r\n                      style={{\r\n                        width: \"75%\",\r\n                        display: \"inline-block\",\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              )\r\n            )\r\n          : rows.map((row) => {\r\n              const innerRow = (\r\n                <React.Fragment>\r\n                  <TableCell width=\"64px\">\r\n                    <Checkbox\r\n                      size=\"small\"\r\n                      checked={SelectedRows.includes(row.id)}\r\n                      onChange={(evt) => {\r\n                        onRowSelectionChanged(row.id);\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  {renderName(row)}\r\n                  <TableCell>\r\n                    <Link href={row.url} target=\"_blank\">\r\n                      {row.email}\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell style={{ width: 160 }} align=\"right\">\r\n                    <Box\r\n                      display=\"inline-flex\"\r\n                      alignItems=\"center\"\r\n                      justifyContent=\"start\"\r\n                    >\r\n                      <Today\r\n                        style={{\r\n                          width: 18,\r\n                          height: 18,\r\n                          color: theme.palette.text.hint,\r\n                        }}\r\n                      />\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        noWrap={true}\r\n                        style={{ marginLeft: theme.spacing(1) }}\r\n                      >\r\n                        {timeSince(row.age)}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell style={{ width: 48 }} align=\"right\">\r\n                    <Box alignItems=\"center\" flexWrap=\"nowrap\" display=\"flex\">\r\n                      <AssignmentTurnedIn\r\n                        style={{\r\n                          width: 18,\r\n                          height: 18,\r\n                          color: theme.palette.text.hint,\r\n                        }}\r\n                      />\r\n\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        noWrap={true}\r\n                        style={{\r\n                          marginLeft: theme.spacing(1),\r\n                          whiteSpace: \"nowrap\",\r\n                        }}\r\n                      >\r\n                        {row.scrapedJobs || 0} Inserted jobs\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => {\r\n                        deleteUser(row.id, row.username);\r\n                      }}\r\n                    >\r\n                      <Delete fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </React.Fragment>\r\n              );\r\n              const wrapComponent = (\r\n                <TableRow className={classes.tableRow} key={row.uuid}>\r\n                  {innerRow}\r\n                </TableRow>\r\n              );\r\n              return wrapComponent;\r\n            })}\r\n        {!IsLoadingResults && renderEmptyRows()}\r\n      </TableBody>\r\n      <TableFooter>\r\n        <TableRow>\r\n          {rowsLength > 0 && (\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 8, 10, 25, { label: \"All\", value: -1 }]}\r\n              colSpan={6}\r\n              count={tableData.totalRowsCount}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { \"aria-label\": \"rows per page\" },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          )}\r\n        </TableRow>\r\n      </TableFooter>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default ManageUsersTable;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\AppPreload.jsx",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\AddUser.jsx",["660","661","662","663","664","665","666"],"import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { useConfirm } from \"material-ui-confirm\";\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  Checkbox,\r\n  Divider,\r\n  Button,\r\n  FormControlLabel,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  FormGroup,\r\n  FormLabel,\r\n  FormControl,\r\n  ButtonGroup,\r\n  FormHelperText,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport UserApi from \"../api/User\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LinearScaleIcon from \"@material-ui/icons/LinearScale\";\r\nimport {\r\n  ArrowBack,\r\n  Check,\r\n  Mail,\r\n  Person,\r\n  Visibility,\r\n  VisibilityOff,\r\n  Lock,\r\n} from \"@material-ui/icons\";\r\n\r\nimport uiActions from \"../actions/UI\";\r\nimport ApiError from \"../models/ApiError\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"inline-block\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  box: {\r\n    \"& > *\": {\r\n      marginBottom: theme.spacing(1.5),\r\n    },\r\n  },\r\n  saveBtn: {\r\n    color: theme.palette.success.main,\r\n  },\r\n  abortBtn: {\r\n    color: theme.palette.error.dark,\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst AddUserView = () => {\r\n  const [Password, setPassword] = useState(\"\");\r\n  const [ShowPassword, setShowPassword] = useState(false);\r\n  const [Email, setEmail] = useState(\"\");\r\n  const [IsAdmin, setIsAdmin] = useState(false);\r\n  const [FullName, setFullName] = useState(\"\");\r\n  const [Username, setUsername] = useState(\"\");\r\n\r\n  const [InputErrors, setInputErrors] = useState([]);\r\n\r\n  const hasError = (field) => {\r\n    return InputErrors.includes(field);\r\n  };\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const history = useHistory();\r\n  const onGoBack = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!ShowPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const performAddUser = async () => {\r\n    let result = await UserApi.AddUser({\r\n      email: Email,\r\n      username: Username,\r\n      name: FullName,\r\n      password: Password,\r\n      isAdmin: IsAdmin,\r\n    });\r\n\r\n    if (ApiError.isError(result)) {\r\n      const vars = Object.keys(result.variables);\r\n      setInputErrors(vars);\r\n    } else {\r\n      history.goBack();\r\n      uiActions.showSnackbar(`User \"${Username}\" created.`, \"success\");\r\n    }\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <div\r\n        style={{\r\n          display: \"inline-flex\",\r\n          alignItems: \"center\",\r\n          marginBottom: theme.spacing(1),\r\n        }}\r\n      >\r\n        <IconButton size=\"small\" onClick={onGoBack}>\r\n          <ArrowBack size=\"small\" />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" style={{ marginLeft: theme.spacing(1) }}>\r\n          Add new user\r\n        </Typography>\r\n      </div>\r\n      <Paper className={classes.paper}>\r\n        <Box\r\n          className={classes.box}\r\n          display=\"inline-flex\"\r\n          alignItems=\"start\"\r\n          flexDirection=\"column\"\r\n        >\r\n          <Typography\r\n            variant=\"body1\"\r\n            style={{ color: theme.palette.text.hint }}\r\n          >\r\n            User information\r\n          </Typography>\r\n\r\n          <FormGroup row>\r\n            <FormControl variant=\"outlined\">\r\n              <InputLabel htmlFor=\"full-name-input\">Full name</InputLabel>\r\n              <OutlinedInput\r\n                id=\"full-name-input\"\r\n                startAdornment={\r\n                  <InputAdornment position=\"start\">\r\n                    <FaceIcon />\r\n                  </InputAdornment>\r\n                }\r\n                value={FullName}\r\n                required\r\n                min=\"4\"\r\n                name=\"fullName\"\r\n                max=\"50\"\r\n                onChange={(evt) => {\r\n                  setFullName(evt.target.value);\r\n                }}\r\n                type=\"text\"\r\n                size=\"small\"\r\n                placeholder=\"John doe\"\r\n                labelWidth={70}\r\n                error={hasError(\"name\")}\r\n                aria-describedby=\"full-name-helper\"\r\n              />\r\n              <FormHelperText\r\n                id=\"full-name-helper\"\r\n                error={hasError(\"name\")}\r\n                className={clsx({ [classes.hide]: !hasError(\"name\") })}\r\n              >\r\n                3-50 characters\r\n              </FormHelperText>\r\n            </FormControl>\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              style={{ marginLeft: theme.spacing(1) }}\r\n            >\r\n              <InputLabel htmlFor=\"email-input\">Email</InputLabel>\r\n              <OutlinedInput\r\n                id=\"email-input\"\r\n                startAdornment={\r\n                  <InputAdornment position=\"start\">\r\n                    <Mail />\r\n                  </InputAdornment>\r\n                }\r\n                value={Email}\r\n                required\r\n                onChange={(evt) => {\r\n                  setEmail(evt.target.value);\r\n                }}\r\n                type=\"text\"\r\n                size=\"small\"\r\n                placeholder=\"johndoe@mail.com\"\r\n                labelWidth={40}\r\n                error={hasError(\"email\")}\r\n                aria-describedby=\"email-helper\"\r\n              />\r\n              <FormHelperText\r\n                id=\"email-helper\"\r\n                error={hasError(\"email\")}\r\n                className={clsx({ [classes.hide]: !hasError(\"email\") })}\r\n              >\r\n                Must be a valid email\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </FormGroup>\r\n\r\n          <Typography\r\n            variant=\"body1\"\r\n            style={{\r\n              color: theme.palette.text.hint,\r\n              marginTop: theme.spacing(3),\r\n            }}\r\n          >\r\n            Authentication credentials\r\n          </Typography>\r\n\r\n          <FormGroup row>\r\n            <FormControl variant=\"outlined\">\r\n              <InputLabel htmlFor=\"username-input\">Username</InputLabel>\r\n              <OutlinedInput\r\n                id=\"username-input\"\r\n                required\r\n                startAdornment={\r\n                  <InputAdornment position=\"start\">\r\n                    <Person />\r\n                  </InputAdornment>\r\n                }\r\n                value={Username}\r\n                onChange={(evt) => {\r\n                  setUsername(evt.target.value);\r\n                }}\r\n                type=\"text\"\r\n                size=\"small\"\r\n                placeholder=\"johndoe12\"\r\n                labelWidth={70}\r\n                error={hasError(\"username\")}\r\n                aria-describedby=\"username-helper\"\r\n              />\r\n              <FormHelperText\r\n                id=\"username-helper\"\r\n                error={hasError(\"username\")}\r\n                className={clsx({ [classes.hide]: !hasError(\"username\") })}\r\n              >\r\n                6-32 characters\r\n              </FormHelperText>\r\n            </FormControl>\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              style={{ marginLeft: theme.spacing(1) }}\r\n            >\r\n              <InputLabel htmlFor=\"password-input\">Password</InputLabel>\r\n              <OutlinedInput\r\n                id=\"password-input\"\r\n                startAdornment={\r\n                  <InputAdornment position=\"start\">\r\n                    <Lock />\r\n                  </InputAdornment>\r\n                }\r\n                type={ShowPassword ? \"text\" : \"password\"}\r\n                size=\"small\"\r\n                placeholder={\"******\"}\r\n                required\r\n                value={Password}\r\n                onChange={(evt) => {\r\n                  setPassword(evt.target.value);\r\n                }}\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      onClick={handleClickShowPassword}\r\n                      onMouseDown={handleMouseDownPassword}\r\n                      edge=\"end\"\r\n                    >\r\n                      {ShowPassword ? <Visibility /> : <VisibilityOff />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n                labelWidth={70}\r\n                error={hasError(\"password\")}\r\n                aria-describedby=\"password-helper\"\r\n              />\r\n              <FormHelperText\r\n                id=\"password-helper\"\r\n                error={hasError(\"password\")}\r\n                className={clsx({ [classes.hide]: !hasError(\"password\") })}\r\n              >\r\n                6-32 characters\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </FormGroup>\r\n          <Typography\r\n            variant=\"body1\"\r\n            style={{\r\n              color: theme.palette.text.hint,\r\n              marginTop: theme.spacing(3),\r\n              marginBottom: 0,\r\n            }}\r\n          >\r\n            Privileges\r\n          </Typography>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup row>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={IsAdmin}\r\n                    onChange={(evt) => {\r\n                      setIsAdmin(!IsAdmin);\r\n                    }}\r\n                  />\r\n                }\r\n                label={\"Admin\"}\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n          <Box\r\n            flexDirection=\"row\"\r\n            alignItems=\"center\"\r\n            style={{ marginTop: theme.spacing(2) }}\r\n          >\r\n            <Button\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n              startIcon={<Check />}\r\n              onClick={performAddUser}\r\n            >\r\n              Confirm\r\n            </Button>\r\n            <Button\r\n              variant=\"text\"\r\n              onClick={onGoBack}\r\n              style={{ marginLeft: theme.spacing(1) }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddUserView;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\ManageUrls.jsx",["667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\nimport LinkIcon from \"@material-ui/icons/Link\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TrackedUrlsTable from \"../components/Tables/TrackedUrls\";\r\nimport {\r\n  Divider,\r\n  Input,\r\n  TableHead,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  InputAdornment,\r\n  ButtonGroup,\r\n  OutlinedInput,\r\n} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport sessionStore from \"../store/session\";\r\nimport ManageUrlsTable from \"../components/Tables/ManageUrls\";\r\nimport dispatcher from \"../dispatcher\";\r\n\r\nfunction createData(name, calories, fat) {\r\n  return { name, calories, fat };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    overflowY: \"hidden\",\r\n    padding: 2,\r\n  },\r\n  tableContainer: {\r\n    overflow: \"hidden\",\r\n    overflowY: \"hidden\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n});\r\nlet filterTimeout = undefined;\r\nexport default function ManageUrlsView() {\r\n  const [Filter, setFilter] = useState(\"\");\r\n  const classes = useStyles();\r\n\r\n  const history = useHistory();\r\n\r\n  const theme = useTheme();\r\n\r\n  const onFilterChanged = (f) => {\r\n    clearTimeout(filterTimeout);\r\n    filterTimeout = setTimeout(() => {\r\n      console.log(\"Setting filter\");\r\n      setFilter(f);\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TableContainer component={Paper} className={classes.tableContainer}>\r\n        <div\r\n          style={{\r\n            padding: theme.spacing(2),\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            flexWrap: \"nowrap\",\r\n          }}\r\n        >\r\n          <FormControl fullWidth size=\"small\" className={classes.margin}>\r\n            <OutlinedInput\r\n              id=\"standard-adornment-amount\"\r\n              size=\"small\"\r\n              placeholder=\"Search URLs\"\r\n              onChange={(evt) => {\r\n                onFilterChanged(evt.target.value);\r\n              }}\r\n              onKeyPress={(evt) => {\r\n                onFilterChanged(evt.target.value);\r\n              }}\r\n              startAdornment={\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              }\r\n            />\r\n          </FormControl>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            disableElevation\r\n            startIcon={<SearchIcon />}\r\n            style={{ whiteSpace: \"nowrap\", marginLeft: theme.spacing(2) }}\r\n          >\r\n            Search\r\n          </Button>\r\n        </div>\r\n        <Divider />\r\n        <TrackedUrlsTable filter={Filter} />\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\ManageUrls.jsx",["692","693","694","695","696","697","698"],"import {\r\n  Box,\r\n  Checkbox,\r\n  IconButton,\r\n  Link,\r\n  Menu,\r\n  MenuItem,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Search, Today } from \"@material-ui/icons\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport clsx from \"clsx\";\r\nimport { useConfirm } from \"material-ui-confirm\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport scrapingThreadsActions from \"../../actions/ScrapingThread\";\r\nimport tableActions from \"../../actions/Table\";\r\nimport uiActions from \"../../actions/UI\";\r\nimport ScrapingThreadApi from \"../../api/ScrapingThread\";\r\nimport ManageUrlsHeader from \"../../components/Table/Headers/ManageUrls\";\r\nimport ActionTypes from \"../../constants/ActionTypes\";\r\nimport TableNames from \"../../constants/Tables\";\r\nimport { timeSince } from \"../../helpers/time\";\r\nimport TableData from \"../../models/TableData\";\r\nimport tableStore from \"../../store/Tables\";\r\nimport ScrapingThreadTableStatus from \"../Table/ScrapingThreadStatus\";\r\nimport TablePaginationActions from \"./Pagination\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableContainer: {\r\n    overflowY: \"scroll\",\r\n    overflowX: \"hidden\",\r\n  },\r\n  table: {\r\n    minWidth: 500,\r\n    tableLayout: \"fixed\",\r\n    overflowY: \"auto\",\r\n    overflowX: \"hidden\",\r\n  },\r\n  tableRow: {\r\n    height: 70,\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  tableBody: {},\r\n  emptyRow: {\r\n    height: 70,\r\n    backgroundColor: \"white!important\",\r\n    \"&:first-child td\": {\r\n      paddingTop: \"8rem\",\r\n      paddingBottom: \"8rem\",\r\n    },\r\n  },\r\n\r\n  columnCheckbox: {\r\n    width: 64,\r\n  },\r\n}));\r\n\r\nconst THIS_TABLE_NAME = TableNames.MANAGE_URLS;\r\n\r\nconst ManageUrlsTable = ({ filter }) => {\r\n  let [tableData, setTableData] = useState(\r\n    tableStore.getTableData(THIS_TABLE_NAME)\r\n  );\r\n  const [SelectedRows, setSelectedRows] = useState([]);\r\n\r\n  const [DateRange, setDateRange] = useState(null);\r\n\r\n  const [RowActionObject, setRowActionObject] = useState(null);\r\n  const [rowMenuAnchorRef, setRowMenuAnchorRef] = React.useState(null);\r\n\r\n  const HasTableData = tableData !== undefined;\r\n\r\n  const toggleRowMenuOpen = (event, row) => {\r\n    setRowMenuAnchorRef(event.currentTarget);\r\n    setRowActionObject(row);\r\n  };\r\n\r\n  const handleRowMenuClose = (event) => {\r\n    if (\r\n      rowMenuAnchorRef.current &&\r\n      rowMenuAnchorRef.current.contains(event.target)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setRowMenuAnchorRef(null);\r\n  };\r\n\r\n  if (!HasTableData) {\r\n    tableData = TableData.defaults(THIS_TABLE_NAME);\r\n  }\r\n  const confirm = useConfirm();\r\n  const rowsPerPage = tableData.rowsPerPage;\r\n  const page = tableData.page;\r\n  const countryFilter = tableData.countryFilter;\r\n  const dateRange = tableData.dateRange;\r\n  let rows = tableData.rows;\r\n\r\n  const IsLoadingResults = tableData.isLoading;\r\n  let hasInheritedRows = false;\r\n  if (IsLoadingResults && tableData.previousTableData) {\r\n    rows = tableData.previousTableData.rows;\r\n    hasInheritedRows = true;\r\n  }\r\n\r\n  const isLoadingResults = tableData ? tableData.isLoading : true;\r\n  const rowsLength = Array.isArray(rows) ? rows.length : 0;\r\n  const classes = useStyles();\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, rowsLength - page * rowsPerPage) +\r\n    (rowsLength > 1 ? 0 : 1);\r\n  const deleteSelectedRows = () => {\r\n    if (SelectedRows.length) {\r\n      confirm({\r\n        description: `Are you sure you want to delete ${SelectedRows.length} links?`,\r\n        title: `Delete ${SelectedRows.length} links`,\r\n      })\r\n        .then(async () => {\r\n          const res = await ScrapingThreadApi.Delete(SelectedRows);\r\n          if (res && res.success) {\r\n            uiActions.showSnackbar(`Links deleted successfully`, \"success\");\r\n            setSelectedRows([]);\r\n            setTimeout(() => {\r\n              syncTableData({});\r\n            });\r\n          }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n\r\n  const selectAllRows = (evt) => {\r\n    const checked = evt.target.checked;\r\n    if (!checked) {\r\n      setSelectedRows([]);\r\n    } else if (checked) {\r\n      if (Array.isArray(rows)) {\r\n        setSelectedRows(rows.map((row) => row.trackedUrlId));\r\n      }\r\n    }\r\n  };\r\n\r\n  const getTableData = () => {\r\n    return tableStore.getTableData(THIS_TABLE_NAME) || tableData;\r\n  };\r\n  const syncTableData = ({ newPage, newRowsPerPage, newDateRange }) => {\r\n    const _tableData = getTableData();\r\n\r\n    tableActions.createTableData({\r\n      rowsPerPage:\r\n        newRowsPerPage !== undefined ? newRowsPerPage : _tableData.rowsPerPage,\r\n      totalRowsCount: _tableData.totalRowsCount,\r\n      page:\r\n        newRowsPerPage !== -1\r\n          ? newPage !== undefined\r\n            ? newPage\r\n            : _tableData.page\r\n          : 0,\r\n      filter: filter || \"\",\r\n      tableName: THIS_TABLE_NAME,\r\n      previousRowCount:\r\n        _tableData && _tableData.totalRowsCount\r\n          ? _tableData.totalRowsCount\r\n          : undefined,\r\n      dateRange:\r\n        newDateRange !== undefined ? newDateRange : _tableData.dateRange,\r\n    });\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    syncTableData({ newPage });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    syncTableData({ newRowsPerPage, newPage: 0 });\r\n  };\r\n\r\n  /**\r\n   * @type {Object} obj\r\n   * @type {TableData} obj.tableData\r\n   */\r\n  const onTableRowsDataUpdated = ({ tableData }) => {\r\n    if (tableData.tableName === THIS_TABLE_NAME) {\r\n      const foundTable = tableStore.getByTableName(THIS_TABLE_NAME);\r\n      //debugger;\r\n      //console.log(\"foundTable\", foundTable);\r\n      setTableData(foundTable);\r\n    }\r\n  };\r\n\r\n  const registerEventListeners = () => {\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_CREATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_UPDATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n\r\n    return () => {\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_CREATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_UPDATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n    };\r\n  };\r\n  const onRowSelectionChanged = (id) => {\r\n    //console.log(SelectedRows);\r\n    const alreadySelectedIndex = SelectedRows.findIndex((c) => c === id);\r\n    const alreadySelected =\r\n      alreadySelectedIndex !== -1 && alreadySelectedIndex !== false;\r\n    if (alreadySelected) {\r\n      SelectedRows.splice(alreadySelectedIndex, 1);\r\n      setSelectedRows([...SelectedRows]);\r\n    } else {\r\n      setSelectedRows([id, ...SelectedRows]);\r\n    }\r\n  };\r\n\r\n  const _createRowActionsButton = (row) => {\r\n    const key = row.trackedUrlId;\r\n    return (\r\n      <React.Fragment>\r\n        <IconButton\r\n          key={key}\r\n          size=\"small\"\r\n          aria-haspopup=\"true\"\r\n          onClick={(event) => {\r\n            toggleRowMenuOpen(event, row);\r\n          }}\r\n          aria-controls={`row-actions-menu`}\r\n        >\r\n          <MoreVertIcon />\r\n        </IconButton>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n  const retryThread = () => {\r\n    let threadId = RowActionObject.trackedUrlId;\r\n    setTimeout(() => {\r\n      scrapingThreadsActions.retryThread(threadId);\r\n    });\r\n  };\r\n  const _attachRowActionsMenu = () => {\r\n    return (\r\n      <Menu\r\n        id={`row-actions-menu`}\r\n        anchorEl={rowMenuAnchorRef}\r\n        // keepMounted\r\n        open={Boolean(rowMenuAnchorRef)}\r\n        onClose={handleRowMenuClose}\r\n      >\r\n        <MenuItem\r\n          // onClick={() => {\r\n          //   handleRowMenuClose();\r\n          //   //toggleCountryRenameDialog();\r\n          // }}\r\n          component={RouterLink}\r\n          to={`/url-details/`}\r\n        >\r\n          View details\r\n        </MenuItem>\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            confirm({\r\n              title: \"Confirm to retry crawling URL?\",\r\n              description:\r\n                \"If you proceed some of the scraped data will be deleted. Make sure you know what you're doing.\",\r\n            }).then(() => {\r\n              retryThread();\r\n              handleRowMenuClose();\r\n            });\r\n\r\n            //toggleCountryPickerDialog();\r\n          }}\r\n        >\r\n          Retry\r\n        </MenuItem>\r\n      </Menu>\r\n    );\r\n  };\r\n  const refreshFunc = () => {\r\n    const _tableData = getTableData();\r\n\r\n    if (\r\n      _tableData.isLoading ||\r\n      parseInt(new Date() / 1000) - _tableData.age < 10\r\n    ) {\r\n      console.log(\"@@@@@ Skipping REFRESH\");\r\n      return;\r\n    }\r\n    syncTableData({});\r\n  };\r\n  useEffect(() => {\r\n    // Create an interval that refreshes the page every X\r\n    const refreshInterval = setInterval(refreshFunc, 5000);\r\n    setTimeout(() => {\r\n      syncTableData({});\r\n    });\r\n\r\n    const revokeEventListeners = registerEventListeners();\r\n\r\n    return () => {\r\n      clearInterval(refreshInterval);\r\n      revokeEventListeners();\r\n    };\r\n  }, []);\r\n\r\n  // if (rows.length <= 0) {\r\n  //   return <EmptyTablePlaceholder />;\r\n  // }\r\n\r\n  const handleDateFilterChanged = (_dateRange) => {\r\n    syncTableData({ newDateRange: _dateRange });\r\n  };\r\n\r\n  const theme = useTheme();\r\n\r\n  const renderEmptyRows = () => {\r\n    if (rowsPerPage === rowsLength) {\r\n      return \"\";\r\n    }\r\n    const isJustFilling = rowsLength > 0;\r\n    const hasFilterApplied =\r\n      tableData.totalRowsCount < tableData.unfilteredRowsCount;\r\n    const _renderHint = () => {\r\n      if (hasFilterApplied) {\r\n        return (\r\n          <Typography\r\n            variant={isJustFilling ? \"body2\" : \"h6\"}\r\n            style={{ color: theme.palette.text.hint }}\r\n          >\r\n            Try changing filter options\r\n          </Typography>\r\n        );\r\n      }\r\n      if (!isJustFilling)\r\n        return (\r\n          <Typography variant=\"h6\" style={{ color: theme.palette.text.hint }}>\r\n            Add some links to get started\r\n          </Typography>\r\n        );\r\n    };\r\n    const _emptyRowContent = () => (\r\n      <TableCell colspan=\"6\">\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n        >\r\n          {!isJustFilling && (\r\n            <Search\r\n              style={{\r\n                color: theme.palette.text.disabled,\r\n                width: 48,\r\n                height: 48,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography\r\n              variant={isJustFilling ? \"h6\" : \"h4\"}\r\n              style={{\r\n                color: isJustFilling\r\n                  ? theme.palette.text.hint\r\n                  : theme.palette.text.primary,\r\n              }}\r\n            >\r\n              No{rowsLength > 0 ? \" more\" : \"\"} links found\r\n            </Typography>\r\n          </Box>\r\n          {_renderHint()}\r\n        </Box>\r\n      </TableCell>\r\n    );\r\n\r\n    const _createRow = () => (\r\n      <TableRow\r\n        className={clsx({\r\n          [classes.tableRow]: true,\r\n          [classes.emptyRow]: true,\r\n        })}\r\n        key={Math.random()}\r\n      >\r\n        {_emptyRowContent()}\r\n      </TableRow>\r\n    );\r\n\r\n    return _createRow();\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <ManageUrlsHeader\r\n        rows={rows}\r\n        SelectedRows={SelectedRows}\r\n        selectAllRowsFunc={selectAllRows}\r\n        deleteSelectedRowsFunc={deleteSelectedRows}\r\n        refreshFunc={() => {\r\n          syncTableData({ newPage: tableData.page });\r\n        }}\r\n        IsLoading={isLoadingResults}\r\n        theme={theme}\r\n      />\r\n      <div className={classes.tableContainer}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          <colgroup>\r\n            <col style={{ width: 64 }} />\r\n            <col style={{ width: \"70%\" }} />\r\n            <col style={{ width: \"15%\" }} />\r\n            <col style={{ width: \"15%\" }} />\r\n            <col style={{ width: 64 }} />\r\n          </colgroup>\r\n          {/* <LinearProgress\r\n        variant=\"indeterminate\"\r\n        color=\"secondary\"\r\n        style={{ height: 2, opacity: IsLoadingResults ? \"0.5\" : 0 }}\r\n      /> */}\r\n\r\n          <TableBody className={classes.tableBody}>\r\n            {isLoadingResults && !hasInheritedRows\r\n              ? [\r\n                  ...Array(rowsPerPage !== undefined ? rowsPerPage : 10).keys(),\r\n                ].map((x) => (\r\n                  <TableRow\r\n                    key={x}\r\n                    style={{ height: 56 }}\r\n                    className={classes.tableRow}\r\n                  >\r\n                    <div></div>\r\n                    <TableCell>\r\n                      <Skeleton />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton />\r\n                    </TableCell>\r\n                    <div></div>\r\n                  </TableRow>\r\n                ))\r\n              : rows.map((row, index) => {\r\n                  const innerRow = (\r\n                    <React.Fragment>\r\n                      <TableCell className={classes.columnCheckbox}>\r\n                        <Checkbox\r\n                          size=\"small\"\r\n                          checked={SelectedRows.includes(row.trackedUrlId)}\r\n                          onChange={(evt) => {\r\n                            onRowSelectionChanged(row.trackedUrlId);\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        style={{\r\n                          textOverflow: \"ellipsis\",\r\n                          overflow: \"hidden\",\r\n                        }}\r\n                        align=\"left\"\r\n                      >\r\n                        <Link href={row.url} target=\"_blank\">\r\n                          {row.url}\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        <Box\r\n                          display=\"inline-flex\"\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"start\"\r\n                        >\r\n                          <Today\r\n                            style={{\r\n                              width: 18,\r\n                              height: 18,\r\n                              color: theme.palette.text.hint,\r\n                            }}\r\n                            //style={{ color: theme.palette.text.hint }}\r\n                          />\r\n                          <Typography\r\n                            variant=\"body2\"\r\n                            noWrap={true}\r\n                            style={{ marginLeft: theme.spacing(1) }}\r\n                          >\r\n                            {timeSince(row.age)}\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <ScrapingThreadTableStatus row={row} />\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {_createRowActionsButton(row)}\r\n                      </TableCell>\r\n                    </React.Fragment>\r\n                  );\r\n                  const wrapComponent = (\r\n                    <TableRow className={classes.tableRow} key={row.uuid}>\r\n                      {innerRow}\r\n                    </TableRow>\r\n                  );\r\n                  return wrapComponent;\r\n                })}\r\n            {!IsLoadingResults && renderEmptyRows()}\r\n            {RowActionObject && _attachRowActionsMenu()}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      {rowsLength > 0 && (\r\n        <div>\r\n          <TablePagination\r\n            style={{ width: \"100%\", float: \"right\" }}\r\n            rowsPerPageOptions={[\r\n              5,\r\n              8,\r\n              10,\r\n              25,\r\n              50,\r\n              100,\r\n              // { label: \"All\", value: -1 },\r\n            ]}\r\n            colSpan={3}\r\n            count={tableData.totalRowsCount}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            SelectProps={{\r\n              inputProps: { \"aria-label\": \"rows per page\" },\r\n              native: true,\r\n            }}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            ActionsComponent={TablePaginationActions}\r\n          />\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ManageUrlsTable;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\theme.jsx",["699","700"],"import {\r\n  createMuiTheme,\r\n  makeStyles,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontSize: 12,\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: \"#4b4f56\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n    secondary: {\r\n      main: \"#f2902b\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Filters\\CountryFilter.jsx",["701","702","703","704","705","706","707","708","709","710","711","712"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { Menu, Button, IconButton } from \"@material-ui/core\";\r\nimport { Close, Public } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  select: {\r\n    \"&:before\": {\r\n      border: \"none\",\r\n    },\r\n    \"&:after\": {\r\n      border: \"none\",\r\n    },\r\n    \"&:focus\": {\r\n      border: \"none\",\r\n      outline: \"none\",\r\n    },\r\n    \"& .MuiSelect-select \": {\r\n      backgroundColor: \"transparent!important\",\r\n      border: \"none\",\r\n    },\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  selectedCountriesContainer: {\r\n    display: \"inline-flex\",\r\n    maxWidth: 520,\r\n    flexWrap: \"nowrap\",\r\n    overflow: \"hidden\",\r\n  },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nconst names = [\"United States\", \"Germany\", \"United Kingdom\"];\r\n\r\nfunction getStyles(name, personName, theme) {\r\n  return {\r\n    fontWeight:\r\n      personName.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nfunction CountryFilter({ Countries }) {\r\n  const [SelectedCountries, setSelectedCountries] = useState([]);\r\n  const anchorRef = React.useRef(null);\r\n  const [MenuOpen, setMenuOpen] = React.useState(false);\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [personName, setPersonName] = React.useState([]);\r\n\r\n  const closeMenu = (evt) => {\r\n    if (anchorRef.current && anchorRef.current.contains(evt.target)) {\r\n      return;\r\n    }\r\n    return setMenuOpen(false);\r\n  };\r\n  const toggleMenu = (evt) => {\r\n    setMenuOpen(true);\r\n  };\r\n  const removeCountry = () => {};\r\n  const renderSelectedCountries = () => {\r\n    return SelectedCountries.map((value) => (\r\n      <Chip\r\n        variant=\"outlined\"\r\n        key={value}\r\n        label={value}\r\n        icon={<Close />}\r\n        onClick={() => {\r\n          removeCountry(value);\r\n        }}\r\n        className={classes.chip}\r\n      />\r\n    ));\r\n  };\r\n\r\n  const countriesContainerRef = useRef(null);\r\n  const findElementsInViewCount = () => {\r\n    const containerElement = countriesContainerRef.current;\r\n    const visibleWidth = containerElement.clientWidth;\r\n    // Accumulate elemnts width until we overflow\r\n    let accumulatedWidth = 0;\r\n    let numOfElementsInView = 0;\r\n\r\n    for (const element of containerElement.childNodes) {\r\n      accumulatedWidth += element.offsetWidth;\r\n      if (accumulatedWidth >= visibleWidth) {\r\n        break;\r\n      }\r\n      numOfElementsInView++;\r\n    }\r\n\r\n    return numOfElementsInView;\r\n  };\r\n  const hideNonVisibleChips = () => {\r\n    const numOfVisibleElements = findElementsInViewCount();\r\n    const containerElement = countriesContainerRef.current;\r\n    let childrenLen = containerElement.children.length;\r\n    console.log(\"skipping\", numOfVisibleElements, \"vs \", childrenLen);\r\n    let gotTruncated = false;\r\n    while (containerElement.children.length > numOfVisibleElements) {\r\n      gotTruncated = true;\r\n      containerElement.removeChild(\r\n        containerElement.children[numOfVisibleElements]\r\n      );\r\n    }\r\n  };\r\n  const countryIsSelected = (country) => {\r\n    return SelectedCountries.includes(country);\r\n  };\r\n  const toggleCountry = (name) => {\r\n    const countryIndex = SelectedCountries.indexOf(name);\r\n    if (countryIndex !== -1) {\r\n      const clone = [...SelectedCountries];\r\n      clone.splice(countryIndex, 1);\r\n      setSelectedCountries(clone);\r\n    } else {\r\n      setSelectedCountries([...SelectedCountries, name]);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    hideNonVisibleChips();\r\n  });\r\n  return (\r\n    <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\r\n      <div\r\n        ref={countriesContainerRef}\r\n        className={classes.selectedCountriesContainer}\r\n      >\r\n        {renderSelectedCountries()}\r\n      </div>\r\n\r\n      <div style={{ position: \"relative\" }}>\r\n        <Button\r\n          aria-controls=\"simple-menu\"\r\n          aria-haspopup=\"true\"\r\n          onClick={toggleMenu}\r\n          ref={anchorRef}\r\n        >\r\n          ...79 More Countries\r\n        </Button>\r\n\r\n        <Menu\r\n          id=\"simple-menu\"\r\n          open={MenuOpen}\r\n          keepMounted\r\n          onClose={closeMenu}\r\n          anchorEl={\r\n            SelectedCountries.length > 0\r\n              ? anchorRef.current\r\n              : countriesContainerRef.current\r\n          }\r\n        >\r\n          {Countries.map((name) => (\r\n            <MenuItem\r\n              key={name}\r\n              onClick={() => {\r\n                toggleCountry(name);\r\n              }}\r\n              value={name}\r\n              style={getStyles(name, personName, theme)}\r\n            >\r\n              <Checkbox\r\n                color=\"secondary\"\r\n                checked={countryIsSelected(name)}\r\n                size=\"small\"\r\n                disableRipple\r\n              />\r\n              {name}\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default React.memo(CountryFilter);\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\helpers\\utils.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\DateRanges.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\api\\ScrapingThread.js",["713","714","715","716"],"import MakeRequest from \"./_Api\";\r\nimport UrlTrackingThread from \"../models/ScrapingThread\";\r\nimport User from \"../models/User\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\n\r\nconst Delete = async (threadIds) => {\r\n  return await MakeRequest.post(\"/delete-scraping-threads\", threadIds);\r\n};\r\n\r\nconst GetDetails = async (threadId) => {\r\n  return await MakeRequest.get(`/scraping-thread/${threadId}/details`);\r\n};\r\n\r\nexport default { Delete, GetDetails };\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\SpinnerGrow.jsx",["717","718"],"import React, { useState } from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { motion } from \"framer-motion\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  spinner: {\r\n    width: 18,\r\n    height: 18,\r\n    maxWidth: \"100%\",\r\n    maxHeight: \"100%\",\r\n    background: \"white\",\r\n    borderRadius: \"50%\",\r\n  },\r\n}));\r\nconst SpinnerGrow = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <motion.div\r\n      initial={{ scale: 0.25, opacity: 1 }}\r\n      animate={{ scale: 1, opacity: 0 }}\r\n      transition={{ repeat: Infinity, duration: 0.9 }}\r\n    >\r\n      <div className={classes.spinner}></div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default SpinnerGrow;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\services\\bundle.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\services\\UserFilter.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\services\\CountryFilter.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Statistics.js",["719"],"import keyMirror from \"keymirror\";\r\n\r\nconst ActionTypes = {\r\n  STATISTICS_RECEIVED: \"STATISTICS_RECEIVED\",\r\n  STATISTICS_SYNC: \"STATISTICS_SYNC\",\r\n};\r\n\r\nexport default ActionTypes;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\CountryFilter.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\UserFilter.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\ActionTypes\\Hosts.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\User\\Avatar\\ShortLettersAvatar.jsx",["720","721","722","723","724","725"],"import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport {\n  deepOrange,\n  deepPurple,\n  purple,\n  pink,\n  red,\n  cyan,\n  teal,\n  lightBlue,\n  lime,\n  lightGreen,\n  green,\n  amber,\n  yellow,\n  brown,\n  grey,\n  blueGrey,\n  orange,\n} from \"@material-ui/core/colors\";\n\nimport { Avatar, Tooltip } from \"@material-ui/core\";\nimport robotSvg from \"../../../assets/robot.svg\";\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    height: 32,\n    width: 32,\n    fontSize: 12,\n  },\n}));\n\nconst getColor = (letter) => {\n  let alphabet = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n\n  const colors = [\n    deepOrange,\n    deepPurple,\n    purple,\n    pink,\n    red,\n    teal,\n    lightBlue,\n    lightGreen,\n    green,\n    amber,\n    brown,\n    grey,\n    blueGrey,\n    orange,\n  ];\n\n  const colorsLen = colors.length;\n  const colorPairs = {};\n  for (let i = 0; i < alphabet.length; i++) {\n    let targetColor = i;\n    if (i > colorsLen - 1) {\n      targetColor = i - colorsLen;\n    }\n    colorPairs[alphabet[i]] = colors[targetColor][500];\n  }\n  return colorPairs[letter];\n};\n\nconst UserShortLettersAvatar = ({ username, fullname }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const isBot = !username && !fullname;\n\n  const makeBotProps = () => {\n    const shortLetters = \"\";\n    const src = robotSvg;\n    const backgroundColor = \"gray\";\n    const tooltip = \"BOT\";\n    return { shortLetters, src, backgroundColor, tooltip };\n  };\n\n  const makeUserProps = () => {\n    const _targetName = fullname || username;\n    let shortLetters = \"\";\n    const nameParts = _targetName.toUpperCase().split(\" \");\n    if (true) {\n      shortLetters = nameParts[0].substring(0, 1);\n    } else {\n      // Apply for two letters\n      if (nameParts.length >= 2) {\n        shortLetters =\n          nameParts[0].substring(0, 1) + nameParts[1].substring(0, 1);\n      } else {\n        shortLetters = nameParts[0].substring(0, 2);\n      }\n    }\n    const src = null;\n    const backgroundColor = getColor(_targetName[1]);\n    const tooltip = _targetName;\n    return { shortLetters, src, backgroundColor, tooltip };\n  };\n  const { shortLetters, src, backgroundColor, tooltip } = isBot\n    ? makeBotProps()\n    : makeUserProps();\n  return (\n    <Avatar\n      className={[classes.avatar]}\n      style={{\n        color: \"white\",\n        backgroundColor: backgroundColor,\n      }}\n      src={src}\n    >\n      {shortLetters}\n    </Avatar>\n    // <Tooltip title={tooltip} aria-label={tooltip}>\n    // </Tooltip>\n  );\n};\n\nexport default UserShortLettersAvatar;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\UserFilter.js",["726"],"import ActionTypes from \"../constants/ActionTypes\";\nimport SocketEvents from \"../constants/SocketEvents\";\nimport dispatcher from \"../dispatcher\";\nimport { sendMessage } from \"../socket\";\nconst sync = () => {\n  sendMessage(SocketEvents.USER_FILTER_SYNC);\n};\n\nconst onSyncReceived = (availableUsers) => {\n  dispatcher.dispatch({\n    actionType: ActionTypes.UserFilter.USER_FILTER_SYNC,\n    data: { availableUsers },\n  });\n};\n\nexport default { sync, onSyncReceived };\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\UserFilter.js",["727","728","729"],"import { EventEmitter } from \"events\";\nimport dispatcher from \"../dispatcher\";\nimport ActionTypes from \"../constants/ActionTypes\";\nimport User from \"../models/User\";\nimport TableData from \"../models/TableData\";\n\nconst Errors = require(\"../constants/Errors\");\n\nclass UserFilterStore extends EventEmitter {\n  /**\n   * @type {Object.<number, string>}\n   */\n  #available_users;\n\n  #lastSync;\n  constructor(params) {\n    super(params);\n    this.#lastSync = null;\n    this.#available_users = undefined;\n  }\n  addChangeListener(event, callback) {\n    this.on(event, callback);\n  }\n\n  removeChangeListener(event, callback) {\n    this.removeListener(event, callback);\n  }\n\n  emitChange(event, data) {\n    this.emit(event, data);\n  }\n\n  get() {\n    return this.#available_users;\n  }\n\n  set(available_users) {\n    this.#available_users = available_users;\n    this.#lastSync = parseInt(Date.now() / 1000);\n  }\n  lastSync() {\n    return this.#lastSync;\n  }\n  requiresSync() {\n    return !this.#lastSync;\n  }\n}\n\nconst userFilterStore = new UserFilterStore();\n\nuserFilterStore.dispatchToken = dispatcher.register((event) => {\n  let willEmit = true;\n  switch (event.actionType) {\n    case ActionTypes.UserFilter.USER_FILTER_SYNC:\n      userFilterStore.set(event.data.availableUsers);\n      break;\n    default:\n      willEmit = false;\n      break; // do nothing\n  }\n  willEmit && userFilterStore.emitChange(event.actionType, event.data);\n});\n\nexport default userFilterStore;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\CountryFilter.js",["730"],"import ActionTypes from \"../constants/ActionTypes\";\nimport SocketEvents from \"../constants/SocketEvents\";\nimport dispatcher from \"../dispatcher\";\nimport { sendMessage } from \"../socket\";\nconst sync = () => {\n  sendMessage(SocketEvents.COUNTRIES_FILTER_SYNC);\n};\n\nconst onSyncReceived = (availableCountries) => {\n  dispatcher.dispatch({\n    actionType: ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\n    data: { availableCountries },\n  });\n};\n\nexport default { sync, onSyncReceived };\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\CountryFilter.js",["731","732","733","734"],"import { EventEmitter } from \"events\";\nimport dispatcher from \"../dispatcher\";\nimport ActionTypes from \"../constants/ActionTypes\";\nimport User from \"../models/User\";\nimport TableData from \"../models/TableData\";\nimport Country from \"../models/Country\";\nconst Errors = require(\"../constants/Errors\");\n\nclass CountryFilterStore extends EventEmitter {\n  /**\n   * @type {Object.<number, string>}\n   */\n  #available_countries;\n  #lastSync;\n  constructor(params) {\n    super(params);\n    this.dispatchToken = undefined;\n  }\n  addChangeListener(event, callback) {\n    this.on(event, callback);\n  }\n\n  removeChangeListener(event, callback) {\n    this.removeListener(event, callback);\n  }\n\n  emitChange(event, data) {\n    this.emit(event, data);\n  }\n\n  /**\n   * @returns {Country[]}\n   */\n  get(hideAliases = true) {\n    if (!this.#available_countries) {\n      return null;\n    }\n    if (hideAliases) {\n      return this.#available_countries.filter(\n        ({ parentCountryId }) => !parentCountryId\n      );\n    }\n    return this.#available_countries;\n  }\n\n  set(available_countries) {\n    this.#available_countries = available_countries;\n    this.#lastSync = parseInt(Date.now() / 1000);\n  }\n  lastSync() {\n    return this.#lastSync;\n  }\n  requiresSync() {\n    return !this.#lastSync;\n  }\n}\n\nconst countryFilterStore = new CountryFilterStore();\n\ncountryFilterStore.dispatchToken = dispatcher.register((event) => {\n  switch (event.actionType) {\n    case ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC:\n      countryFilterStore.set(event.data.availableCountries);\n      break;\n    default:\n      break; // do nothing\n  }\n  countryFilterStore.emitChange(event.actionType, event.data);\n});\n\nexport default countryFilterStore;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\CountryFilter.js",["735","736"],"import dispatcher from \"../dispatcher\";\r\n\r\nimport sessionActions from \"../actions/Session\";\r\nimport countryFilterActions from \"../actions/CountryFilter\";\r\n\r\nimport SocketEvents from \"../constants/SocketEvents\";\r\n\r\nconst bindCountryFilterHandler = (socket) => {\r\n  socket.on(SocketEvents.COUNTRIES_FILTER_SYNC, (countryFilter) => {\r\n    countryFilterActions.onSyncReceived(countryFilter);\r\n  });\r\n};\r\n\r\nexport default bindCountryFilterHandler;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\UserFilter.js",["737","738"],"import dispatcher from \"../dispatcher\";\r\n\r\nimport sessionActions from \"../actions/Session\";\r\nimport userFilterActions from \"../actions/UserFilter\";\r\n\r\nimport SocketEvents from \"../constants/SocketEvents\";\r\n\r\nconst bindSessionSocketHandler = (socket) => {\r\n  socket.on(SocketEvents.USER_FILTER_SYNC, (userFilter) => {\r\n    userFilterActions.onSyncReceived(userFilter);\r\n  });\r\n};\r\n\r\nexport default bindSessionSocketHandler;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\Hosts.js",["739","740","741","742","743","744","745"],"import dispatcher from \"../dispatcher\";\r\n\r\nimport sessionActions from \"../actions/Session\";\r\n\r\nimport hostsActions from \"../actions/Hosts\";\r\n\r\nimport SocketEvents from \"../constants/SocketEvents\";\r\nimport sessionStore from \"../store/session\";\r\nimport tableStore from \"../store/Tables\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport TableNames from \"../constants/Tables\";\r\nimport { sendMessage } from \"../socket\";\r\nconst bindHostsSocketInterface = (socket) => {\r\n  socket.on(SocketEvents.HOST_SYNC, (host) => {\r\n    hostsActions.onHostUpdated(host);\r\n  });\r\n\r\n  // socket.on(SocketEvents.SCRAPING_THREAD_SYNC, (scrapingThread) => {\r\n  //   scrapingThreadActions.onThreadModified(scrapingThread);\r\n  // });\r\n\r\n  // socket.on(SocketEvents.SCRAPING_THREADS_TABLE_DATA, (tableData) => {\r\n  //   console.log(\"SocketEvents.SCRAPING_THREADS_TABLE_DATA\");\r\n  //   scrapingThreadActions.onTableDataReceived(tableData);\r\n  // });\r\n\r\n  /**\r\n   *\r\n   * @param {object} param0\r\n   * @param {TableData} param0.tableData\r\n   */\r\n  // const onTableHashCreated = ({ tableData }) => {\r\n  //   if (tableData.tableName === TableNames.ADD_TRACK_URL) {\r\n  //     // Request table data for this\r\n  //     delete tableData.rows;\r\n  //     delete tableData.isLoading;\r\n  //     sendMessage(SocketEvents.SCRAPING_THREADS_TABLE_REQUEST, tableData);\r\n  //   }\r\n  //   console.log(\"onTableHashCreated\", tableData);\r\n  // };\r\n\r\n  // tableStore.addChangeListener(\r\n  //   ActionTypes.Table.DATA_CREATED,\r\n  //   onTableHashCreated\r\n  // );\r\n};\r\n\r\nexport default bindHostsSocketInterface;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\socket-handlers\\Statistics.js",["746","747","748","749","750","751","752","753"],"import dispatcher from \"../dispatcher\";\n\nimport sessionActions from \"../actions/Session\";\nimport scrapingThreadActions from \"../actions/ScrapingThread\";\nimport statisticsActions from \"../actions/Statistics\";\n\nimport SocketEvents from \"../constants/SocketEvents\";\nimport sessionStore from \"../store/session\";\nimport tableStore from \"../store/Tables\";\nimport ActionTypes from \"../constants/ActionTypes\";\nimport TableNames from \"../constants/Tables\";\nimport { sendMessage } from \"../socket\";\n\nconst bindSessionSocketHandler = (socket) => {\n  socket.on(SocketEvents.STATISTICS_SYNC, (data) => {\n    statisticsActions.statisticsSynced(data);\n  });\n};\n\nexport default bindSessionSocketHandler;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\CrawlingExtension.jsx",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\Country.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Statistics.js",["754","755","756"],"import ActionTypes from \"../constants/ActionTypes\";\nimport SocketEvents from \"../constants/SocketEvents\";\nimport dispatcher from \"../dispatcher\";\nimport Statistics, { StatisticsSyncRequest } from \"../models/Statistics\";\nimport { sendMessage } from \"../socket\";\nimport statisticsStore from \"../store/Statistics\";\n\n/**\n *\n * @param {StatisticsSyncRequest} request\n */\nconst syncStatistics = (request) => {\n  if (!statisticsStore.canSync(request)) {\n    return;\n  }\n  setTimeout(() => {\n    dispatcher.dispatch({\n      actionType: ActionTypes.Statistics.STATISTICS_SYNC,\n      data: request,\n    });\n    sendMessage(SocketEvents.STATISTICS_SYNC, request);\n  });\n};\n\n/**\n *\n * @param {Statistics} statistics\n */\nconst statisticsSynced = (statistics) => {\n  dispatcher.dispatch({\n    actionType: ActionTypes.Statistics.STATISTICS_RECEIVED,\n    data: { statistics },\n  });\n};\n\nexport default { syncStatistics, statisticsSynced };\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Hosts.js",["757","758","759","760","761"],"import ActionTypes from \"../constants/ActionTypes\";\nimport SocketEvents from \"../constants/SocketEvents\";\nimport dispatcher from \"../dispatcher\";\nimport { sendMessage } from \"../socket\";\nimport HostsApi from \"../api/Hosts\";\nimport UIActions from \"../actions/UI\";\nimport TableConstants from \"../constants/Tables\";\nimport HostsStore from \"../store/Hosts\";\nimport hostsStore from \"../store/Hosts\";\n\nconst changeRegex = async (hostId, regex) => {\n  const result = await HostsApi.changeRegex(hostId, regex);\n  if (result.ok) {\n    UIActions.showSnackbar(\"Host regex changed successfully\", \"success\");\n    return true;\n  }\n  return false;\n};\n\nconst retrieveHostByName = async (hostname) => {\n  // Check if we should post an API call - in case where we don't have the current hostname stored\n  const storedHost = hostsStore.getByName(hostname);\n  if (storedHost) {\n    return false;\n  }\n  const host = await HostsApi.retrieveHostByName(hostname);\n  if (host) {\n    dispatcher.dispatch({\n      actionType: ActionTypes.Hosts.REGEX_RECEIVED,\n      data: { host },\n    });\n  }\n};\n\nconst onHostUpdated = (host) => {\n  //uiActions.showSnackbar(\"URL successfuly registered for tracking\", \"success\");\n  dispatcher.dispatch({\n    actionType: ActionTypes.Table.DATA_MODIFIED,\n    data: {\n      key: \"hostId\",\n      tableNames: [TableConstants.DOMAINS_MANAGEMENT],\n      row: host,\n    },\n  });\n};\n\nexport default { changeRegex, onHostUpdated };\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\Statistics.js",["762","763","764","765","766","767"],"import { EventEmitter } from \"events\";\nimport dispatcher from \"../dispatcher\";\nimport ActionTypes from \"../constants/ActionTypes\";\nimport User from \"../models/User\";\nimport TableData from \"../models/TableData\";\nimport Statistics from \"../models/Statistics\";\nimport DateRanges from \"../constants/DateRanges\";\n\nconst Errors = require(\"../constants/Errors\");\n\nclass StatisticsStore extends EventEmitter {\n  /**\n   * @type {Statistics}\n   */\n  #statistics;\n\n  #availableCountries;\n  #availableUsers;\n\n  #lastSync;\n  #lastRequestData;\n\n  constructor(params) {\n    super(params);\n    this.#statistics = undefined;\n    this.#availableUsers = undefined;\n    this.#availableCountries = undefined;\n    this.#lastSync = undefined;\n    this.#lastRequestData = undefined;\n  }\n\n  addChangeListener(event, callback) {\n    this.on(event, callback);\n  }\n\n  removeChangeListener(event, callback) {\n    this.removeListener(event, callback);\n  }\n\n  emitChange(event, data) {\n    this.emit(event, data);\n  }\n\n  getTrackedUrls() {\n    return this.#statistics.trackedUrls;\n  }\n\n  getInsertedJobs() {\n    return this.#statistics.scrapedJobs;\n  }\n\n  hasStats(userId) {\n    if (!this.#statistics) {\n      return false;\n    }\n    if (userId && this.#statistics.userId !== userId) {\n      return false;\n    }\n    return true;\n  }\n\n  getLastSyncRequest() {\n    return this.#lastSync;\n  }\n\n  onSyncRequested(requestData) {\n    this.#lastRequestData = requestData;\n    this.#lastSync = parseInt(Date.now() / 1000);\n  }\n\n  canSync(syncStatisticsData) {\n    // If 5 seconds have not passed and requesting data was unaltered, leave it for the same\n    if (\n      parseInt(Date.now() / 1000) - this.#lastSync < 500 &&\n      this.#lastRequestData &&\n      syncStatisticsData\n    ) {\n      let a = JSON.stringify(this.#lastRequestData);\n\n      let b = JSON.stringify(syncStatisticsData);\n\n      if (a === b) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param {Statistics} statistics\n   */\n  storeStats(statistics) {\n    const { availableUsers } = statistics;\n    this.#statistics = statistics;\n    this.#availableUsers = availableUsers;\n  }\n\n  /**\n   * @returns {Statistics}\n   */\n  getStatistics() {\n    return this.#statistics;\n  }\n\n  getAvailableUsers() {\n    return this.#availableUsers;\n  }\n\n  getAvailableCountries() {\n    return this.#availableCountries;\n  }\n}\n\nconst statisticsStore = new StatisticsStore();\n\nstatisticsStore.dispatchToken = dispatcher.register((event) => {\n  let willEmitChange = true;\n  switch (event.actionType) {\n    case ActionTypes.Statistics.STATISTICS_SYNC:\n      statisticsStore.onSyncRequested(event.data);\n      break;\n    case ActionTypes.Statistics.STATISTICS_RECEIVED:\n      console.log(\"Statistics received \", event.data.statistics);\n      statisticsStore.storeStats(event.data.statistics);\n      break;\n    default:\n      willEmitChange = false;\n      break;\n  }\n  statisticsStore.emitChange(event.actionType, event.data);\n});\n\nexport default statisticsStore;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\store\\Hosts.js",["768","769","770","771","772"],"import { EventEmitter } from \"events\";\nimport dispatcher from \"../dispatcher\";\nimport ActionTypes from \"../constants/ActionTypes\";\nimport User from \"../models/User\";\nimport TableData from \"../models/TableData\";\nimport Country from \"../models/Country\";\nimport { hostname } from \"os\";\nconst Errors = require(\"../constants/Errors\");\n\nclass HostsStore extends EventEmitter {\n  #hosts;\n  constructor(params) {\n    super(params);\n    this.dispatchToken = undefined;\n    this.#hosts = {};\n  }\n\n  addChangeListener(event, callback) {\n    this.on(event, callback);\n  }\n\n  removeChangeListener(event, callback) {\n    this.removeListener(event, callback);\n  }\n\n  emitChange(event, data) {\n    this.emit(event, data);\n  }\n\n  storeHost(host) {\n    this.#hosts[host.host] = host;\n  }\n\n  getByName(hostName) {\n    return this.#hosts[hostName];\n  }\n}\n\nconst hostsStore = new HostsStore();\n\nhostsStore.dispatchToken = dispatcher.register((event) => {\n  switch (event.actionType) {\n    case ActionTypes.Hosts.HOST_SYNC:\n      hostsStore.set(event.data.availableCountries);\n      break;\n    default:\n      break; // do nothing\n  }\n  hostsStore.emitChange(event.actionType, event.data);\n});\n\nexport default hostsStore;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\api\\Hosts.js",["773","774","775"],"import MakeRequest from \"./_Api\";\r\nimport UrlTrackingThread from \"../models/ScrapingThread\";\r\nimport User from \"../models/User\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\n\r\nexport default class HostsApi {\r\n  /**\r\n   * @returns {User}\r\n   * @param {string} email\r\n   * @param {string} password\r\n   */\r\n  static async changeRegex(hostId, regex) {\r\n    return await MakeRequest.post(`/hosts/${hostId}/change-regex`, { regex });\r\n  }\r\n\r\n  static async getByName(hostname) {\r\n    return await MakeRequest.get(`/hosts/by-name`, { hostname });\r\n  }\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\models\\Statistics.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\XmlManagement.jsx",["776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\nimport LinkIcon from \"@material-ui/icons/Link\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {\r\n  Divider,\r\n  Input,\r\n  TableHead,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  InputAdornment,\r\n  ButtonGroup,\r\n  OutlinedInput,\r\n} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport sessionStore from \"../store/session\";\r\nimport XmlHistoryTable from \"../components/Tables/XmlHistory\";\r\nimport dispatcher from \"../dispatcher\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction createData(name, calories, fat) {\r\n  return { name, calories, fat };\r\n}\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\nlet filterTimeout = undefined;\r\nexport default function XmlManagementView() {\r\n  const [Filter, setFilter] = useState(\"\");\r\n  const classes = useStyles2();\r\n\r\n  const history = useHistory();\r\n\r\n  const theme = useTheme();\r\n\r\n  const onFilterChanged = (f) => {\r\n    clearTimeout(filterTimeout);\r\n    filterTimeout = setTimeout(() => {\r\n      console.log(\"Setting filter\");\r\n      setFilter(f);\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      {/* <div\r\n        style={{\r\n          padding: theme.spacing(2),\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          flexWrap: \"nowrap\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          disableElevation\r\n          startIcon={<SearchIcon />}\r\n          style={{ whiteSpace: \"nowrap\", marginLeft: theme.spacing(2) }}\r\n        >\r\n          Search\r\n        </Button>\r\n      </div>\r\n      <Divider /> */}\r\n      <XmlHistoryTable filter={Filter} />\r\n    </TableContainer>\r\n  );\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\DomainsManagement.jsx",["810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830"],"import React, { useState, useEffect } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport LinkIcon from \"@material-ui/icons/Link\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  Divider,\n  Input,\n  TableHead,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  InputAdornment,\n  ButtonGroup,\n  OutlinedInput,\n} from \"@material-ui/core\";\n\nimport DomainsManagementTable from \"../components/Tables/DomainsManagement\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\nlet filterTimeout = undefined;\nexport default function DomainsManagementView() {\n  const [Filter, setFilter] = useState(\"\");\n  const classes = useStyles();\n\n  const history = useHistory();\n\n  const theme = useTheme();\n\n  const onFilterChanged = (f) => {\n    clearTimeout(filterTimeout);\n    filterTimeout = setTimeout(() => {\n      console.log(\"Setting filter\");\n      setFilter(f);\n    }, 500);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <div\n        style={{\n          padding: theme.spacing(2),\n          width: \"100%\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          flexWrap: \"nowrap\",\n        }}\n      >\n        <FormControl fullWidth size=\"small\" className={classes.margin}>\n          <OutlinedInput\n            id=\"standard-adornment-amount\"\n            size=\"small\"\n            placeholder=\"Search URLs\"\n            onChange={(evt) => {\n              onFilterChanged(evt.target.value);\n            }}\n            onKeyPress={(evt) => {\n              onFilterChanged(evt.target.value);\n            }}\n            startAdornment={\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            }\n          />\n        </FormControl>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          disableElevation\n          startIcon={<SearchIcon />}\n          style={{ whiteSpace: \"nowrap\", marginLeft: theme.spacing(2) }}\n        >\n          Search\n        </Button>\n      </div>\n      <Divider />\n      <DomainsManagementTable />\n    </TableContainer>\n  );\n}\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\CountriesManagement.jsx",["831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853"],"import React, { useState, useEffect } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport LinkIcon from \"@material-ui/icons/Link\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  Divider,\n  Input,\n  TableHead,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  InputAdornment,\n  ButtonGroup,\n  OutlinedInput,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport sessionStore from \"../store/session\";\nimport CountriesManagementTable from \"../components/Tables/CountriesManagement\";\nimport dispatcher from \"../dispatcher\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\nlet filterTimeout = undefined;\nexport default function CountriesManagementView() {\n  const [Filter, setFilter] = useState(\"\");\n  const classes = useStyles();\n\n  const history = useHistory();\n\n  const theme = useTheme();\n\n  const onFilterChanged = (f) => {\n    clearTimeout(filterTimeout);\n    filterTimeout = setTimeout(() => {\n      console.log(\"Setting filter\");\n      setFilter(f);\n    }, 500);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <div\n        style={{\n          padding: theme.spacing(2),\n          width: \"100%\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          flexWrap: \"nowrap\",\n        }}\n      >\n        <FormControl fullWidth size=\"small\" className={classes.margin}>\n          <OutlinedInput\n            id=\"standard-adornment-amount\"\n            size=\"small\"\n            placeholder=\"Search URLs\"\n            onChange={(evt) => {\n              onFilterChanged(evt.target.value);\n            }}\n            onKeyPress={(evt) => {\n              onFilterChanged(evt.target.value);\n            }}\n            startAdornment={\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            }\n          />\n        </FormControl>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          disableElevation\n          startIcon={<SearchIcon />}\n          style={{ whiteSpace: \"nowrap\", marginLeft: theme.spacing(2) }}\n        >\n          Search\n        </Button>\n      </div>\n      <Divider />\n      <CountriesManagementTable filter={Filter} />\n    </TableContainer>\n  );\n}\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\ManageUrlsAdmin.jsx",["854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\nimport LinkIcon from \"@material-ui/icons/Link\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {\r\n  Divider,\r\n  Input,\r\n  TableHead,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  InputAdornment,\r\n  ButtonGroup,\r\n  OutlinedInput,\r\n} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport sessionStore from \"../store/session\";\r\nimport ManageUrlsAdminTable from \"../components/Tables/ManageUrlsAdmin\";\r\nimport dispatcher from \"../dispatcher\";\r\n\r\nfunction createData(name, calories, fat) {\r\n  return { name, calories, fat };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    overflowY: \"hidden\",\r\n    padding: 2,\r\n  },\r\n  tableContainer: {\r\n    overflow: \"hidden\",\r\n    overflowY: \"hidden\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n});\r\nlet filterTimeout = undefined;\r\nexport default function ManageUrlsView() {\r\n  const [Filter, setFilter] = useState(\"\");\r\n  const classes = useStyles();\r\n\r\n  const history = useHistory();\r\n\r\n  const theme = useTheme();\r\n\r\n  const onFilterChanged = (f) => {\r\n    clearTimeout(filterTimeout);\r\n    filterTimeout = setTimeout(() => {\r\n      console.log(\"Setting filter\");\r\n      setFilter(f);\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TableContainer component={Paper} className={classes.tableContainer}>\r\n        <div\r\n          style={{\r\n            padding: theme.spacing(2),\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            flexWrap: \"nowrap\",\r\n          }}\r\n        >\r\n          <FormControl fullWidth size=\"small\" className={classes.margin}>\r\n            <OutlinedInput\r\n              id=\"standard-adornment-amount\"\r\n              size=\"small\"\r\n              placeholder=\"Search URLs\"\r\n              onChange={(evt) => {\r\n                onFilterChanged(evt.target.value);\r\n              }}\r\n              onKeyPress={(evt) => {\r\n                onFilterChanged(evt.target.value);\r\n              }}\r\n              startAdornment={\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              }\r\n            />\r\n          </FormControl>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            disableElevation\r\n            startIcon={<SearchIcon />}\r\n            style={{ whiteSpace: \"nowrap\", marginLeft: theme.spacing(2) }}\r\n          >\r\n            Search\r\n          </Button>\r\n        </div>\r\n        <Divider />\r\n        <ManageUrlsAdminTable filter={Filter} />\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\Statistics.jsx",["878","879","880","881","882","883","884"],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\StatisticsAdmin.jsx",["885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907"],"import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nimport clsx from \"clsx\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport LinkIcon from \"@material-ui/icons/Link\";\r\nimport sessionStore from \"../store/session\";\r\nimport ManagaUrlsTable from \"../components/Tables/ManageUrls\";\r\nimport dispatcher from \"../dispatcher\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport MultiFilter from \"../components/Filters/MultiFilter\";\r\n\r\nimport Statistics from \"../models/Statistics\";\r\nimport statisticsActions from \"../actions/Statistics\";\r\nimport statisticsStore from \"../store/Statistics\";\r\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport StatisticsChart from \"../components/Charts/CrawlerThreads\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    minWidth: 275,\r\n    maxWidth: 275,\r\n    marginRight: theme.spacing(4),\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  cardIcon: {\r\n    width: \"50%\",\r\n    height: \"50%\",\r\n  },\r\n  circle: {\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    width: \"2rem\",\r\n    height: \"2rem\",\r\n    margin: theme.spacing(2),\r\n  },\r\n  circleOrange: {\r\n    backgroundColor: \"orange\",\r\n    color: \"white\",\r\n  },\r\n  circleBlue: {\r\n    backgroundColor: \"blue\",\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nlet filterTimeout = undefined;\r\nexport default function StatisticsAdminView() {\r\n  const [Statistics, setStatistics] = useState(statisticsStore.getStatistics());\r\n\r\n  const [CountryFilter, setCountryFilter] = useState(null);\r\n  const [UserFilter, setUserFilter] = useState(null);\r\n  const [DateRangeFilter, setDateRangeFilter] = useState(null);\r\n\r\n  const FilterCountries = Statistics && Statistics.availableCountries;\r\n  const FilterUsers = Statistics && Statistics.availableUsers;\r\n\r\n  const isLoading = !Statistics;\r\n\r\n  const handleCountryFilterChanged = (countryFilter) => {\r\n    setCountryFilter(countryFilter);\r\n  };\r\n  const handleDateFilterChanged = (dateRange) => {\r\n    setDateRangeFilter(dateRange);\r\n  };\r\n  const handleUserFilterChanged = (userFilter) => {\r\n    setUserFilter(userFilter);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  const syncStatistics = () => {\r\n    statisticsActions.syncStatistics({\r\n      dateRange: DateRangeFilter,\r\n      userFilter: UserFilter,\r\n      countryFilter: CountryFilter,\r\n    });\r\n  };\r\n\r\n  const onStatisticsSynced = () => {\r\n    setStatistics(statisticsStore.getStatistics());\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Bind listeners\r\n    statisticsStore.addChangeListener(\r\n      ActionTypes.Statistics.STATISTICS_RECEIVED,\r\n      onStatisticsSynced\r\n    );\r\n\r\n    syncStatistics();\r\n    return () => {\r\n      // Unbind listeners\r\n      statisticsStore.removeChangeListener(\r\n        ActionTypes.Statistics.STATISTICS_RECEIVED,\r\n        onStatisticsSynced\r\n      );\r\n    };\r\n  });\r\n\r\n  const theme = useTheme();\r\n  return (\r\n    <div>\r\n      <Paper\r\n        style={{ padding: theme.spacing(2), marginBottom: theme.spacing(4) }}\r\n      >\r\n        <MultiFilter\r\n          Users={FilterUsers}\r\n          Countries={FilterCountries}\r\n          onUserFilterChanged={handleUserFilterChanged}\r\n          onDateRangeChanged={handleDateFilterChanged}\r\n          onCountriesChanged={handleCountryFilterChanged}\r\n        />\r\n      </Paper>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\r\n              <div style={{ flex: 1 }}>\r\n                <Typography\r\n                  className={classes.title}\r\n                  color=\"textSecondary\"\r\n                  gutterBottom\r\n                >\r\n                  Total tracked URLs\r\n                </Typography>\r\n                {isLoading ? (\r\n                  <Skeleton\r\n                    variant=\"rect\"\r\n                    style={{ width: 120, marginTop: 8 }}\r\n                  ></Skeleton>\r\n                ) : (\r\n                  <Typography variant=\"h5\" component=\"h2\">\r\n                    {Statistics.trackedUrls}\r\n                  </Typography>\r\n                )}\r\n              </div>\r\n              <div\r\n                className={clsx({\r\n                  [classes.circle]: true,\r\n                  [classes.circleOrange]: true,\r\n                })}\r\n              >\r\n                <LinkIcon className={classes.cardIcon} />\r\n              </div>\r\n            </Box>\r\n          </CardContent>\r\n          {false && (\r\n            <CardActions>\r\n              <Button size=\"small\">Learn More</Button>\r\n            </CardActions>\r\n          )}\r\n        </Card>\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\r\n              <div style={{ flex: 1 }}>\r\n                <Typography\r\n                  className={classes.title}\r\n                  color=\"textSecondary\"\r\n                  gutterBottom\r\n                >\r\n                  Inserted Jobs\r\n                </Typography>\r\n                {isLoading ? (\r\n                  <Skeleton\r\n                    variant=\"rect\"\r\n                    style={{ width: 120, marginTop: 8 }}\r\n                  ></Skeleton>\r\n                ) : (\r\n                  <Typography variant=\"h5\" component=\"h2\">\r\n                    {Statistics.scrapedJobs}\r\n                  </Typography>\r\n                )}\r\n              </div>\r\n              <div\r\n                className={clsx({\r\n                  [classes.circle]: true,\r\n                  [classes.circleBlue]: true,\r\n                })}\r\n              >\r\n                <AssignmentTurnedInIcon className={classes.cardIcon} />\r\n              </div>\r\n            </Box>\r\n          </CardContent>\r\n          {false && (\r\n            <CardActions>\r\n              <Button size=\"small\">Learn More</Button>\r\n            </CardActions>\r\n          )}\r\n        </Card>\r\n      </div>\r\n      <StatisticsChart />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\views\\ScrapingThreadDetails.jsx",["908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925"],"import React, { useEffect, useState } from \"react\";\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\nimport HttpIcon from \"@material-ui/icons/Http\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport SubdirectoryArrowRightIcon from \"@material-ui/icons/SubdirectoryArrowRight\";\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport {\n  IconButton,\n  Paper,\n  Typography,\n  Box,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableContainer,\n  List,\n  Table,\n  TableBody,\n  ListItem,\n  Link,\n  Tooltip,\n  Button,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport {\n  ArrowBack,\n  Check,\n  Extension as ExtensionIcon,\n  Mail,\n  Person,\n  Visibility,\n  VisibilityOff,\n  Lock,\n  Close,\n} from \"@material-ui/icons\";\nimport { useHistory } from \"react-router-dom\";\n\nimport ScrapingThreadApi from \"../api/ScrapingThread\";\nimport Collapsable from \"../components/Collapsable\";\n\nconst openWindowWithJson = (dict) => {\n  let jsstr = JSON.stringify(dict, undefined, 2);\n  console.log(dict);\n  let myWindow = window.open(\n    \"about:blank?doctype=application/json\",\n    \"_blank\",\n    \"width=420,height=480\"\n  );\n  let pre = myWindow.document.createElement(\"pre\");\n  pre.textContent = jsstr;\n  myWindow.document.body.appendChild(pre);\n  myWindow.focus();\n};\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  green: {\n    color: \"green\",\n  },\n  red: {\n    color: \"red\",\n  },\n  orange: {\n    color: \"orange\",\n  },\n  subRow: {\n    marginLeft: theme.spacing(3),\n  },\n}));\nconst ScrapingThreadDetailsView = (props) => {\n  const [CollapsedRow, setCollapsedRow] = useState(null);\n  const [Rows, setRows] = useState(null);\n  const ShortDetails = {\n    totalRequests: 0,\n    failedRequests: 0,\n    scrapedJobs: 0,\n  };\n  if (Array.isArray(Rows))\n    for (let scrapingThread of Rows) {\n      if (scrapingThread.requests && Array.isArray(scrapingThread.requests)) {\n        for (let request of scrapingThread.requests) {\n          ShortDetails.totalRequests += 1;\n          if (request.statusCode >= 400) {\n            ShortDetails.failedRequests += 1;\n          }\n        }\n        if (scrapingThread.jobSchemaFound) {\n          ShortDetails.scrapedJobs += scrapingThread.scrapedJobs;\n        }\n      }\n    }\n  const history = useHistory();\n  const isLoadingResults = !Rows;\n  const theme = useTheme();\n  const onGoBack = () => {\n    history.goBack();\n  };\n  const classes = useStyles();\n  const parentThreadId = props.match.params.threadId;\n\n  const retrieveResults = async () => {\n    const details = await ScrapingThreadApi.GetDetails(parentThreadId);\n    setRows(details);\n  };\n\n  useEffect(() => {\n    retrieveResults();\n  }, []);\n\n  const renderStatusCode = (\n    statusCode,\n    statusText,\n    isFromExtension,\n    isCompleted,\n    parentThreadId\n  ) => {\n    let statusCodeRenderable = statusCode ? (\n      <code>{statusCode}</code>\n    ) : isFromExtension && !parentThreadId ? (\n      <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\n        <ExtensionIcon\n          style={{\n            color: theme.palette.text.hint,\n            height: 18,\n            width: 18,\n            marginRight: theme.spacing(1),\n          }}\n        />\n        {`Scraped from extension`}\n      </div>\n    ) : (\n      <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\n        <HourglassEmptyIcon\n          style={{\n            color: theme.palette.text.hint,\n            height: 18,\n            width: 18,\n            marginRight: theme.spacing(1),\n          }}\n        />\n        {`Pending crawl`}\n      </div>\n    );\n    if (!statusCode && !isCompleted) {\n      statusText = \"Waiting for Bot to crawl the URL\";\n    }\n    statusText =\n      !statusText && isFromExtension && !parentThreadId\n        ? `This URL's was crawled from the Extension, and the bot won't perform any actions on this.`\n        : statusText;\n    return (\n      <Tooltip title={statusText}>\n        <Typography\n          variant=\"caption\"\n          className={clsx({\n            [classes.red]: statusCode >= 400,\n            [classes.orange]: statusCode >= 300 && statusCode < 400,\n            [classes.green]: statusCode < 300,\n          })}\n        >\n          {statusCodeRenderable}\n        </Typography>\n      </Tooltip>\n    );\n  };\n\n  // const renderRetriesTitle = (retries) => {\n  //   if (retries.length === 1) {\n  //     return renderStatusCode(retries[0].statusCode);\n  //   }\n  // };\n\n  // const renderRetry = (retry, num = 1) => {\n  //   const reason = retry.reason ? \"/ \" + retry.reason : \"\";\n  //   return (\n  //     <ListItem style={{ padding: 0 }}>\n  //       <Box\n  //         display=\"inline-flex\"\n  //         alignItems=\"center\"\n  //         justifyContent=\"flex-start\"\n  //       >\n  //         <Typography\n  //           variant=\"caption\"\n  //           style={{\n  //             marginRight: theme.spacing(1),\n  //             color: theme.palette.text.hint,\n  //           }}\n  //         >\n  //           ({num})\n  //         </Typography>\n  //         <HttpIcon style={{ marginRight: theme.spacing(1) }} />\n  //         {renderStatusCode(retry.statusCode, retry.statusText)}\n  //       </Box>\n  //     </ListItem>\n  //   );\n  // };\n\n  const renderJobSchemaFound = ({ jobSchemaFound, threadId, isCompleted }) => {\n    if (!isCompleted) {\n      return \"-\";\n    }\n    return !jobSchemaFound ? (\n      <Tooltip title={\"No job schema found in page source\"}>\n        <Close className={classes.red} />\n      </Tooltip>\n    ) : (\n      <Link\n        href={`https://api2-scrapers.bebee.com/scraping-thread/${threadId}/schema`}\n        target=\"_blank\"\n      >\n        View schema\n      </Link>\n    );\n  };\n  const renderRow = (data, renderRequest = null) => {\n    // Filter out some requests that have empty URL\n    if (renderRequest && !renderRequest.url) {\n      return null;\n    }\n\n    // Collapsed row?\n    const isSubRow = !!renderRequest;\n\n    let url = data.scraping_thread.url;\n    let threadId = data.scraping_thread.threadId;\n    let requests = data.requests;\n    if (!renderRequest) {\n      renderRequest = requests[0];\n    }\n    const hasResources = data.spider_used && data.requests.length > 0;\n\n    return (\n      <TableRow\n        key={data.threadId}\n        // className={clsx({\n        //   [classes.subRow]: !!isSubRow,\n        // })}\n      >\n        <TableCell>\n          <Box display=\"flex\" style={{ alignItems: \"center\" }}>\n            {isSubRow && (\n              // <div\n              //   style={{ padding: 24, background: theme.palette.grey[200] }}\n              // ></div>\n              <SubdirectoryArrowRightIcon\n                size=\"small\"\n                style={{\n                  marginLeft: theme.spacing(2),\n                  color: theme.palette.grey[400],\n                }}\n              />\n            )}\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              style={{\n                padding: theme.spacing(2),\n                maxWidth: \"100%\",\n                overflow: \"hidden\",\n              }}\n            >\n              <Typography\n                variant=\"caption\"\n                style={{ color: theme.palette.text.disabled }}\n              >\n                #{data.scraping_thread.threadId}\n              </Typography>\n              <Link\n                href={renderRequest.url}\n                target=\"_blank\"\n                style={{ textOverflow: \"clip\" }}\n              >\n                {renderRequest.url}\n              </Link>\n              {!isSubRow && data.requests.length >= 2 && (\n                <div\n                  compoennt={Button}\n                  style={{\n                    color: theme.palette.text.hint,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => {\n                    const target = Boolean(CollapsedRow) ? 0 : threadId;\n\n                    setCollapsedRow(target);\n                  }}\n                >\n                  <AddBoxOutlinedIcon\n                    style={{\n                      height: 16,\n                      width: 16,\n                      marginRight: theme.spacing(1),\n                    }}\n                  />\n                  <Typography variant=\"caption\">\n                    ({requests.length}){\" \"}\n                    {hasResources ? \" resources loaded\" : \" retries\"}\n                  </Typography>\n                </div>\n              )}\n            </Box>\n          </Box>\n        </TableCell>\n        <TableCell>\n          {(() => {\n            return renderStatusCode(\n              renderRequest.response.status_code,\n              renderRequest.response.status_text,\n              false,\n              1,\n              data.scraping_thread.parentThreadId\n            );\n          })()}\n        </TableCell>\n        <TableCell>\n          {(() => {\n            if (isSubRow) {\n              return renderRequest.response.time_needed;\n            }\n            return data.timings.post_processing + data.timings.crawler;\n          })()}\n        </TableCell>\n        <TableCell>\n          {/* {renderJobSchemaFound({ threadId, jobSchemaFound, isCompleted })} */}\n          {data.job_schemas.length ? (\n            <Link\n              href={`https://api2-scrapers.bebee.com/scraping-thread/${threadId}/schema`}\n              target=\"_blank\"\n            >\n              View schemas\n            </Link>\n          ) : (\n            \"-\"\n          )}\n        </TableCell>\n      </TableRow>\n    );\n  };\n\n  return (\n    <div style={{ display: \"inline-block\", paddingBottom: 168 }}>\n      <div\n        style={{\n          display: \"inline-flex\",\n          alignItems: \"center\",\n          marginBottom: theme.spacing(1),\n        }}\n      >\n        <IconButton size=\"small\" onClick={onGoBack}>\n          <ArrowBack size=\"small\" />\n        </IconButton>\n        <Typography variant=\"h6\" style={{ marginLeft: theme.spacing(1) }}>\n          Viewing scraping thread details\n        </Typography>\n      </div>\n\n      <Paper variant=\"outlined\" style={{ marginBottom: theme.spacing(3) }}>\n        <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\">\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            style={{ padding: theme.spacing(2) }}\n          >\n            <Typography variant=\"caption\">Total requests performed:</Typography>\n            <Typography variant=\"caption\">Failed requests:</Typography>\n            <Typography variant=\"caption\">Job schemas:</Typography>\n            <Link\n              href=\"javascript:void(0)\"\n              onClick={() => {\n                let js = Rows;\n                for (let i = 0; i < js.length; i++) {\n                  js[i].results = JSON.parse(js[i].results);\n                }\n                openWindowWithJson(js);\n              }}\n            >\n              View raw json\n            </Link>\n          </Box>\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            style={{ padding: theme.spacing(2) }}\n          >\n            <Typography variant=\"caption\">\n              {ShortDetails.totalRequests}\n            </Typography>\n            <Typography variant=\"caption\">\n              {ShortDetails.failedRequests}\n            </Typography>\n            <Typography variant=\"caption\">\n              {ShortDetails.scrapedJobs}\n            </Typography>\n          </Box>\n        </Box>\n      </Paper>\n\n      <TableContainer component={Paper}>\n        <Table\n          className={classes.table}\n          aria-label=\"simple table\"\n          style={{ tableLayout: \"fixed\" }}\n        >\n          <colgroup>\n            <col style={{ width: \"60%\" }} />\n            <col style={{ width: \"20%\" }} />\n            <col style={{ width: \"10%\" }} />\n            <col style={{ width: \"10%\" }} />\n          </colgroup>\n          <TableHead>\n            <TableRow>\n              <TableCell width=\"60%\">URL</TableCell>\n              <TableCell width=\"15%\">Status</TableCell>\n              <TableCell width=\"15%\">Time needed (ms)</TableCell>\n              <TableCell width=\"10%\">Job Schema(s)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {isLoadingResults\n              ? [...Array(8).keys()].map((x) => (\n                  <TableRow key={x} style={{ height: 56 }}>\n                    <TableCell>\n                      <Skeleton animation=\"wave\" style={{ width: \"60%\" }} />\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Skeleton animation=\"wave\" style={{ width: \"15%\" }} />\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Skeleton animation=\"wave\" style={{ width: \"15%\" }} />\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Skeleton animation=\"wave\" style={{ width: \"10%\" }} />\n                    </TableCell>\n                  </TableRow>\n                ))\n              : Rows.map((row) => {\n                  const threadId = row.threadId;\n                  const rowData = JSON.parse(row.results);\n                  return (\n                    <React.Fragment>\n                      {renderRow(rowData)}\n\n                      {CollapsedRow === threadId &&\n                        rowData.requests.map((request) =>\n                          renderRow(rowData, request)\n                        )}\n                    </React.Fragment>\n                  );\n                })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default ScrapingThreadDetailsView;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Collapsable.jsx",["926","927"],"import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { Typography, Collapse, IconButton } from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n}));\n\nconst Collapsable = ({ title, children }) => {\n  const [Collapsed, setCollapsed] = useState(false);\n  const classes = useStyles();\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <div\n        style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n      >\n        {title}\n        <IconButton\n          onClick={() => {\n            setCollapsed(!Collapsed);\n          }}\n          aria-expanded={Collapsed}\n          aria-label=\"show more\"\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: Collapsed,\n          })}\n        >\n          <ExpandMore />\n        </IconButton>\n      </div>\n      <Collapse in={Collapsed} timeout=\"auto\" unmountOnExit>\n        {children}\n      </Collapse>\n    </div>\n  );\n};\n\nexport default Collapsable;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\XmlHistory.jsx",["928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport { DateRangePicker, DateRange } from \"materialui-daterange-picker\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { useConfirm } from \"material-ui-confirm\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport GlobeIcon from \"@material-ui/icons/Public\";\r\nimport { prettyTimelapse, timeSince } from \"../../helpers/time\";\r\nimport UserAvatar from \"../User/Avatar/ShortLettersAvatar\";\r\n\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Divider,\r\n  IconButton,\r\n  LinearProgress,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  CircularProgress,\r\n  TableContainer,\r\n  TableFooter,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Tooltip,\r\n  Typography,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\n\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport uiActions from \"../../actions/UI\";\r\nimport ScrapingThreadApi from \"../../api/ScrapingThread\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport sessionStore from \"../../store/session\";\r\nimport tableStore from \"../../store/Tables\";\r\nimport scrapingThreadsStore from \"../../store/ScrapingThreads\";\r\nimport CountryFilter from \"../Filters/CountryFilter\";\r\nimport TablePaginationActions from \"./Pagination\";\r\nimport EmptyTablePlaceholder from \"./EmptyPlaceholder\";\r\n\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport ActionTypes from \"../../constants/ActionTypes\";\r\nimport scrapingThreadsActions from \"../../actions/ScrapingThread\";\r\nimport {\r\n  Add,\r\n  AddCircle,\r\n  Delete,\r\n  Today,\r\n  AssignmentTurnedIn as AssignmentTurnedInIcon,\r\n  Public,\r\n  RssFeedTwoTone,\r\n  Search,\r\n  CheckCircle,\r\n} from \"@material-ui/icons\";\r\n\r\nimport tableActions from \"../../actions/Table\";\r\nimport TableNames from \"../../constants/Tables\";\r\nimport TableData from \"../../models/TableData\";\r\nimport MultiFilter from \"../Filters/MultiFilter\";\r\nimport LinkIcon from \"@material-ui/icons/Link\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  tableRow: {\r\n    height: 70,\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  emptyRow: {\r\n    height: 70,\r\n    backgroundColor: \"white!important\",\r\n    \"&:first-child td\": {\r\n      paddingTop: \"8rem\",\r\n      paddingBottom: \"8rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst THIS_TABLE_NAME = TableNames.XML_FEEDS;\r\n\r\nconst XmlFeedsTable = ({ filter }) => {\r\n  let [tableData, setTableData] = useState(\r\n    tableStore.getTableData(THIS_TABLE_NAME)\r\n  );\r\n  const [SelectedRows, setSelectedRows] = useState([]);\r\n  const [DateRange, setDateRange] = useState(null);\r\n\r\n  const HasTableData = tableData !== undefined;\r\n\r\n  if (!HasTableData) {\r\n    tableData = TableData.defaults(THIS_TABLE_NAME);\r\n  }\r\n  const confirm = useConfirm();\r\n  const rowsPerPage = tableData.rowsPerPage;\r\n  const page = tableData.page;\r\n  const countryFilter = tableData.countryFilter;\r\n  const dateRange = tableData.dateRange;\r\n  let rows = tableData.rows;\r\n\r\n  const IsLoadingResults = tableData.isLoading;\r\n  let hasInheritedRows = false;\r\n  if (IsLoadingResults && tableData.previousTableData) {\r\n    rows = tableData.previousTableData.rows;\r\n    hasInheritedRows = true;\r\n  }\r\n\r\n  const isLoadingResults = tableData ? tableData.isLoading : true;\r\n  const rowsLength = Array.isArray(rows) ? rows.length : 0;\r\n  const classes = useStyles();\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, rowsLength - page * rowsPerPage) +\r\n    (rowsLength > 1 ? 0 : 1);\r\n  const deleteSelectedRows = () => {\r\n    if (SelectedRows.length) {\r\n      confirm({\r\n        description: `Are you sure you want to delete ${SelectedRows.length} links?`,\r\n        title: `Delete ${SelectedRows.length} links`,\r\n      })\r\n        .then(async () => {\r\n          const res = await ScrapingThreadApi.Delete(SelectedRows);\r\n          if (res && res.success) {\r\n            uiActions.showSnackbar(`Links deleted successfully`, \"success\");\r\n            setSelectedRows([]);\r\n            setTimeout(() => {\r\n              syncTableData({});\r\n            });\r\n          }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n  const handleUserFilterChanged = (userFilter) => {\r\n    return;\r\n    //setUserFilter(userFilter);\r\n  };\r\n\r\n  const selectAllRows = (evt) => {\r\n    const checked = evt.target.checked;\r\n    if (!checked) {\r\n      setSelectedRows([]);\r\n    } else if (checked) {\r\n      if (Array.isArray(rows)) {\r\n        setSelectedRows(rows.map((row) => row.threadId));\r\n      }\r\n    }\r\n  };\r\n  const syncTableData = ({\r\n    newPage,\r\n    newRowsPerPage,\r\n    newDateRange,\r\n    newCountryFilter,\r\n  }) => {\r\n    tableActions.createTableData({\r\n      rowsPerPage: newRowsPerPage !== undefined ? newRowsPerPage : rowsPerPage,\r\n      page:\r\n        newRowsPerPage !== -1 ? (newPage !== undefined ? newPage : page) : 0,\r\n      filter: filter || \"\",\r\n      tableName: THIS_TABLE_NAME,\r\n      previousRowCount:\r\n        tableData && tableData.totalRowsCount\r\n          ? tableData.totalRowsCount\r\n          : undefined,\r\n      dateRange: newDateRange !== undefined ? newDateRange : dateRange,\r\n      countryFilter:\r\n        newCountryFilter !== undefined ? newCountryFilter : countryFilter,\r\n    });\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    console.log(\"handleChangePage.newPage\", newPage);\r\n    syncTableData({ newPage });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    syncTableData({ newRowsPerPage, newPage: 0 });\r\n  };\r\n\r\n  /**\r\n   * @type {Object} obj\r\n   * @type {TableData} obj.tableData\r\n   */\r\n  const onTableRowsDataUpdated = ({ tableData }) => {\r\n    if (tableData.tableName === THIS_TABLE_NAME) {\r\n      const foundTable = tableStore.getByTableName(THIS_TABLE_NAME);\r\n      console.log(\"foundTable\", foundTable);\r\n      setTableData(foundTable);\r\n    }\r\n  };\r\n  console.log(\"rendering\", tableData);\r\n\r\n  const onScrapingThreadCreated = () => {\r\n    setTimeout(() => {\r\n      syncTableData({ newPage: 0 });\r\n    });\r\n  };\r\n  const bindListeners = () => {\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_CREATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_UPDATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n\r\n    return () => {\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_CREATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_UPDATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n    };\r\n  };\r\n  const onRowSelectionChanged = (id) => {\r\n    console.log(SelectedRows);\r\n    const alreadySelectedIndex = SelectedRows.findIndex((c) => c === id);\r\n    const alreadySelected =\r\n      alreadySelectedIndex !== -1 && alreadySelectedIndex !== false;\r\n    if (alreadySelected) {\r\n      SelectedRows.splice(alreadySelectedIndex, 1);\r\n      setSelectedRows([...SelectedRows]);\r\n    } else {\r\n      setSelectedRows([id, ...SelectedRows]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Means data has not yet loaded nor requested\r\n    setTimeout(() => {\r\n      if (!HasTableData || filter !== tableData.filter) {\r\n        syncTableData({});\r\n      }\r\n    });\r\n\r\n    return bindListeners();\r\n  });\r\n  // if (rows.length <= 0) {\r\n  //   return <EmptyTablePlaceholder />;\r\n  // }\r\n\r\n  const handleCountryFilterChanged = (_countryFilter) => {\r\n    syncTableData({ newCountryFilter: _countryFilter });\r\n  };\r\n  const handleDateFilterChanged = (_dateRange) => {\r\n    syncTableData({ newDateRange: _dateRange });\r\n  };\r\n\r\n  const theme = useTheme();\r\n\r\n  const renderEmptyRows = () => {\r\n    if (rowsPerPage === rowsLength) {\r\n      return \"\";\r\n    }\r\n    const isJustFilling = rowsLength > 0;\r\n    const hasFilterApplied =\r\n      tableData.totalRowsCount < tableData.unfilteredRowsCount;\r\n    const _renderHint = () => {\r\n      if (hasFilterApplied) {\r\n        return (\r\n          <Typography\r\n            variant={isJustFilling ? \"body2\" : \"h6\"}\r\n            style={{ color: theme.palette.text.hint }}\r\n          >\r\n            Try changing filter options\r\n          </Typography>\r\n        );\r\n      }\r\n      if (!isJustFilling)\r\n        return (\r\n          <Typography variant=\"h6\" style={{ color: theme.palette.text.hint }}>\r\n            Add some links to get started\r\n          </Typography>\r\n        );\r\n    };\r\n    const _emptyRowContent = () => (\r\n      <TableCell colspan=\"6\">\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n        >\r\n          {!isJustFilling && (\r\n            <Search\r\n              style={{\r\n                color: theme.palette.text.disabled,\r\n                width: 48,\r\n                height: 48,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography\r\n              variant={isJustFilling ? \"h6\" : \"h4\"}\r\n              style={{\r\n                color: isJustFilling\r\n                  ? theme.palette.text.hint\r\n                  : theme.palette.text.primary,\r\n              }}\r\n            >\r\n              No{rowsLength > 0 ? \" more\" : \"\"} links found\r\n            </Typography>\r\n          </Box>\r\n          {_renderHint()}\r\n        </Box>\r\n      </TableCell>\r\n    );\r\n\r\n    const _createRow = () => (\r\n      <TableRow\r\n        className={clsx({\r\n          [classes.tableRow]: true,\r\n          [classes.emptyRow]: true,\r\n        })}\r\n        key={Math.random()}\r\n      >\r\n        {_emptyRowContent()}\r\n      </TableRow>\r\n    );\r\n\r\n    return _createRow();\r\n  };\r\n\r\n  const renderXmlStatus = (row) => {\r\n    if (row.isAvailable) {\r\n      return (\r\n        <React.Fragment>\r\n          <CheckCircle\r\n            style={{\r\n              width: 18,\r\n              height: 18,\r\n              color: \"green\",\r\n            }}\r\n          />\r\n          <Typography\r\n            variant=\"body2\"\r\n            noWrap={true}\r\n            style={{ marginLeft: theme.spacing(1) }}\r\n          >\r\n            Available\r\n          </Typography>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <Table className={classes.table} aria-label=\"custom pagination table\">\r\n      {/* <LinearProgress\r\n        variant=\"indeterminate\"\r\n        color=\"secondary\"\r\n        style={{ height: 2, opacity: IsLoadingResults ? \"0.5\" : 0 }}\r\n      /> */}\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell component=\"th\" colspan=\"6\">\r\n            <Box display=\"flex\" width=\"100%\" position=\"relative\">\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <Checkbox\r\n                  size=\"small\"\r\n                  disabled={rows.length < 1}\r\n                  checked={rows.length && SelectedRows.length === rows.length}\r\n                  onChange={selectAllRows}\r\n                />\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  marginLeft: theme.spacing(1),\r\n                }}\r\n              >\r\n                <Tooltip\r\n                  title={`Permanently delete ${SelectedRows.length} links?`}\r\n                >\r\n                  <IconButton\r\n                    disabled={SelectedRows.length < 1}\r\n                    size=\"small\"\r\n                    onClick={deleteSelectedRows}\r\n                  >\r\n                    <Badge badgeContent={SelectedRows.length} color=\"secondary\">\r\n                      <Delete />\r\n                    </Badge>\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  marginLeft: theme.spacing(1),\r\n                }}\r\n              >\r\n                <MultiFilter\r\n                  onUserFilterChanged={handleUserFilterChanged}\r\n                  onCountriesChanged={handleCountryFilterChanged}\r\n                  onDateRangeChanged={handleDateFilterChanged}\r\n                />\r\n              </div>\r\n            </Box>\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {isLoadingResults && !hasInheritedRows\r\n          ? [...Array(rowsPerPage !== undefined ? rowsPerPage : 10).keys()].map(\r\n              (x) => (\r\n                <TableRow key={x} style={{ height: 56 }}>\r\n                  <TableCell width=\"45%\">\r\n                    <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                  </TableCell>\r\n                  <TableCell width=\"27,5%\">\r\n                    <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                  </TableCell>\r\n                  <TableCell width=\"27,5%\" align=\"right\">\r\n                    <Skeleton\r\n                      animation=\"wave\"\r\n                      style={{\r\n                        width: \"75%\",\r\n                        display: \"inline-block\",\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              )\r\n            )\r\n          : rows.map((row, index) => {\r\n              const innerRow = (\r\n                <React.Fragment>\r\n                  <TableCell width=\"64px\">\r\n                    <Checkbox\r\n                      size=\"small\"\r\n                      checked={SelectedRows.includes(row.threadId)}\r\n                      onChange={(evt) => {\r\n                        onRowSelectionChanged(row.threadId);\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <UserAvatar\r\n                        username={row.username}\r\n                        fullname={row.fullname}\r\n                      />\r\n                      <Box\r\n                        display=\"flex\"\r\n                        flexDirection=\"column\"\r\n                        style={{ marginLeft: theme.spacing(1) }}\r\n                      >\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          style={{ color: theme.palette.text.hint }}\r\n                        >\r\n                          Generated by {row.username || \"BOT\"}\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\">\r\n                          <Link\r\n                            target=\"_blank\"\r\n                            href={\r\n                              \"https://api2-scrapers.bebee.com/feed/\" +\r\n                              row.uuid +\r\n                              \".xml\"\r\n                            }\r\n                          >\r\n                            {row.uuid}.xml\r\n                          </Link>\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell style={{ width: 160 }} align=\"left\">\r\n                    <Box\r\n                      display=\"inline-flex\"\r\n                      alignItems=\"center\"\r\n                      justifyContent=\"start\"\r\n                    >\r\n                      <Today\r\n                        style={{\r\n                          width: 18,\r\n                          height: 18,\r\n                          color: theme.palette.text.hint,\r\n                        }}\r\n                        //style={{ color: theme.palette.text.hint }}\r\n                      />\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        noWrap={true}\r\n                        style={{ marginLeft: theme.spacing(1) }}\r\n                      >\r\n                        {timeSince(row.age)}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <Box alignItems=\"center\" display=\"inline-flex\">\r\n                      <GlobeIcon\r\n                        style={{\r\n                          width: 18,\r\n                          height: 18,\r\n                          color: theme.palette.text.hint,\r\n                        }}\r\n                      />\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        noWrap={true}\r\n                        style={{ marginLeft: theme.spacing(1) }}\r\n                      >\r\n                        {row.country}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell style={{ width: 160 }} align=\"left\">\r\n                    <Box\r\n                      display=\"inline-flex\"\r\n                      alignItems=\"center\"\r\n                      justifyContent=\"start\"\r\n                    >\r\n                      <AssignmentTurnedInIcon\r\n                        style={{\r\n                          width: 18,\r\n                          height: 18,\r\n                          color: theme.palette.text.hint,\r\n                        }}\r\n                      />\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        noWrap={true}\r\n                        style={{ marginLeft: theme.spacing(1) }}\r\n                      >\r\n                        {row.totalJobs} jobs\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box display=\"inline-flex\" alignItems=\"center\">\r\n                      {renderXmlStatus(row)}\r\n                    </Box>\r\n                  </TableCell>\r\n                </React.Fragment>\r\n              );\r\n              const wrapComponent = (\r\n                <TableRow className={classes.tableRow} key={row.uuid}>\r\n                  {innerRow}\r\n                </TableRow>\r\n              );\r\n              return wrapComponent;\r\n            })}\r\n        {!IsLoadingResults && renderEmptyRows()}\r\n      </TableBody>\r\n      <TableFooter>\r\n        <TableRow>\r\n          {rowsLength > 0 && (\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 8, 10, 25, { label: \"All\", value: -1 }]}\r\n              colSpan={3}\r\n              count={tableData.totalRowsCount}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { \"aria-label\": \"rows per page\" },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          )}\r\n        </TableRow>\r\n      </TableFooter>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default XmlFeedsTable;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\DomainsManagement.jsx",["957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { useConfirm } from \"material-ui-confirm\";\r\nimport MultifunctionalHeading from \"../Table/MultifunctionalHeading\";\r\nimport countriesActions from \"../../actions/Countries\";\r\nimport hostsActions from \"../../actions/Hosts\";\r\nimport DEFAULT_PARSING_REGEX from \"../../constants/Scraper\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Checkbox,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableFooter,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Tooltip,\r\n  Menu,\r\n  MenuItem,\r\n  Link,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport uiActions from \"../../actions/UI\";\r\nimport ScrapingThreadApi from \"../../api/ScrapingThread\";\r\nimport tableStore from \"../../store/Tables\";\r\nimport scrapingThreadsStore from \"../../store/ScrapingThreads\";\r\nimport TablePaginationActions from \"./Pagination\";\r\n\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport ActionTypes from \"../../constants/ActionTypes\";\r\nimport EditHostParsingRegexDialog from \"../Dialogs/EditHostParsingRegex\";\r\nimport {\r\n  Delete,\r\n  AssignmentTurnedIn as AssignmentTurnedInIcon,\r\n  Search,\r\n  MoreVert,\r\n  Edit,\r\n} from \"@material-ui/icons\";\r\n\r\nimport tableActions from \"../../actions/Table\";\r\nimport TableNames from \"../../constants/Tables\";\r\nimport TableData from \"../../models/TableData\";\r\nimport MultiFilter from \"../Filters/MultiFilter\";\r\nimport Country from \"../../models/Country\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  editRegexIcon: {\r\n    opacity: 0,\r\n  },\r\n  tableRow: {\r\n    height: 70,\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n    '&:hover [name=\"editRegexIcon\"]': {\r\n      opacity: 1,\r\n    },\r\n  },\r\n  emptyRow: {\r\n    height: 70,\r\n    backgroundColor: \"white!important\",\r\n    \"&:first-child td\": {\r\n      paddingTop: \"8rem\",\r\n      paddingBottom: \"8rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst THIS_TABLE_NAME = TableNames.DOMAINS_MANAGEMENT;\r\nconst COLUMNS = [\r\n  {\r\n    name: \"host\",\r\n    label: \"Host\",\r\n  },\r\n  {\r\n    name: \"totalLinks\",\r\n    label: \"Tracked URLs\",\r\n    align: \"right\",\r\n  },\r\n  {\r\n    name: \"scrapedJobs\",\r\n    label: \"Scraped jobs\",\r\n    align: \"right\",\r\n  },\r\n  {\r\n    name: \"crawlerThreadsCount\",\r\n    label: \"Times crawled\",\r\n    align: \"right\",\r\n  },\r\n  // {\r\n  //   name: \"link_parsing_regex\",\r\n  //   label: \"External link parsing regex\",\r\n  //   sortable: false,\r\n  // },\r\n  {\r\n    name: \"actions\",\r\n    label: \"\",\r\n    sortable: false,\r\n  },\r\n];\r\nconst DomainsManagementTable = ({ filter }) => {\r\n  let [tableData, setTableData] = useState(\r\n    tableStore.getTableData(THIS_TABLE_NAME)\r\n  );\r\n  /**\r\n   * @type {Array.<Country,CallableFunction>}\r\n   */\r\n  const [HostParsingRegexDialogOpen, setHostParsingRegexDialogOpen] = useState(\r\n    false\r\n  );\r\n\r\n  const [RowActionObject, setRowActionObject] = useState(null);\r\n  const [rowMenuAnchorRef, setRowMenuAnchorRef] = React.useState(null);\r\n\r\n  const [SelectedRows, setSelectedRows] = useState([]);\r\n  const [DateRange, setDateRange] = useState(null);\r\n\r\n  const toggleRowMenuOpen = (event, country) => {\r\n    setRowActionObject(country);\r\n    setRowMenuAnchorRef(event.currentTarget);\r\n  };\r\n\r\n  const handleRowMenuClose = (event) => {\r\n    if (\r\n      rowMenuAnchorRef.current &&\r\n      rowMenuAnchorRef.current.contains(event.target)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setRowMenuAnchorRef(null);\r\n  };\r\n\r\n  const HasTableData = tableData !== undefined;\r\n\r\n  if (!HasTableData) {\r\n    tableData = TableData.defaults(THIS_TABLE_NAME);\r\n  }\r\n  const confirm = useConfirm();\r\n  const rowsPerPage = tableData.rowsPerPage;\r\n  const page = tableData.page;\r\n  const countryFilter = tableData.countryFilter;\r\n  const dateRange = tableData.dateRange;\r\n  let rows = tableData.rows;\r\n\r\n  const IsLoadingResults = tableData.isLoading;\r\n  let hasInheritedRows = false;\r\n  if (IsLoadingResults && tableData.previousTableData) {\r\n    rows = tableData.previousTableData.rows;\r\n    hasInheritedRows = true;\r\n  }\r\n\r\n  const isLoadingResults = tableData ? tableData.isLoading : true;\r\n  const rowsLength = Array.isArray(rows) ? rows.length : 0;\r\n  const classes = useStyles();\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, rowsLength - page * rowsPerPage) +\r\n    (rowsLength > 1 ? 0 : 1);\r\n\r\n  const deleteSelectedRows = () => {\r\n    if (SelectedRows.length) {\r\n      confirm({\r\n        description: `Are you sure you want to delete ${SelectedRows.length} links?`,\r\n        title: `Delete ${SelectedRows.length} links`,\r\n      })\r\n        .then(async () => {\r\n          const res = await ScrapingThreadApi.Delete(SelectedRows);\r\n          if (res && res.success) {\r\n            uiActions.showSnackbar(`Links deleted successfully`, \"success\");\r\n            setSelectedRows([]);\r\n            setTimeout(() => {\r\n              syncTableData({});\r\n            });\r\n          }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n  const handleUserFilterChanged = (userFilter) => {\r\n    return;\r\n    //setUserFilter(userFilter);\r\n  };\r\n\r\n  const selectAllRows = (evt) => {\r\n    const checked = evt.target.checked;\r\n    if (!checked) {\r\n      setSelectedRows([]);\r\n    } else if (checked) {\r\n      if (Array.isArray(rows)) {\r\n        setSelectedRows(rows.map((row) => row.threadId));\r\n      }\r\n    }\r\n  };\r\n  const syncTableData = ({\r\n    newPage,\r\n    newSort,\r\n    newRowsPerPage,\r\n    newDateRange,\r\n    newCountryFilter,\r\n  }) => {\r\n    tableActions.createTableData({\r\n      rowsPerPage: newRowsPerPage !== undefined ? newRowsPerPage : rowsPerPage,\r\n      page:\r\n        newRowsPerPage !== -1 ? (newPage !== undefined ? newPage : page) : 0,\r\n      filter: filter || \"\",\r\n      tableName: THIS_TABLE_NAME,\r\n      sort: newSort,\r\n      previousRowCount:\r\n        tableData && tableData.totalRowsCount\r\n          ? tableData.totalRowsCount\r\n          : undefined,\r\n      dateRange: newDateRange !== undefined ? newDateRange : dateRange,\r\n      countryFilter:\r\n        newCountryFilter !== undefined ? newCountryFilter : countryFilter,\r\n    });\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    console.log(\"handleChangePage.newPage\", newPage);\r\n    syncTableData({ newPage });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    syncTableData({ newRowsPerPage, newPage: 0 });\r\n  };\r\n\r\n  /**\r\n   * @type {Object} obj\r\n   * @type {TableData} obj.tableData\r\n   */\r\n  const onTableRowsDataUpdated = ({ tableData }) => {\r\n    if (tableData.tableName === THIS_TABLE_NAME) {\r\n      const foundTable = tableStore.getByTableName(THIS_TABLE_NAME);\r\n      console.log(\"foundTable\", foundTable);\r\n      setTableData(foundTable);\r\n    }\r\n  };\r\n  console.log(\"rendering\", tableData);\r\n\r\n  // const onScrapingThreadCreated = () => {\r\n  //   setTimeout(() => {\r\n  //     syncTableData({ newPage: 0 });\r\n  //   });\r\n  // };\r\n\r\n  const reSync = () => {\r\n    setTimeout(() => {\r\n      syncTableData({});\r\n    });\r\n  };\r\n\r\n  const bindListeners = () => {\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_CREATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\r\n      reSync\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_UPDATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n\r\n    return () => {\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_CREATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\r\n        reSync\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_UPDATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n    };\r\n  };\r\n  const onRowSelectionChanged = (id) => {\r\n    console.log(SelectedRows);\r\n    const alreadySelectedIndex = SelectedRows.findIndex((c) => c === id);\r\n    const alreadySelected =\r\n      alreadySelectedIndex !== -1 && alreadySelectedIndex !== false;\r\n    if (alreadySelected) {\r\n      SelectedRows.splice(alreadySelectedIndex, 1);\r\n      setSelectedRows([...SelectedRows]);\r\n    } else {\r\n      setSelectedRows([id, ...SelectedRows]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Means data has not yet loaded nor requested\r\n    setTimeout(() => {\r\n      if (!HasTableData || filter !== tableData.filter) {\r\n        syncTableData({});\r\n      }\r\n    });\r\n\r\n    return bindListeners();\r\n  }, []);\r\n\r\n  const handleCountryFilterChanged = (_countryFilter) => {\r\n    syncTableData({ newCountryFilter: _countryFilter });\r\n  };\r\n  const handleDateFilterChanged = (_dateRange) => {\r\n    syncTableData({ newDateRange: _dateRange });\r\n  };\r\n\r\n  const theme = useTheme();\r\n\r\n  const renderEmptyRows = () => {\r\n    if (rowsPerPage === rowsLength) {\r\n      return \"\";\r\n    }\r\n    const isJustFilling = rowsLength > 0;\r\n    const hasFilterApplied =\r\n      tableData.totalRowsCount < tableData.unfilteredRowsCount;\r\n    const _renderHint = () => {\r\n      if (hasFilterApplied) {\r\n        return (\r\n          <Typography\r\n            variant={isJustFilling ? \"body2\" : \"h6\"}\r\n            style={{ color: theme.palette.text.hint }}\r\n          >\r\n            Try changing filter options\r\n          </Typography>\r\n        );\r\n      }\r\n      if (!isJustFilling)\r\n        return (\r\n          <Typography variant=\"h6\" style={{ color: theme.palette.text.hint }}>\r\n            Add some links to get started\r\n          </Typography>\r\n        );\r\n    };\r\n    const _emptyRowContent = () => (\r\n      <TableCell colspan=\"6\">\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n        >\r\n          {!isJustFilling && (\r\n            <Search\r\n              style={{\r\n                color: theme.palette.text.disabled,\r\n                width: 48,\r\n                height: 48,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography\r\n              variant={isJustFilling ? \"h6\" : \"h4\"}\r\n              style={{\r\n                color: isJustFilling\r\n                  ? theme.palette.text.hint\r\n                  : theme.palette.text.primary,\r\n              }}\r\n            >\r\n              No{rowsLength > 0 ? \" more\" : \"\"} links found\r\n            </Typography>\r\n          </Box>\r\n          {_renderHint()}\r\n        </Box>\r\n      </TableCell>\r\n    );\r\n\r\n    const _createRow = () => (\r\n      <TableRow\r\n        className={clsx({\r\n          [classes.tableRow]: true,\r\n          [classes.emptyRow]: true,\r\n        })}\r\n        key={Math.random()}\r\n      >\r\n        {_emptyRowContent()}\r\n      </TableRow>\r\n    );\r\n\r\n    return _createRow();\r\n  };\r\n\r\n  const toggleHostParsingRegexDialog = () => {\r\n    setHostParsingRegexDialogOpen(!HostParsingRegexDialogOpen);\r\n  };\r\n\r\n  const onHostParsingRegexDialogClosed = (regex) => {\r\n    const hostId = RowActionObject.hostId;\r\n    setHostParsingRegexDialogOpen(false);\r\n    setTimeout(() => {\r\n      setRowActionObject(null);\r\n    }, 275);\r\n\r\n    if (regex && regex !== setRowActionObject.link_parsing_regex) {\r\n      hostsActions.changeRegex(hostId, regex);\r\n    }\r\n\r\n    // Handle chosenCountry\r\n  };\r\n  // const onCountryRenameDialogClosed = (newCountryName) => {\r\n  //   setCountryRenameDialogOpen(false);\r\n  //   if (\r\n  //     typeof newCountryName === \"string\" &&\r\n  //     newCountryName &&\r\n  //     newCountryName.trim().toLowerCase() !== newCountryName\r\n  //   ) {\r\n  //     countriesActions.renameCountry(\r\n  //       RowActionCountryObject.countryId,\r\n  //       newCountryName.trim()\r\n  //     );\r\n  //   }\r\n  //   setRowActionCountryObject(null);\r\n  //   // Handle chosenCountry\r\n  // };\r\n\r\n  const viewJobYieldingLinksExample = () => {\r\n    let hostId = RowActionObject.hostId;\r\n    let handle = window.open(\r\n      `https://api2-scrapers.bebee.com/hosts/${hostId}/job-yielding-sample`,\r\n      \"_blank\"\r\n    );\r\n    handle.focus();\r\n  };\r\n\r\n  const viewHtmlSample = () => {\r\n    let hostId = RowActionObject.hostId;\r\n    let handle = window.open(\r\n      `https://api2-scrapers.bebee.com/hosts/${hostId}/view-html-sample`,\r\n      \"_blank\"\r\n    );\r\n    handle.focus();\r\n  };\r\n  const testRegex = () => {\r\n    let hostId = RowActionObject.hostId;\r\n    let handle = window.open(\r\n      `https://api2-scrapers.bebee.com/hosts/${hostId}/test-regex`,\r\n      \"_blank\"\r\n    );\r\n    handle.focus();\r\n  };\r\n  const _createRowActionsButton = (country) => {\r\n    const key = country.countryId;\r\n    return (\r\n      <React.Fragment>\r\n        <IconButton\r\n          size=\"small\"\r\n          aria-haspopup=\"true\"\r\n          onClick={(event) => {\r\n            toggleRowMenuOpen(event, country);\r\n          }}\r\n          aria-controls={`row-actions-menu`}\r\n        >\r\n          <MoreVert />\r\n        </IconButton>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const _attachRowActionsMenu = () => {\r\n    return (\r\n      <Menu\r\n        id={`row-actions-menu`}\r\n        anchorEl={rowMenuAnchorRef}\r\n        // keepMounted\r\n        open={Boolean(rowMenuAnchorRef)}\r\n        onClose={handleRowMenuClose}\r\n      >\r\n        {/* <MenuItem\r\n          onClick={() => {\r\n            handleRowMenuClose();\r\n            HostParsingRegexDialog();\r\n          }}\r\n        >\r\n          Rename\r\n        </MenuItem>\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            handleRowMenuClose();\r\n            toggleHostParsingRegexDialog();\r\n          }}\r\n        >\r\n          Mark as alias of..\r\n        </MenuItem> */}\r\n        <MenuItem onClick={handleRowMenuClose}>Generate XML</MenuItem>\r\n        <MenuItem\r\n          onClick={() => {\r\n            viewJobYieldingLinksExample();\r\n            handleRowMenuClose();\r\n          }}\r\n        >\r\n          View links with job schema\r\n        </MenuItem>\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            viewHtmlSample();\r\n            handleRowMenuClose();\r\n          }}\r\n        >\r\n          View HTML sample\r\n        </MenuItem>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  const onSortChanged = ({ name, sort }) => {\r\n    syncTableData({ newSort: { name, sort } });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Table className={classes.table} aria-label=\"custom pagination table\">\r\n        {/* <LinearProgress\r\n        variant=\"indeterminate\"\r\n        color=\"secondary\"\r\n        style={{ height: 2, opacity: IsLoadingResults ? \"0.5\" : 0 }}\r\n      /> */}\r\n        <MultifunctionalHeading\r\n          columns={COLUMNS}\r\n          sort={tableData && tableData.sort}\r\n          onSortChanged={onSortChanged}\r\n        />\r\n        <TableBody>\r\n          {isLoadingResults && !hasInheritedRows\r\n            ? [\r\n                ...Array(rowsPerPage !== undefined ? rowsPerPage : 10).keys(),\r\n              ].map((x) => (\r\n                <TableRow key={x} style={{ height: 56 }}>\r\n                  <TableCell width=\"5%\">\r\n                    <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                  </TableCell>\r\n                  <TableCell width=\"50%\">\r\n                    <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                  </TableCell>\r\n                  <TableCell width=\"15%\">\r\n                    <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                  </TableCell>\r\n                  <TableCell width=\"15%\" align=\"right\">\r\n                    <Skeleton\r\n                      animation=\"wave\"\r\n                      style={{\r\n                        width: \"75%\",\r\n                        display: \"inline-block\",\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell width=\"15%\" align=\"right\">\r\n                    <Skeleton\r\n                      animation=\"wave\"\r\n                      style={{\r\n                        width: \"75%\",\r\n                        display: \"inline-block\",\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            : rows.map((row, index) => {\r\n                const innerRow = (\r\n                  <React.Fragment>\r\n                    <TableCell width=\"64px\">\r\n                      <Checkbox\r\n                        size=\"small\"\r\n                        checked={SelectedRows.includes(row.threadId)}\r\n                        onChange={(evt) => {\r\n                          onRowSelectionChanged(row.threadId);\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell scope=\"row\">\r\n                      <Box display=\"inline-flex\" alignItems=\"center\">\r\n                        <Link href={\"https://\" + row.domain} target=\"_blank\">\r\n                          {row.domain}\r\n                        </Link>\r\n                      </Box>\r\n                    </TableCell>\r\n\r\n                    <TableCell align=\"right\">{row.totalLinks}</TableCell>\r\n                    <TableCell align=\"right\">{row.scrapedJobs}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                      {row.crawlerThreadsCount}\r\n                    </TableCell>\r\n\r\n                    {/* <TableCell component=\"th\" scope=\"row\">\r\n                      <Box display=\"inline-flex\" alignItems=\"center\">\r\n                        <Box display=\"flex\" flexDirection=\"column\">\r\n                          <code style={{ fontWeight: \"400\" }}>\r\n                            {row.link_parsing_regex\r\n                              ? row.link_parsing_regex\r\n                              : DEFAULT_PARSING_REGEX}\r\n                          </code>\r\n                        </Box>\r\n                        <IconButton\r\n                          name=\"editRegexIcon\"\r\n                          className={classes.editRegexIcon}\r\n                          size=\"small\"\r\n                          style={{ marginLeft: theme.spacing(1) }}\r\n                          onClick={(event) => {\r\n                            setRowActionObject(row);\r\n\r\n                            setTimeout(() => {\r\n                              toggleHostParsingRegexDialog();\r\n                            });\r\n                          }}\r\n                        >\r\n                          <Edit style={{ height: 16, width: 16 }} />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </TableCell> */}\r\n                    <TableCell component=\"th\" align=\"right\">\r\n                      {_createRowActionsButton(row)}\r\n                    </TableCell>\r\n                  </React.Fragment>\r\n                );\r\n                const wrapComponent = (\r\n                  <TableRow className={classes.tableRow} key={row.uuid}>\r\n                    {innerRow}\r\n                  </TableRow>\r\n                );\r\n                return wrapComponent;\r\n              })}\r\n          {!IsLoadingResults && renderEmptyRows()}\r\n          {/* Row actions menu */}\r\n          {_attachRowActionsMenu()}\r\n          {/* Row actions menu */}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            {rowsLength > 0 && (\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 8, 10, 25, { label: \"All\", value: -1 }]}\r\n                colSpan={3}\r\n                count={tableData.totalRowsCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { \"aria-label\": \"rows per page\" },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            )}\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n      <EditHostParsingRegexDialog\r\n        open={HostParsingRegexDialogOpen}\r\n        onClose={onHostParsingRegexDialogClosed}\r\n        host={RowActionObject && RowActionObject.host}\r\n        originalRegex={RowActionObject && RowActionObject.link_parsing_regex}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DomainsManagementTable;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\CountriesManagement.jsx",["980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017"],"import React, { useState, useEffect } from \"react\";\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport CountryPickerDialog from \"../Dialogs/CountryPicker\";\r\nimport RenameDialog from \"../Dialogs/Rename\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport AssignmentTurnedIn from \"@material-ui/icons/AssignmentTurnedIn\";\r\nimport { DateRangePicker, DateRange } from \"materialui-daterange-picker\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { useConfirm } from \"material-ui-confirm\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport GlobeIcon from \"@material-ui/icons/Public\";\r\nimport { prettyTimelapse, timeSince } from \"../../helpers/time\";\r\nimport UserAvatar from \"../User/Avatar/ShortLettersAvatar\";\r\nimport countriesActions from \"../../actions/Countries\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Divider,\r\n  IconButton,\r\n  LinearProgress,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  CircularProgress,\r\n  TableContainer,\r\n  TableFooter,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Tooltip,\r\n  Menu,\r\n  MenuItem,\r\n  Typography,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\n\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport uiActions from \"../../actions/UI\";\r\nimport ScrapingThreadApi from \"../../api/ScrapingThread\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport sessionStore from \"../../store/session\";\r\nimport tableStore from \"../../store/Tables\";\r\nimport scrapingThreadsStore from \"../../store/ScrapingThreads\";\r\nimport CountryFilter from \"../Filters/CountryFilter\";\r\nimport TablePaginationActions from \"./Pagination\";\r\nimport EmptyTablePlaceholder from \"./EmptyPlaceholder\";\r\n\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport ActionTypes from \"../../constants/ActionTypes\";\r\nimport scrapingThreadsActions from \"../../actions/ScrapingThread\";\r\nimport {\r\n  Add,\r\n  AddCircle,\r\n  Delete,\r\n  Today,\r\n  AssignmentTurnedIn as AssignmentTurnedInIcon,\r\n  Public,\r\n  RssFeedTwoTone,\r\n  Search,\r\n  MoreVert,\r\n} from \"@material-ui/icons\";\r\n\r\nimport tableActions from \"../../actions/Table\";\r\nimport TableNames from \"../../constants/Tables\";\r\nimport TableData from \"../../models/TableData\";\r\nimport MultiFilter from \"../Filters/MultiFilter\";\r\nimport LinkIcon from \"@material-ui/icons/Link\";\r\nimport Country from \"../../models/Country\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  tableRow: {\r\n    height: 70,\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  emptyRow: {\r\n    height: 70,\r\n    backgroundColor: \"white!important\",\r\n    \"&:first-child td\": {\r\n      paddingTop: \"8rem\",\r\n      paddingBottom: \"8rem\",\r\n    },\r\n  },\r\n\r\n  countryChipContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexWrap: \"wrap\",\r\n    listStyle: \"none\",\r\n    padding: theme.spacing(0.5),\r\n    margin: 0,\r\n  },\r\n  countryChip: {\r\n    margin: 0,\r\n    marginRight: theme.spacing(0.5),\r\n  },\r\n}));\r\n\r\nconst THIS_TABLE_NAME = TableNames.COUNTRIES_MANAGEMENT;\r\n\r\nconst CountriesManagementTable = ({ filter }) => {\r\n  let [tableData, setTableData] = useState(\r\n    tableStore.getTableData(THIS_TABLE_NAME)\r\n  );\r\n  /**\r\n   * @type {Array.<Country,CallableFunction>}\r\n   */\r\n  const [CountryPickerDialogOpen, setCountryPickerDialogOpen] = useState(false);\r\n  const [CountryRenameDialogOpen, setCountryRenameDialogOpen] = useState(false);\r\n\r\n  const [RowActionCountryObject, setRowActionCountryObject] = useState(null);\r\n  const [rowMenuAnchorRef, setRowMenuAnchorRef] = React.useState(null);\r\n\r\n  const [SelectedRows, setSelectedRows] = useState([]);\r\n  const [DateRange, setDateRange] = useState(null);\r\n\r\n  const toggleRowMenuOpen = (event, country) => {\r\n    setRowActionCountryObject(country);\r\n    setRowMenuAnchorRef(event.currentTarget);\r\n  };\r\n\r\n  const handleRowMenuClose = (event) => {\r\n    if (\r\n      rowMenuAnchorRef.current &&\r\n      rowMenuAnchorRef.current.contains(event.target)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setRowMenuAnchorRef(null);\r\n  };\r\n\r\n  const HasTableData = tableData !== undefined;\r\n\r\n  if (!HasTableData) {\r\n    tableData = TableData.defaults(THIS_TABLE_NAME);\r\n  }\r\n  const confirm = useConfirm();\r\n  const rowsPerPage = tableData.rowsPerPage;\r\n  const page = tableData.page;\r\n  const countryFilter = tableData.countryFilter;\r\n  const dateRange = tableData.dateRange;\r\n  let rows = tableData.rows;\r\n\r\n  const IsLoadingResults = tableData.isLoading;\r\n  let hasInheritedRows = false;\r\n  if (IsLoadingResults && tableData.previousTableData) {\r\n    rows = tableData.previousTableData.rows;\r\n    hasInheritedRows = true;\r\n  }\r\n\r\n  const isLoadingResults = tableData ? tableData.isLoading : true;\r\n  const rowsLength = Array.isArray(rows) ? rows.length : 0;\r\n  const classes = useStyles();\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, rowsLength - page * rowsPerPage) +\r\n    (rowsLength > 1 ? 0 : 1);\r\n\r\n  const deleteSelectedRows = () => {\r\n    if (SelectedRows.length) {\r\n      confirm({\r\n        description: `Are you sure you want to delete ${SelectedRows.length} links?`,\r\n        title: `Delete ${SelectedRows.length} links`,\r\n      })\r\n        .then(async () => {\r\n          const res = await ScrapingThreadApi.Delete(SelectedRows);\r\n          if (res && res.success) {\r\n            uiActions.showSnackbar(`Links deleted successfully`, \"success\");\r\n            setSelectedRows([]);\r\n            setTimeout(() => {\r\n              syncTableData({});\r\n            });\r\n          }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n  const handleUserFilterChanged = (userFilter) => {\r\n    return;\r\n    //setUserFilter(userFilter);\r\n  };\r\n\r\n  const selectAllRows = (evt) => {\r\n    const checked = evt.target.checked;\r\n    if (!checked) {\r\n      setSelectedRows([]);\r\n    } else if (checked) {\r\n      if (Array.isArray(rows)) {\r\n        setSelectedRows(rows.map((row) => row.threadId));\r\n      }\r\n    }\r\n  };\r\n  const syncTableData = ({\r\n    newPage,\r\n    newRowsPerPage,\r\n    newDateRange,\r\n    newCountryFilter,\r\n  }) => {\r\n    tableActions.createTableData({\r\n      rowsPerPage: newRowsPerPage !== undefined ? newRowsPerPage : rowsPerPage,\r\n      page:\r\n        newRowsPerPage !== -1 ? (newPage !== undefined ? newPage : page) : 0,\r\n      filter: filter || \"\",\r\n      tableName: THIS_TABLE_NAME,\r\n      previousRowCount:\r\n        tableData && tableData.totalRowsCount\r\n          ? tableData.totalRowsCount\r\n          : undefined,\r\n      dateRange: newDateRange !== undefined ? newDateRange : dateRange,\r\n      countryFilter:\r\n        newCountryFilter !== undefined ? newCountryFilter : countryFilter,\r\n    });\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    console.log(\"handleChangePage.newPage\", newPage);\r\n    syncTableData({ newPage });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    syncTableData({ newRowsPerPage, newPage: 0 });\r\n  };\r\n\r\n  /**\r\n   * @type {Object} obj\r\n   * @type {TableData} obj.tableData\r\n   */\r\n  const onTableRowsDataUpdated = ({ tableData }) => {\r\n    if (tableData.tableName === THIS_TABLE_NAME) {\r\n      const foundTable = tableStore.getByTableName(THIS_TABLE_NAME);\r\n      console.log(\"foundTable\", foundTable);\r\n      setTableData(foundTable);\r\n    }\r\n  };\r\n  console.log(\"rendering\", tableData);\r\n\r\n  const onScrapingThreadCreated = () => {\r\n    setTimeout(() => {\r\n      syncTableData({ newPage: 0 });\r\n    });\r\n  };\r\n\r\n  const reSync = () => {\r\n    setTimeout(() => {\r\n      syncTableData({});\r\n    });\r\n  };\r\n\r\n  const bindListeners = () => {\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_CREATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\r\n      reSync\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_UPDATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n\r\n    return () => {\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_CREATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\r\n        reSync\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_UPDATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n    };\r\n  };\r\n  const onRowSelectionChanged = (id) => {\r\n    console.log(SelectedRows);\r\n    const alreadySelectedIndex = SelectedRows.findIndex((c) => c === id);\r\n    const alreadySelected =\r\n      alreadySelectedIndex !== -1 && alreadySelectedIndex !== false;\r\n    if (alreadySelected) {\r\n      SelectedRows.splice(alreadySelectedIndex, 1);\r\n      setSelectedRows([...SelectedRows]);\r\n    } else {\r\n      setSelectedRows([id, ...SelectedRows]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Means data has not yet loaded nor requested\r\n    setTimeout(() => {\r\n      if (!HasTableData || filter !== tableData.filter) {\r\n        syncTableData({});\r\n      }\r\n    });\r\n\r\n    return bindListeners();\r\n  });\r\n\r\n  const handleCountryFilterChanged = (_countryFilter) => {\r\n    syncTableData({ newCountryFilter: _countryFilter });\r\n  };\r\n  const handleDateFilterChanged = (_dateRange) => {\r\n    syncTableData({ newDateRange: _dateRange });\r\n  };\r\n\r\n  const theme = useTheme();\r\n\r\n  const renderEmptyRows = () => {\r\n    if (rowsPerPage === rowsLength) {\r\n      return \"\";\r\n    }\r\n    const isJustFilling = rowsLength > 0;\r\n    const hasFilterApplied =\r\n      tableData.totalRowsCount < tableData.unfilteredRowsCount;\r\n    const _renderHint = () => {\r\n      if (hasFilterApplied) {\r\n        return (\r\n          <Typography\r\n            variant={isJustFilling ? \"body2\" : \"h6\"}\r\n            style={{ color: theme.palette.text.hint }}\r\n          >\r\n            Try changing filter options\r\n          </Typography>\r\n        );\r\n      }\r\n      if (!isJustFilling)\r\n        return (\r\n          <Typography variant=\"h6\" style={{ color: theme.palette.text.hint }}>\r\n            Add some links to get started\r\n          </Typography>\r\n        );\r\n    };\r\n    const _emptyRowContent = () => (\r\n      <TableCell colspan=\"6\">\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n        >\r\n          {!isJustFilling && (\r\n            <Search\r\n              style={{\r\n                color: theme.palette.text.disabled,\r\n                width: 48,\r\n                height: 48,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography\r\n              variant={isJustFilling ? \"h6\" : \"h4\"}\r\n              style={{\r\n                color: isJustFilling\r\n                  ? theme.palette.text.hint\r\n                  : theme.palette.text.primary,\r\n              }}\r\n            >\r\n              No{rowsLength > 0 ? \" more\" : \"\"} links found\r\n            </Typography>\r\n          </Box>\r\n          {_renderHint()}\r\n        </Box>\r\n      </TableCell>\r\n    );\r\n\r\n    const _createRow = () => (\r\n      <TableRow\r\n        className={clsx({\r\n          [classes.tableRow]: true,\r\n          [classes.emptyRow]: true,\r\n        })}\r\n        key={Math.random()}\r\n      >\r\n        {_emptyRowContent()}\r\n      </TableRow>\r\n    );\r\n\r\n    return _createRow();\r\n  };\r\n  const toggleCountryPickerDialog = () => {\r\n    setCountryPickerDialogOpen(!CountryPickerDialogOpen);\r\n  };\r\n  const toggleCountryRenameDialog = () => {\r\n    setCountryRenameDialogOpen(!CountryRenameDialogOpen);\r\n  };\r\n\r\n  const onCountryPickerDialogClosed = (chosenCountryId) => {\r\n    setCountryPickerDialogOpen(false);\r\n\r\n    if (chosenCountryId) {\r\n      setTimeout(() => {\r\n        countriesActions.setCountriesAsAlias(\r\n          [RowActionCountryObject.countryId],\r\n          chosenCountryId\r\n        );\r\n      });\r\n    }\r\n    setRowActionCountryObject(null);\r\n    // Handle chosenCountry\r\n  };\r\n  const onCountryRenameDialogClosed = (newCountryName) => {\r\n    setCountryRenameDialogOpen(false);\r\n    if (\r\n      typeof newCountryName === \"string\" &&\r\n      newCountryName &&\r\n      newCountryName.trim().toLowerCase() !== newCountryName\r\n    ) {\r\n      countriesActions.renameCountry(\r\n        RowActionCountryObject.countryId,\r\n        newCountryName.trim()\r\n      );\r\n    }\r\n    setRowActionCountryObject(null);\r\n    // Handle chosenCountry\r\n  };\r\n  const _createRowActionsButton = (country) => {\r\n    const key = country.countryId;\r\n    return (\r\n      <React.Fragment>\r\n        <IconButton\r\n          size=\"small\"\r\n          aria-haspopup=\"true\"\r\n          onClick={(event) => {\r\n            toggleRowMenuOpen(event, country);\r\n          }}\r\n          aria-controls={`row-actions-menu`}\r\n        >\r\n          <MoreVert />\r\n        </IconButton>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const _attachRowActionsMenu = () => {\r\n    return (\r\n      <Menu\r\n        id={`row-actions-menu`}\r\n        anchorEl={rowMenuAnchorRef}\r\n        // keepMounted\r\n        open={Boolean(rowMenuAnchorRef)}\r\n        onClose={handleRowMenuClose}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            handleRowMenuClose();\r\n            toggleCountryRenameDialog();\r\n          }}\r\n        >\r\n          Rename\r\n        </MenuItem>\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            handleRowMenuClose();\r\n            toggleCountryPickerDialog();\r\n          }}\r\n        >\r\n          Mark as alias of..\r\n        </MenuItem>\r\n        <MenuItem onClick={handleRowMenuClose}>Generate XML</MenuItem>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Table className={classes.table} aria-label=\"custom pagination table\">\r\n        {/* <LinearProgress\r\n        variant=\"indeterminate\"\r\n        color=\"secondary\"\r\n        style={{ height: 2, opacity: IsLoadingResults ? \"0.5\" : 0 }}\r\n      /> */}\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell component=\"th\" colspan=\"6\">\r\n              <Box display=\"flex\" width=\"100%\" position=\"relative\">\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                  <Checkbox\r\n                    size=\"small\"\r\n                    disabled={rows.length < 1}\r\n                    checked={rows.length && SelectedRows.length === rows.length}\r\n                    onChange={selectAllRows}\r\n                  />\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    marginLeft: theme.spacing(1),\r\n                  }}\r\n                >\r\n                  <Tooltip\r\n                    title={`Permanently delete ${SelectedRows.length} links?`}\r\n                  >\r\n                    <IconButton\r\n                      disabled={SelectedRows.length < 1}\r\n                      size=\"small\"\r\n                      onClick={deleteSelectedRows}\r\n                    >\r\n                      <Badge\r\n                        badgeContent={SelectedRows.length}\r\n                        color=\"secondary\"\r\n                      >\r\n                        <Delete />\r\n                      </Badge>\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    marginLeft: theme.spacing(1),\r\n                  }}\r\n                >\r\n                  <MultiFilter\r\n                    disableCountries={true}\r\n                    disableUsers={true}\r\n                    onUserFilterChanged={handleUserFilterChanged}\r\n                    onCountriesChanged={handleCountryFilterChanged}\r\n                    onDateRangeChanged={handleDateFilterChanged}\r\n                  />\r\n                </div>\r\n              </Box>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {isLoadingResults && !hasInheritedRows\r\n            ? [\r\n                ...Array(rowsPerPage !== undefined ? rowsPerPage : 10).keys(),\r\n              ].map((x) => (\r\n                <TableRow key={x} style={{ height: 56 }}>\r\n                  <TableCell width=\"45%\">\r\n                    <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                  </TableCell>\r\n                  <TableCell width=\"27,5%\">\r\n                    <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                  </TableCell>\r\n                  <TableCell width=\"27,5%\" align=\"right\">\r\n                    <Skeleton\r\n                      animation=\"wave\"\r\n                      style={{\r\n                        width: \"75%\",\r\n                        display: \"inline-block\",\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            : rows.map((row, index) => {\r\n                const innerRow = (\r\n                  <React.Fragment>\r\n                    <TableCell width=\"64px\">\r\n                      <Checkbox\r\n                        size=\"small\"\r\n                        checked={SelectedRows.includes(row.threadId)}\r\n                        onChange={(evt) => {\r\n                          onRowSelectionChanged(row.threadId);\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      <Box display=\"inline-flex\" alignItems=\"center\">\r\n                        {row.name.length < 3 && (\r\n                          <Tooltip title=\"Possible alias identified\">\r\n                            <WarningIcon\r\n                              style={{\r\n                                marginRight: theme.spacing(1),\r\n                                width: 18,\r\n                                height: 18,\r\n                                color: \"red\",\r\n                              }}\r\n                            />\r\n                          </Tooltip>\r\n                        )}\r\n                        {row.name}\r\n                      </Box>\r\n                    </TableCell>\r\n\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.aliases && (\r\n                        <Box display=\"flex\" flexDirection=\"column\">\r\n                          <Typography\r\n                            variant=\"caption\"\r\n                            style={{ color: theme.palette.text.hint }}\r\n                          >\r\n                            Aliases\r\n                          </Typography>\r\n                          <Box display=\"inline-flex\">\r\n                            {row.aliases.map((alias) => {\r\n                              return (\r\n                                <div key={alias.countryId}>\r\n                                  <Chip\r\n                                    label={alias.name}\r\n                                    onDelete={() => {\r\n                                      confirm({\r\n                                        title: \"Confirm removing alias  \",\r\n                                        description: `If you proceed, \"${alias.name}\" won't be an alias of \"${row.name}\" and both will be treated as separate countries.`,\r\n                                      }).then(() => {\r\n                                        countriesActions.unmarkCountryAlias(\r\n                                          alias.countryId\r\n                                        );\r\n                                      });\r\n                                    }}\r\n                                    className={classes.countryChip}\r\n                                  />\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </Box>\r\n                        </Box>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box display=\"inline-flex\" alignItems=\"center\">\r\n                        <AssignmentTurnedIn\r\n                          style={{\r\n                            width: 18,\r\n                            height: 18,\r\n                            color: theme.palette.text.hint,\r\n                          }}\r\n                        />\r\n                        <Typography\r\n                          variant=\"body2\"\r\n                          noWrap={true}\r\n                          style={{\r\n                            marginLeft: theme.spacing(1),\r\n                            whiteSpace: \"nowrap\",\r\n                          }}\r\n                        >\r\n                          {row.totalJobs} jobs\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell component=\"th\" scope=\"row\" align=\"right\">\r\n                      {_createRowActionsButton(row)}\r\n                    </TableCell>\r\n                  </React.Fragment>\r\n                );\r\n                const wrapComponent = (\r\n                  <TableRow className={classes.tableRow} key={row.uuid}>\r\n                    {innerRow}\r\n                  </TableRow>\r\n                );\r\n                return wrapComponent;\r\n              })}\r\n          {!IsLoadingResults && renderEmptyRows()}\r\n          {/* Row actions menu */}\r\n          {_attachRowActionsMenu()}\r\n          {/* Row actions menu */}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            {rowsLength > 0 && (\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 8, 10, 25, { label: \"All\", value: -1 }]}\r\n                colSpan={3}\r\n                count={tableData.totalRowsCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { \"aria-label\": \"rows per page\" },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            )}\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n      <RenameDialog\r\n        open={CountryRenameDialogOpen}\r\n        country={RowActionCountryObject}\r\n        onClose={onCountryRenameDialogClosed}\r\n      />\r\n      <CountryPickerDialog\r\n        markAsAlias={RowActionCountryObject}\r\n        open={CountryPickerDialogOpen}\r\n        onClose={onCountryPickerDialogClosed}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CountriesManagementTable;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\ManageUrlsAdmin.jsx",["1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034"],"import {\r\n  Badge,\r\n  Box,\r\n  Checkbox,\r\n  IconButton,\r\n  Link,\r\n  Menu,\r\n  MenuItem,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Delete, Search, Today } from \"@material-ui/icons\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport clsx from \"clsx\";\r\nimport { useConfirm } from \"material-ui-confirm\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport scrapingThreadsActions from \"../../actions/ScrapingThread\";\r\nimport tableActions from \"../../actions/Table\";\r\nimport uiActions from \"../../actions/UI\";\r\nimport ScrapingThreadApi from \"../../api/ScrapingThread\";\r\nimport ManageUrlsHeader from \"../../components/Table/Headers/ManageUrls\";\r\nimport UserAvatar from \"../../components/User/Avatar/ShortLettersAvatar\";\r\nimport ActionTypes from \"../../constants/ActionTypes\";\r\nimport TableNames from \"../../constants/Tables\";\r\nimport { timeSince } from \"../../helpers/time\";\r\nimport TableData from \"../../models/TableData\";\r\nimport scrapingThreadsStore from \"../../store/ScrapingThreads\";\r\nimport tableStore from \"../../store/Tables\";\r\nimport ScrapingThreadStatus from \"../Table/ScrapingThreadStatus\";\r\nimport TablePaginationActions from \"./Pagination\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableContainer: {\r\n    overflowY: \"scroll\",\r\n    overflowX: \"hidden\",\r\n  },\r\n  table: {\r\n    minWidth: 500,\r\n    tableLayout: \"fixed\",\r\n    overflowY: \"auto\",\r\n    overflowX: \"hidden\",\r\n  },\r\n  tableRow: {\r\n    height: 70,\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  tableBody: {},\r\n  emptyRow: {\r\n    height: 70,\r\n    backgroundColor: \"white!important\",\r\n    \"&:first-child td\": {\r\n      paddingTop: \"8rem\",\r\n      paddingBottom: \"8rem\",\r\n    },\r\n  },\r\n\r\n  columnCheckbox: {\r\n    width: 64,\r\n  },\r\n}));\r\n\r\nconst THIS_TABLE_NAME = TableNames.MANAGE_URLS_ADMIN;\r\n\r\nconst ManageUrlsAdminTable = ({ filter }) => {\r\n  const [tableData, setTableData] = useState(\r\n    tableStore.getTableData(THIS_TABLE_NAME)\r\n  );\r\n  const [SelectedRows, setSelectedRows] = useState([]);\r\n  const [DateRange, setDateRange] = useState(null);\r\n  const [RowActionObject, setRowActionObject] = useState(null);\r\n  const [rowMenuAnchorRef, setRowMenuAnchorRef] = React.useState(null);\r\n  const HasTableData = tableData !== undefined;\r\n\r\n  const confirm = useConfirm();\r\n  const rowsPerPage = tableData.rowsPerPage;\r\n  const page = tableData.page;\r\n  const countryFilter = tableData.countryFilter;\r\n  const dateRange = tableData.dateRange;\r\n  let rows = tableData.rows;\r\n  const toggleRowMenuOpen = (event, row) => {\r\n    setRowMenuAnchorRef(event.currentTarget);\r\n    setRowActionObject(row);\r\n  };\r\n\r\n  const handleRowMenuClose = (event) => {\r\n    if (\r\n      rowMenuAnchorRef.current &&\r\n      rowMenuAnchorRef.current.contains(event.target)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setRowMenuAnchorRef(null);\r\n  };\r\n  const IsLoadingResults = tableData.isLoading;\r\n  let hasInheritedRows = false;\r\n  if (IsLoadingResults && tableData.previousTableData) {\r\n    rows = tableData.previousTableData.rows;\r\n    hasInheritedRows = true;\r\n  }\r\n\r\n  const isLoadingResults = tableData ? tableData.isLoading : true;\r\n  const rowsLength = Array.isArray(rows) ? rows.length : 0;\r\n  const classes = useStyles();\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, rowsLength - page * rowsPerPage) +\r\n    (rowsLength > 1 ? 0 : 1);\r\n  const deleteSelectedRows = () => {\r\n    if (SelectedRows.length) {\r\n      confirm({\r\n        description: `Are you sure you want to delete ${SelectedRows.length} links?`,\r\n        title: `Delete ${SelectedRows.length} links`,\r\n      })\r\n        .then(async () => {\r\n          const res = await ScrapingThreadApi.Delete(SelectedRows);\r\n          if (res && res.success) {\r\n            uiActions.showSnackbar(`Links deleted successfully`, \"success\");\r\n            setSelectedRows([]);\r\n            setTimeout(() => {\r\n              syncTableData({});\r\n            });\r\n          }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n  const handleUserFilterChanged = (userFilter) => {\r\n    return;\r\n    //setUserFilter(userFilter);\r\n  };\r\n\r\n  const selectAllRows = (evt) => {\r\n    const checked = evt.target.checked;\r\n    if (!checked) {\r\n      setSelectedRows([]);\r\n    } else if (checked) {\r\n      if (Array.isArray(rows)) {\r\n        setSelectedRows(rows.map((row) => row.trackedUrlId));\r\n      }\r\n    }\r\n  };\r\n  const syncTableData = ({ newPage, newRowsPerPage, newDateRange }) => {\r\n    const _tableData = getTableData();\r\n\r\n    tableActions.createTableData({\r\n      rowsPerPage:\r\n        newRowsPerPage !== undefined ? newRowsPerPage : _tableData.rowsPerPage,\r\n      totalRowsCount: _tableData.totalRowsCount,\r\n      page:\r\n        newRowsPerPage !== -1\r\n          ? newPage !== undefined\r\n            ? newPage\r\n            : _tableData.page\r\n          : 0,\r\n      filter: filter || \"\",\r\n      tableName: THIS_TABLE_NAME,\r\n      previousRowCount:\r\n        _tableData && _tableData.totalRowsCount\r\n          ? _tableData.totalRowsCount\r\n          : undefined,\r\n      dateRange:\r\n        newDateRange !== undefined ? newDateRange : _tableData.dateRange,\r\n    });\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    console.log(\"handleChangePage.newPage\", newPage);\r\n    syncTableData({ newPage });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    syncTableData({ newRowsPerPage, newPage: 0 });\r\n  };\r\n\r\n  /**\r\n   * @type {Object} obj\r\n   * @type {TableData} obj.tableData\r\n   */\r\n  const onTableRowsDataUpdated = ({ tableData }) => {\r\n    if (tableData.tableName === THIS_TABLE_NAME) {\r\n      const foundTable = tableStore.getByTableName(THIS_TABLE_NAME);\r\n      console.log(\"foundTable\", foundTable);\r\n      setTableData(foundTable);\r\n    }\r\n  };\r\n  console.log(\"rendering\", tableData);\r\n\r\n  const onScrapingThreadCreated = () => {\r\n    setTimeout(() => {\r\n      syncTableData({ newPage: 0 });\r\n    });\r\n  };\r\n  const registerEventListeners = () => {\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_CREATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_UPDATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n\r\n    return () => {\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_CREATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_UPDATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n    };\r\n  };\r\n  const onRowSelectionChanged = (id) => {\r\n    console.log(SelectedRows);\r\n    const alreadySelectedIndex = SelectedRows.findIndex((c) => c === id);\r\n    const alreadySelected =\r\n      alreadySelectedIndex !== -1 && alreadySelectedIndex !== false;\r\n    if (alreadySelected) {\r\n      SelectedRows.splice(alreadySelectedIndex, 1);\r\n      setSelectedRows([...SelectedRows]);\r\n    } else {\r\n      setSelectedRows([id, ...SelectedRows]);\r\n    }\r\n  };\r\n  const retryThread = () => {\r\n    let threadId = RowActionObject.trackedUrlId;\r\n    setTimeout(() => {\r\n      scrapingThreadsActions.retryThread(threadId);\r\n    });\r\n  };\r\n  const _attachRowActionsMenu = () => {\r\n    return (\r\n      <Menu\r\n        id={`row-actions-menu`}\r\n        anchorEl={rowMenuAnchorRef}\r\n        // keepMounted\r\n        open={Boolean(rowMenuAnchorRef)}\r\n        onClose={handleRowMenuClose}\r\n      >\r\n        <MenuItem\r\n          // onClick={() => {\r\n          //   handleRowMenuClose();\r\n          //   //toggleCountryRenameDialog();\r\n          // }}\r\n          component={RouterLink}\r\n          to={`/url-details/${RowActionObject.groupId}`}\r\n        >\r\n          View details\r\n        </MenuItem>\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            confirm({\r\n              title: \"Confirm to retry crawling URL?\",\r\n              description:\r\n                \"If you proceed some of the scraped data will be deleted. Make sure you know what you're doing.\",\r\n            }).then(() => {\r\n              retryThread();\r\n              handleRowMenuClose();\r\n            });\r\n\r\n            //toggleCountryPickerDialog();\r\n          }}\r\n        >\r\n          Retry\r\n        </MenuItem>\r\n      </Menu>\r\n    );\r\n  };\r\n  const getTableData = () => {\r\n    return tableStore.getTableData(THIS_TABLE_NAME) || tableData;\r\n  };\r\n  const refreshFunc = () => {\r\n    const _tableData = getTableData();\r\n\r\n    if (\r\n      _tableData.isLoading ||\r\n      parseInt(new Date() / 1000) - _tableData.age < 10\r\n    ) {\r\n      console.log(\"@@@@@ Skipping REFRESH\");\r\n      return;\r\n    }\r\n    syncTableData({});\r\n  };\r\n  useEffect(() => {\r\n    // Create an interval that refreshes the page every X\r\n    const refreshInterval = setInterval(refreshFunc, 5000);\r\n    setTimeout(() => {\r\n      syncTableData({});\r\n    });\r\n\r\n    const revokeEventListeners = registerEventListeners();\r\n\r\n    return () => {\r\n      clearInterval(refreshInterval);\r\n      revokeEventListeners();\r\n    };\r\n  }, []);\r\n\r\n  const handleCountryFilterChanged = (_countryFilter) => {\r\n    syncTableData({ newCountryFilter: _countryFilter });\r\n  };\r\n  const handleDateFilterChanged = (_dateRange) => {\r\n    syncTableData({ newDateRange: _dateRange });\r\n  };\r\n\r\n  const theme = useTheme();\r\n\r\n  const renderEmptyRows = () => {\r\n    if (rowsPerPage === rowsLength) {\r\n      return \"\";\r\n    }\r\n    const isJustFilling = rowsLength > 0;\r\n    const hasFilterApplied =\r\n      tableData.totalRowsCount < tableData.unfilteredRowsCount;\r\n    const _renderHint = () => {\r\n      if (hasFilterApplied) {\r\n        return (\r\n          <Typography\r\n            variant={isJustFilling ? \"body2\" : \"h6\"}\r\n            style={{ color: theme.palette.text.hint }}\r\n          >\r\n            Try changing filter options\r\n          </Typography>\r\n        );\r\n      }\r\n      if (!isJustFilling)\r\n        return (\r\n          <Typography variant=\"h6\" style={{ color: theme.palette.text.hint }}>\r\n            Add some links to get started\r\n          </Typography>\r\n        );\r\n    };\r\n    const _emptyRowContent = () => (\r\n      <TableCell colspan=\"6\">\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n        >\r\n          {!isJustFilling && (\r\n            <Search\r\n              style={{\r\n                color: theme.palette.text.disabled,\r\n                width: 48,\r\n                height: 48,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography\r\n              variant={isJustFilling ? \"h6\" : \"h4\"}\r\n              style={{\r\n                color: isJustFilling\r\n                  ? theme.palette.text.hint\r\n                  : theme.palette.text.primary,\r\n              }}\r\n            >\r\n              No{rowsLength > 0 ? \" more\" : \"\"} links found\r\n            </Typography>\r\n          </Box>\r\n          {_renderHint()}\r\n        </Box>\r\n      </TableCell>\r\n    );\r\n\r\n    const _createRow = () => (\r\n      <TableRow\r\n        className={clsx({\r\n          [classes.tableRow]: true,\r\n          [classes.emptyRow]: true,\r\n        })}\r\n        key={Math.random()}\r\n      >\r\n        {_emptyRowContent()}\r\n      </TableRow>\r\n    );\r\n\r\n    return _createRow();\r\n  };\r\n  const _createRowActionsButton = (row) => {\r\n    const key = row.trackedUrlId;\r\n    return (\r\n      <React.Fragment>\r\n        <IconButton\r\n          key={key}\r\n          size=\"small\"\r\n          aria-haspopup=\"true\"\r\n          onClick={(event) => {\r\n            toggleRowMenuOpen(event, row);\r\n          }}\r\n          aria-controls={`row-actions-menu`}\r\n        >\r\n          <MoreVertIcon />\r\n        </IconButton>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <ManageUrlsHeader\r\n        rows={rows}\r\n        SelectedRows={SelectedRows}\r\n        selectAllRowsFunc={selectAllRows}\r\n        deleteSelectedRowsFunc={deleteSelectedRows}\r\n        refreshFunc={() => {\r\n          syncTableData({ keepCurrentSettings: true });\r\n        }}\r\n        IsLoading={isLoadingResults}\r\n        theme={theme}\r\n      />\r\n      <div className={classes.tableContainer}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          {/* <LinearProgress\r\n        variant=\"indeterminate\"\r\n        color=\"secondary\"\r\n        style={{ height: 2, opacity: IsLoadingResults ? \"0.5\" : 0 }}\r\n      /> */}\r\n          <colgroup>\r\n            <col style={{ width: 64 }} />\r\n            <col style={{ width: \"70%\" }} />\r\n            <col style={{ width: \"15%\" }} />\r\n            <col style={{ width: \"15%\" }} />\r\n            <col style={{ width: 64 }} />\r\n          </colgroup>\r\n          <TableBody className={classes.tableBody}>\r\n            {isLoadingResults && !hasInheritedRows\r\n              ? [\r\n                  ...Array(rowsPerPage !== undefined ? rowsPerPage : 10).keys(),\r\n                ].map((x) => (\r\n                  <TableRow key={x} style={{ height: 56 }}>\r\n                    {/* <TableCell>\r\n                  <Skeleton animation=\"wave\" />\r\n                </TableCell> */}\r\n                    <div></div>\r\n                    <TableCell>\r\n                      <Skeleton animation=\"wave\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton animation=\"wave\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton animation=\"wave\" />\r\n                    </TableCell>\r\n                    <div></div>\r\n                  </TableRow>\r\n                ))\r\n              : rows.map((row, index) => {\r\n                  const innerRow = (\r\n                    <React.Fragment>\r\n                      <TableCell width=\"64px\">\r\n                        <Checkbox\r\n                          size=\"small\"\r\n                          checked={SelectedRows.includes(row.trackedUrlId)}\r\n                          onChange={(evt) => {\r\n                            onRowSelectionChanged(row.trackedUrlId);\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                          <UserAvatar\r\n                            username={row.username}\r\n                            fullname={row.fullname}\r\n                          />\r\n                          <Box\r\n                            display=\"flex\"\r\n                            flexDirection=\"column\"\r\n                            style={{ marginLeft: theme.spacing(1) }}\r\n                          >\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              style={{ color: theme.palette.text.hint }}\r\n                            >\r\n                              {row.username}\r\n                            </Typography>\r\n                            <Link href={row.url} target=\"_blank\">\r\n                              {row.url}\r\n                            </Link>\r\n                          </Box>\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell style={{ width: 160 }} align=\"left\">\r\n                        <Box\r\n                          display=\"inline-flex\"\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"start\"\r\n                        >\r\n                          <Today\r\n                            style={{\r\n                              width: 18,\r\n                              height: 18,\r\n                              color: theme.palette.text.hint,\r\n                            }}\r\n                            //style={{ color: theme.palette.text.hint }}\r\n                          />\r\n                          <Typography\r\n                            variant=\"body2\"\r\n                            noWrap={true}\r\n                            style={{ marginLeft: theme.spacing(1) }}\r\n                          >\r\n                            {timeSince(row.age)}\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell style={{ width: 160 }} align=\"right\">\r\n                        <ScrapingThreadStatus row={row} />\r\n                      </TableCell>\r\n                      <TableCell component=\"th\" scope=\"row\" align=\"right\">\r\n                        {_createRowActionsButton(row)}\r\n                      </TableCell>\r\n                    </React.Fragment>\r\n                  );\r\n                  const wrapComponent = (\r\n                    <TableRow className={classes.tableRow} key={row.uuid}>\r\n                      {innerRow}\r\n                    </TableRow>\r\n                  );\r\n                  return wrapComponent;\r\n                })}\r\n            {!IsLoadingResults && renderEmptyRows()}\r\n            {RowActionObject && _attachRowActionsMenu()}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      {rowsLength > 0 && (\r\n        <div>\r\n          <TablePagination\r\n            style={{ width: \"100%\", float: \"right\" }}\r\n            rowsPerPageOptions={[5, 8, 10, 25, 50, 100]}\r\n            colSpan={3}\r\n            count={tableData.totalRowsCount}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            SelectProps={{\r\n              inputProps: { \"aria-label\": \"rows per page\" },\r\n              native: true,\r\n            }}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            ActionsComponent={TablePaginationActions}\r\n          />\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ManageUrlsAdminTable;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Table\\ScrapingThreadStatus.jsx",["1035","1036","1037","1038","1039","1040","1041","1042"],"import { Box, Tooltip, Typography } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport {\n  BugReport,\n  DoneAll,\n  ErrorOutline,\n  HourglassEmpty,\n} from \"@material-ui/icons\";\nimport React from \"react\";\nimport { Statuses } from \"../../constants/CrawlerThreadsStatuses\";\n\n/**\n *\n * @param {Object} param0\n * @param {ScrapingThread} param0.row\n */\nconst ScrapingThreadTableStatus = ({ row }) => {\n  const theme = useTheme();\n\n  let icon = undefined;\n  let innerText = undefined;\n  let caption = undefined;\n  let status = Statuses.QUEUED;\n\n  const renderGeneralStatus = () => {\n    if (row.crawler_threads_cnt === 0) {\n      return \"Scheduled for crawling\";\n    }\n    let ret = `${row.total_scraped_jobs} jobs`;\n    return ret;\n  };\n  const renderCrawlPlan = () => {\n    let ret = \"\";\n    if (row.crawler_threads_cnt === 0) {\n      ret = \"\";\n    } else {\n      ret = `Crawled ${row.crawler_threads_cnt} times`;\n    }\n    return ret;\n  };\n\n  return (\n    <Box\n      alignItems=\"center\"\n      flexWrap=\"nowrap\"\n      display=\"flex\"\n      justifyContent=\"flex-end\"\n    >\n      <Box display=\"flex\" flexDirection=\"column\" mr={theme.spacing(1)}>\n        <Typography\n          variant=\"overline\"\n          noWrap={true}\n          style={{\n            marginLeft: theme.spacing(1),\n            whiteSpace: \"nowrap\",\n            lineHeight: \"1rem\",\n          }}\n        >\n          {renderGeneralStatus()}\n        </Typography>\n        <Typography\n          variant=\"caption\"\n          style={{ color: theme.palette.text.hint, whiteSpace: \"nowrap\" }}\n        >\n          {renderCrawlPlan()}\n        </Typography>\n      </Box>\n      {icon}\n    </Box>\n  );\n};\n\nexport default ScrapingThreadTableStatus;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Filters\\MultiFilter.jsx",["1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { isFunction } from \"../../helpers/utils\";\r\nimport {\r\n  DateRangePicker,\r\n  DateRange,\r\n  DefinedRange,\r\n} from \"materialui-daterange-picker\";\r\nimport ClearAllIcon from \"@material-ui/icons/ClearAll\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport userFilterStore from \"../../store/UserFilter\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport {\r\n  Menu,\r\n  Button,\r\n  IconButton,\r\n  ButtonGroup,\r\n  Divider,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Close,\r\n  Public,\r\n  FilterList as FilterListIcon,\r\n  KeyboardArrowDown as KeyboardArrowDownIcon,\r\n  FastForward,\r\n  Search,\r\n} from \"@material-ui/icons\";\r\nimport DateRanges from \"../../constants/DateRanges\";\r\nimport countryFilterStore from \"../../store/CountryFilter\";\r\nimport ActionTypes from \"../../constants/ActionTypes\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  select: {\r\n    \"&:before\": {\r\n      border: \"none\",\r\n    },\r\n    \"&:after\": {\r\n      border: \"none\",\r\n    },\r\n    \"&:focus\": {\r\n      border: \"none\",\r\n      outline: \"none\",\r\n    },\r\n    \"& .MuiSelect-select \": {\r\n      backgroundColor: \"transparent!important\",\r\n      border: \"none\",\r\n    },\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  selectedCountriesContainer: {\r\n    display: \"inline-flex\",\r\n    maxWidth: 520,\r\n    flexWrap: \"nowrap\",\r\n    overflow: \"hidden\",\r\n  },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 7 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction getStyles(name, personName, theme) {\r\n  return {\r\n    fontWeight:\r\n      personName.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nfunction MultiFilter({\r\n  disableCountries,\r\n  disableUsers,\r\n  disableDateRange,\r\n  onCountriesChanged,\r\n  onDateRangeChanged,\r\n  onUserFilterChanged,\r\n  mini,\r\n}) {\r\n  const [DateFilterOpen, setDateFilterOpen] = useState(false);\r\n  const [SelectedCountries, setSelectedCountries] = useState([]);\r\n  const [SelectedUsers, setSelectedUsers] = useState([]);\r\n\r\n  const [Countries, setCountries] = useState(\r\n    !disableCountries && countryFilterStore.get()\r\n  );\r\n  const [Users, setUsers] = useState(!disableUsers && userFilterStore.get());\r\n\r\n  const [DateRange, setDateRange] = useState(null);\r\n\r\n  const anchorRef = React.useRef(null);\r\n  const usersAnchorRef = React.useRef(null);\r\n  const [CountryMenuOpen, setCountryMenuOpen] = React.useState(false);\r\n  const [UserMenuOpen, setUserMenuOpen] = React.useState(false);\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [personName, setPersonName] = React.useState([]);\r\n\r\n  const closeCountriesMenu = (evt) => {\r\n    if (anchorRef.current && anchorRef.current.contains(evt.target)) {\r\n      return;\r\n    }\r\n    return setCountryMenuOpen(false);\r\n  };\r\n  const closeUserMenu = (evt) => {\r\n    if (usersAnchorRef.current && usersAnchorRef.current.contains(evt.target)) {\r\n      return;\r\n    }\r\n    return setUserMenuOpen(false);\r\n  };\r\n  const toggleCountriesMenu = (evt) => {\r\n    setCountryMenuOpen(true);\r\n  };\r\n  const toggleUsersMenu = (evt) => {\r\n    setUserMenuOpen(true);\r\n  };\r\n  const toggleDateRangeFilter = () => {\r\n    setDateFilterOpen(!DateFilterOpen);\r\n  };\r\n\r\n  //   const renderSelectedCountries = () => {\r\n  //     return SelectedCountries.map((value) => (\r\n  //       <Chip\r\n  //         variant=\"outlined\"\r\n  //         key={value}\r\n  //         label={value}\r\n  //         icon={<Close />}\r\n  //         onClick={() => {\r\n  //           removeCountry(value);\r\n  //         }}\r\n  //         className={classes.chip}\r\n  //       />\r\n  //     ));\r\n  //   };\r\n\r\n  //   const countriesContainerRef = useRef(null);\r\n  //   const findElementsInViewCount = () => {\r\n  //     const containerElement = countriesContainerRef.current;\r\n  //     const visibleWidth = containerElement.clientWidth;\r\n  //     // Accumulate elemnts width until we overflow\r\n  //     let accumulatedWidth = 0;\r\n  //     let numOfElementsInView = 0;\r\n\r\n  //     for (const element of containerElement.childNodes) {\r\n  //       accumulatedWidth += element.offsetWidth;\r\n  //       if (accumulatedWidth >= visibleWidth) {\r\n  //         break;\r\n  //       }\r\n  //       numOfElementsInView++;\r\n  //     }\r\n\r\n  //     return numOfElementsInView;\r\n  //   };\r\n  //   const hideNonVisibleChips = () => {\r\n  //     const numOfVisibleElements = findElementsInViewCount();\r\n  //     const containerElement = countriesContainerRef.current;\r\n  //     let childrenLen = containerElement.children.length;\r\n  //     console.log(\"skipping\", numOfVisibleElements, \"vs \", childrenLen);\r\n  //     let gotTruncated = false;\r\n  //     while (containerElement.children.length > numOfVisibleElements) {\r\n  //       gotTruncated = true;\r\n  //       containerElement.removeChild(\r\n  //         containerElement.children[numOfVisibleElements]\r\n  //       );\r\n  //     }\r\n  //   };\r\n\r\n  const onCountryFilterSync = () => {\r\n    setCountries(countryFilterStore.get());\r\n  };\r\n  const onUserFilterSync = () => {\r\n    setUsers(userFilterStore.get());\r\n  };\r\n\r\n  const bindListeners = () => {\r\n    countryFilterStore.addChangeListener(\r\n      ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\r\n      onCountryFilterSync\r\n    );\r\n    userFilterStore.addChangeListener(\r\n      ActionTypes.UserFilter.USER_FILTER_SYNC,\r\n      onUserFilterSync\r\n    );\r\n\r\n    return () => {\r\n      countryFilterStore.removeChangeListener(\r\n        ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\r\n        onCountryFilterSync\r\n      );\r\n      userFilterStore.removeChangeListener(\r\n        ActionTypes.UserFilter.USER_FILTER_SYNC,\r\n        onUserFilterSync\r\n      );\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    return bindListeners();\r\n  });\r\n  const hasFilterForCountry = (country) => {\r\n    return SelectedCountries.includes(country);\r\n  };\r\n  const hasFilterForUser = (userId) => {\r\n    return SelectedUsers.includes(userId);\r\n  };\r\n  const toggleCountry = (name) => {\r\n    const countryIndex = SelectedCountries.indexOf(name);\r\n    if (countryIndex !== -1) {\r\n      const clone = [...SelectedCountries];\r\n      clone.splice(countryIndex, 1);\r\n      handleCountryFilterChanged(clone);\r\n    } else {\r\n      handleCountryFilterChanged([...SelectedCountries, name]);\r\n    }\r\n  };\r\n  const toggleUserFilter = (name) => {\r\n    const userIdIndex = SelectedUsers.indexOf(name);\r\n    if (userIdIndex !== -1) {\r\n      const clone = [...SelectedUsers];\r\n      clone.splice(userIdIndex, 1);\r\n      handleUsersFilterChanged(clone);\r\n    } else {\r\n      handleUsersFilterChanged([...SelectedUsers, name]);\r\n    }\r\n  };\r\n\r\n  const clearCountriesFilter = () => {\r\n    handleCountryFilterChanged([]);\r\n    setTimeout(() => {\r\n      setCountryMenuOpen(false);\r\n    });\r\n  };\r\n  const clearUsersFilter = () => {\r\n    handleUsersFilterChanged([]);\r\n    setTimeout(() => {\r\n      setUserMenuOpen(false);\r\n    });\r\n  };\r\n  const handleChangeDateRange = (dateRange) => {\r\n    if (!dateRange.startDate && !dateRange.endDate) {\r\n      setDateRange(null);\r\n    } else {\r\n      console.log(dateRange);\r\n      setDateRange(dateRange);\r\n    }\r\n\r\n    if (isFunction(onDateRangeChanged)) {\r\n      onDateRangeChanged(dateRange);\r\n    }\r\n  };\r\n\r\n  const handleCountryFilterChanged = (selectedCountries) => {\r\n    setSelectedCountries(selectedCountries);\r\n    if (isFunction(onCountriesChanged)) {\r\n      onCountriesChanged(selectedCountries);\r\n    }\r\n  };\r\n  const handleUsersFilterChanged = (selectedUsers) => {\r\n    setSelectedUsers(selectedUsers);\r\n    if (isFunction(onUserFilterChanged)) {\r\n      onUserFilterChanged(selectedUsers);\r\n    }\r\n  };\r\n\r\n  const renderFilteringDateValue = () => {\r\n    const def = \"Filter by date\";\r\n    if (DateRange) {\r\n      const { startDate, endDate, label } = DateRange;\r\n\r\n      if (label) {\r\n        return label;\r\n      }\r\n      let _startDateText = \"\";\r\n      if (startDate) {\r\n        _startDateText = new Intl.DateTimeFormat(\"en\").format(startDate);\r\n      }\r\n      let _endDateText = \"\";\r\n      if (endDate) {\r\n        _endDateText = new Intl.DateTimeFormat(\"en\").format(endDate);\r\n      }\r\n      return (\r\n        <React.Fragment>\r\n          {_startDateText}\r\n          {_endDateText && (\r\n            <FastForward\r\n              style={{\r\n                width: 14,\r\n                height: 14,\r\n                color: theme.palette.text.disabled,\r\n                marginLeft: 4,\r\n                marginRight: 4,\r\n              }}\r\n            />\r\n          )}\r\n          {_endDateText}\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    return def;\r\n  };\r\n\r\n  const renderUserButton = () => {};\r\n  return (\r\n    <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\r\n      <div style={{ postiion: \"relative\" }}>\r\n        <div style={{ position: \"fixed\", zIndex: 129831298319 }}>\r\n          <DateRangePicker\r\n            open={DateFilterOpen}\r\n            definedRanges={DateRanges}\r\n            toggle={toggleDateRangeFilter}\r\n            onChange={handleChangeDateRange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <ButtonGroup\r\n        variant={!mini ? \"outlined\" : \"text\"}\r\n        // style={{ marginLeft: theme.spacing(1) }}\r\n      >\r\n        <Button\r\n          startIcon={\r\n            !mini && (\r\n              <FilterListIcon style={{ color: theme.palette.text.disabled }} />\r\n            )\r\n          }\r\n          endIcon={!mini && <KeyboardArrowDownIcon fontSize=\"small\" />}\r\n          onClick={toggleDateRangeFilter}\r\n        >\r\n          {!mini ? (\r\n            renderFilteringDateValue()\r\n          ) : (\r\n            <FilterListIcon style={{ color: theme.palette.text.disabled }} />\r\n          )}\r\n        </Button>\r\n\r\n        {!disableUsers &&\r\n          (Users ? (\r\n            <Button\r\n              aria-controls=\"users-menu\"\r\n              aria-haspopup=\"true\"\r\n              onClick={toggleUsersMenu}\r\n              ref={usersAnchorRef}\r\n              startIcon={\r\n                !mini && (\r\n                  <PersonIcon\r\n                    style={{ color: theme.palette.text.disabled }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                )\r\n              }\r\n              endIcon={!mini && <Search fontSize=\"small\" />}\r\n            >\r\n              {!mini ? (\r\n                SelectedUsers.length > 0 ? (\r\n                  `Within ${SelectedUsers.length} users`\r\n                ) : (\r\n                  \"Users\"\r\n                )\r\n              ) : (\r\n                <PersonIcon\r\n                  style={{ color: theme.palette.text.disabled }}\r\n                  fontSize=\"small\"\r\n                />\r\n              )}\r\n            </Button>\r\n          ) : (\r\n            <Button variant=\"outlined\">\r\n              <Skeleton\r\n                variant=\"rect\"\r\n                style={{ padding: 4, width: 124 }}\r\n                animation=\"wave\"\r\n              />\r\n            </Button>\r\n          ))}\r\n      </ButtonGroup>\r\n\r\n      <Menu\r\n        id=\"users-menu\"\r\n        open={UserMenuOpen}\r\n        PaperProps={MenuProps.PaperProps}\r\n        keepMounted\r\n        onClose={closeUserMenu}\r\n        anchorEl={usersAnchorRef.current}\r\n        style={{ paddingTop: 0 }}\r\n      >\r\n        <MenuItem button onClick={clearUsersFilter}>\r\n          <Button\r\n            disableRipple={true}\r\n            disableFocusRipple={true}\r\n            disableTouchRipple={true}\r\n            variant=\"small\"\r\n            startIcon={<ClearAllIcon />}\r\n          >\r\n            Clear and show all\r\n          </Button>\r\n        </MenuItem>\r\n        <Divider />\r\n\r\n        {Users &&\r\n          Object.keys(Users).map((userId) => (\r\n            <MenuItem\r\n              alignItems=\"center\"\r\n              key={userId}\r\n              onClick={() => {\r\n                toggleUserFilter(userId);\r\n              }}\r\n              value={userId}\r\n            >\r\n              <Checkbox\r\n                color=\"secondary\"\r\n                checked={hasFilterForUser(userId)}\r\n                size=\"small\"\r\n                disableRipple\r\n              />\r\n              {Users[userId]}\r\n            </MenuItem>\r\n          ))}\r\n      </Menu>\r\n\r\n      <Menu\r\n        id=\"countries-menu\"\r\n        open={CountryMenuOpen}\r\n        PaperProps={MenuProps.PaperProps}\r\n        keepMounted\r\n        onClose={closeCountriesMenu}\r\n        anchorEl={anchorRef.current}\r\n        style={{ paddingTop: 0 }}\r\n      >\r\n        <MenuItem\r\n          button\r\n          onClick={clearCountriesFilter}\r\n          // disabled={SelectedCountries.length < 1}\r\n        >\r\n          <Button\r\n            disableRipple={true}\r\n            disableFocusRipple={true}\r\n            disableTouchRipple={true}\r\n            variant=\"small\"\r\n            startIcon={<ClearAllIcon />}\r\n          >\r\n            Clear and show all\r\n          </Button>\r\n        </MenuItem>\r\n        <Divider />\r\n\r\n        {Array.isArray(Countries) &&\r\n          Countries.map((country) => (\r\n            <MenuItem\r\n              alignItems=\"center\"\r\n              key={country.countryId}\r\n              onClick={() => {\r\n                toggleCountry(country.countryId);\r\n              }}\r\n              value={country.countryId}\r\n            >\r\n              <Checkbox\r\n                color=\"secondary\"\r\n                checked={hasFilterForCountry(country.countryId)}\r\n                size=\"small\"\r\n                disableRipple\r\n              />\r\n              {country.name}\r\n            </MenuItem>\r\n          ))}\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\nexport default React.memo(MultiFilter);\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\actions\\Countries.js",["1063"],"import SocketEvents from \"../constants/SocketEvents\";\nimport { sendMessage } from \"../socket\";\n/**\n * @param {number[]} countryIds\n */\nconst setCountriesAsAlias = (countryIds, parentCountryId) => {\n  sendMessage(SocketEvents.SET_COUNTRIES_AS_ALIAS, {\n    countryIds,\n    parentCountryId,\n  });\n};\n\nconst unmarkCountryAlias = (countryId) => {\n  sendMessage(SocketEvents.UNMARK_COUNTRY_ALIAS, countryId);\n};\n\nconst renameCountry = (countryId, countryName) => {\n  sendMessage(SocketEvents.RENAME_COUNTRY, { countryId, name: countryName });\n};\nexport default { unmarkCountryAlias, setCountriesAsAlias, renameCountry };\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Scraper.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Dialogs\\Rename.jsx",["1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077"],"import React, { useState, useEffect } from \"react\";\nimport ActionTypes from \"../../constants/ActionTypes\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport LanguageIcon from \"@material-ui/icons/Language\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { blue } from \"@material-ui/core/colors\";\nimport countriesStore from \"../../store/CountryFilter\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Country from \"../../models/Country\";\nimport {\n  DialogActions,\n  TextField,\n  DialogContent,\n  DialogContentText,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600],\n  },\n  skeleton: {\n    height: 64,\n  },\n});\n\nexport default function RenameDialog({ open, onClose, country }) {\n  const [CountryNameValue, setCountryNameValue] = useState(\n    country && country.name\n  );\n  const [Countries, setCountries] = useState(countriesStore.get());\n  const classes = useStyles();\n  const originalValue = country && country.name;\n  const handleClose = () => {\n    onClose(CountryNameValue);\n  };\n  const onCountriesUpdated = () => {\n    setCountries(countriesStore.get());\n  };\n  useEffect(() => {\n    countriesStore.addChangeListener(\n      ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\n      onCountriesUpdated\n    );\n\n    return () => {\n      countriesStore.removeChangeListener(\n        ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\n        onCountriesUpdated\n      );\n    };\n  });\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    >\n      <DialogTitle id=\"simple-dialog-title\">\n        {`Rename ${originalValue}`}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Warning: Country names are parsed literally from Job Schemas. Edit the\n          name only if you believe that {originalValue} is not a standard\n          country name found within the majority of these scraped schemas.\n        </DialogContentText>\n        <TextField\n          fullWidth={true}\n          placeholder={`Rename ${originalValue} to something else...`}\n          defaultValue={originalValue}\n          onChange={(event) => {\n            setCountryNameValue(event.target.value);\n          }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button onClick={handleClose} color=\"secondary\" autoFocus>\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Dialogs\\CountryPicker.jsx",["1078","1079","1080","1081","1082","1083","1084","1085"],"import React, { useState, useEffect } from \"react\";\nimport ActionTypes from \"../../constants/ActionTypes\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport LanguageIcon from \"@material-ui/icons/Language\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { blue } from \"@material-ui/core/colors\";\nimport countriesStore from \"../../store/CountryFilter\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Country from \"../../models/Country\";\n\nconst useStyles = makeStyles({\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600],\n  },\n  skeleton: {\n    height: 64,\n  },\n});\n\nexport default function CountryPickerDialog({ open, onClose, markAsAlias }) {\n  console.log(\"markAsAlias \", markAsAlias);\n  /**\n   * @type {Country}\n   */\n  const countryTarget = markAsAlias;\n  const [selectedValue, setSelectedValue] = React.useState(null);\n\n  const handleClose = (value) => {\n    onClose(value);\n  };\n  const [Countries, setCountries] = useState(countriesStore.get());\n  const classes = useStyles();\n\n  const handleListItemClick = (value) => {\n    handleClose(value);\n  };\n\n  const onCountriesUpdated = () => {\n    setCountries(countriesStore.get());\n  };\n  useEffect(() => {\n    countriesStore.addChangeListener(\n      ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\n      onCountriesUpdated\n    );\n\n    return () => {\n      countriesStore.removeChangeListener(\n        ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\n        onCountriesUpdated\n      );\n    };\n  });\n  const renderSkeletons = () => {\n    return [...Array(10).keys()].map((index) => {\n      return (\n        <Skeleton className={classes.skeleton} key={\"skeleton-\" + index} />\n      );\n    });\n  };\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    >\n      <DialogTitle id=\"simple-dialog-title\">\n        Mark {countryTarget ? `\"${countryTarget.name}\"` : \"\"} as alias of...\n      </DialogTitle>\n      <List>\n        {Countries\n          ? Countries.map(({ name, countryId }) => (\n              <ListItem\n                button\n                onClick={() => handleListItemClick(countryId)}\n                key={countryId}\n              >\n                <ListItemAvatar>\n                  <Avatar className={classes.avatar}>\n                    <LanguageIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={name} />\n              </ListItem>\n            ))\n          : renderSkeletons()}\n\n        {/* <ListItem\n            autoFocus\n            button\n            onClick={() => handleListItemClick(\"addAccount\")}\n          >\n            <ListItemAvatar>\n              <Avatar>\n                <AddIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary=\"Add account\" />\n          </ListItem> */}\n      </List>\n    </Dialog>\n  );\n}\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Dialogs\\EditHostParsingRegex.jsx",["1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100"],"import React, { useState, useEffect } from \"react\";\nimport ActionTypes from \"../../constants/ActionTypes\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport LanguageIcon from \"@material-ui/icons/Language\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { blue } from \"@material-ui/core/colors\";\nimport countriesStore from \"../../store/CountryFilter\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Country from \"../../models/Country\";\nimport {\n  DialogActions,\n  TextField,\n  DialogContent,\n  Box,\n  DialogContentText,\n} from \"@material-ui/core\";\nimport { Warning } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles({\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600],\n  },\n  skeleton: {\n    height: 64,\n  },\n});\n\nexport default function EditHostParsingRegexDialog({\n  open,\n  onClose,\n  host,\n  originalRegex,\n}) {\n  const originalValue = originalRegex;\n\n  const [RegexInputValue, setRegexInputValue] = useState(originalValue);\n\n  const classes = useStyles();\n  const handleClose = (passValue = true) => {\n    onClose(passValue ? (RegexInputValue || \"\").trim() : undefined);\n  };\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby=\"assign-regex-title\"\n      open={open}\n    >\n      <DialogTitle id=\"assign-regex-title\">\n        {`Edit job-link parsing regex for ${host}`}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"assign-regex-contenttext\">\n          Change the way the bot parses links from \"{host}\" to lookup for pages\n          containing jobs.\n          <Box\n            display=\"flex\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            style={{ marginTop: 8 }}\n          >\n            <Warning style={{ color: \"orange\", marginRight: 8 }} />\n            <Typography variant=\"overline\">Proceed with caution</Typography>\n          </Box>\n        </DialogContentText>\n        <TextField\n          fullWidth={true}\n          placeholder={`Change ${originalValue} to something else...`}\n          defaultValue={originalValue}\n          onChange={(event) => {\n            setRegexInputValue(event.target.value);\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              handleClose();\n            }\n          }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            handleClose(false);\n          }}\n        >\n          Cancel\n        </Button>\n        <Button onClick={handleClose} color=\"secondary\" autoFocus>\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Table\\MultifunctionalHeading.jsx",["1101","1102"],"import {\n  TableHead,\n  TableRow,\n  TableCell,\n  TableSortLabel,\n  Checkbox,\n} from \"@material-ui/core\";\n\nimport React from \"react\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\n\n// Exmaple of columns\n\nlet columnExample = {\n  name: \"dessert\",\n  sortable: true,\n  width: \"25%\",\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nconst MultifunctionalTableHeading = ({\n  columns,\n  onCheckedChanged,\n  onSortChanged,\n  sort,\n  allRowsChecked = false,\n  disableChecker = false,\n}) => {\n  const classes = useStyles();\n  return (\n    <TableHead>\n      <TableRow>\n        {!disableChecker && (\n          <TableCell>\n            <Checkbox\n              size=\"small\"\n              disabled={disableChecker}\n              checked={allRowsChecked}\n              onChange={(event) => {\n                onCheckedChanged(event.target.checked);\n              }}\n            />\n          </TableCell>\n        )}\n        {columns.map(\n          ({\n            name,\n            label,\n            width = \"auto\",\n            sortable = true,\n            align = \"left\",\n          }) => {\n            const thisColumnSort =\n              sort && sort.name === name ? sort.sort : \"asc\";\n            const isActive = sort && sort.name === name;\n            return (\n              <TableCell width={width} align={align}>\n                <TableSortLabel\n                  active={isActive}\n                  direction={thisColumnSort}\n                  hideSortIcon={!isActive}\n                  onClick={() => {\n                    if (!sortable) {\n                      return;\n                    }\n                    onSortChanged({\n                      name: name,\n                      sort: thisColumnSort === \"asc\" ? \"desc\" : \"asc\",\n                    });\n                  }}\n                >\n                  {label}\n                  {isActive && sortable ? (\n                    <span className={classes.visuallyHidden}>\n                      {sort === \"desc\"\n                        ? \"sorted descending\"\n                        : \"sorted ascending\"}\n                    </span>\n                  ) : null}\n                </TableSortLabel>\n              </TableCell>\n            );\n          }\n        )}\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default React.memo(MultifunctionalTableHeading);\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\helpers\\url.js",["1103"],"  const parseHostname = (url) => {\n    if (!url) {\n      return null;\n    }\n    try {\n      const host_parts = new URL(url).hostname.split(\".\");\n      const host = [\n        host_parts[host_parts.length - 2],\n        host_parts[host_parts.length - 1],\n      ].join(\".\");\n      return host;\n    } catch (e) {\n      return null;\n    }\n  };\n\nexport default { parseHostname };\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\styles\\tables.js",[],["1104","1105"],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Table\\Headers\\ManageUrls.js",["1106","1107"],"import {\n  Badge,\n  Box,\n  Checkbox,\n  CircularProgress,\n  IconButton,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Delete, Refresh } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    width: \"100%\",\n    display: \"flex\",\n  },\n}));\n\nconst ManageUrlsHeader = ({\n  rows,\n  SelectedRows,\n  IsLoading,\n  selectAllRowsFunc: selectAllRows,\n  deleteSelectedRowsFunc: deleteSelectedRows,\n  refreshFunc,\n  theme,\n}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Box display=\"flex\" width=\"100%\" position=\"relative\" alignItems=\"center\">\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Checkbox\n            size=\"small\"\n            disabled={rows.length < 1}\n            checked={rows.length && SelectedRows.length === rows.length}\n            onChange={selectAllRows}\n          />\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            marginLeft: theme.spacing(1),\n          }}\n        >\n          <Tooltip title={`Permanently delete ${SelectedRows.length} links?`}>\n            <IconButton\n              disabled={SelectedRows.length < 1}\n              size=\"small\"\n              onClick={deleteSelectedRows}\n            >\n              <Badge badgeContent={SelectedRows.length} color=\"secondary\">\n                <Delete />\n              </Badge>\n            </IconButton>\n          </Tooltip>\n        </div>\n      </Box>\n\n      <div\n        style={{\n          justifyContent: \"flex-end\",\n          display: \"flex\",\n          position: \"relative\",\n          alignItems: \"center\",\n          width: 32,\n          height: 32,\n        }}\n      >\n        <div\n          style={{\n            position: \"absolute\",\n            justifyContent: \"center\",\n            display: \"flex\",\n\n            alignItems: \"center\",\n            right: 0,\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        >\n          <motion.div\n            initial={{\n              scale: IsLoading ? 0 : 1,\n            }}\n            animate={{\n              scale: IsLoading ? 1 : 0,\n              opacity: IsLoading ? 1 : 0,\n            }}\n            transition={\n              {\n                // type: \"spring\",\n              }\n            }\n          >\n            <CircularProgress\n              style={{ width: 24, height: 24 }}\n              color=\"secondary\"\n            />\n          </motion.div>\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            right: 0,\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        >\n          <motion.div\n            initial={{\n              scale: IsLoading ? 1 : 0,\n            }}\n            animate={{\n              scale: IsLoading ? 0 : 1,\n              opacity: IsLoading ? 0 : 1,\n            }}\n            transition={\n              {\n                //duration: 1,\n                //type: \"spring\",\n              }\n            }\n          >\n            <Tooltip title=\"Refresh the page results\">\n              <IconButton\n                size=\"small\"\n                onClick={refreshFunc}\n                disabled={IsLoading}\n              >\n                <Refresh />\n              </IconButton>\n            </Tooltip>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n\n    /* <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  marginLeft: theme.spacing(1),\n                }}\n              >\n                <MultiFilter\n                  Countries={tableData.availableCountries}\n                  onCountriesChanged={handleCountryFilterChanged}\n                  onDateRangeChanged={handleDateFilterChanged}\n                />\n              </div> */\n  );\n};\n\nexport default ManageUrlsHeader;\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Filters\\DateFilter.jsx",["1108","1109","1110","1111"],"import { makeStyles, useTheme } from \"@material-ui/core/styles\";\n\nimport { IconButton } from \"@material-ui/core\";\nimport { FastForward, FilterList as FilterListIcon } from \"@material-ui/icons\";\nimport { DateRangePicker } from \"materialui-daterange-picker\";\nimport React, { useEffect, useState } from \"react\";\nimport DateRanges from \"../../constants/DateRanges\";\nimport { isFunction } from \"../../helpers/utils\";\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    \"&:before\": {\n      border: \"none\",\n    },\n    \"&:after\": {\n      border: \"none\",\n    },\n    \"&:focus\": {\n      border: \"none\",\n      outline: \"none\",\n    },\n    \"& .MuiSelect-select \": {\n      backgroundColor: \"transparent!important\",\n      border: \"none\",\n    },\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  chip: {\n    margin: 2,\n  },\n  noLabel: {\n    marginTop: theme.spacing(3),\n  },\n  selectedCountriesContainer: {\n    display: \"inline-flex\",\n    maxWidth: 520,\n    flexWrap: \"nowrap\",\n    overflow: \"hidden\",\n  },\n}));\n\nfunction DateFilter({ onDateRangeChanged }) {\n  const [DateFilterOpen, setDateFilterOpen] = useState(false);\n\n  const [DateRange, setDateRange] = useState(null);\n\n  const anchorRef = React.useRef(null);\n  const usersAnchorRef = React.useRef(null);\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const toggleDateRangeFilter = () => {\n    setDateFilterOpen(!DateFilterOpen);\n  };\n\n  const bindListeners = () => {};\n\n  useEffect(() => {\n    return bindListeners();\n  });\n\n  const handleChangeDateRange = (dateRange) => {\n    if (!dateRange.startDate && !dateRange.endDate) {\n      setDateRange(null);\n    } else {\n      console.log(dateRange);\n      setDateRange(dateRange);\n    }\n\n    if (isFunction(onDateRangeChanged)) {\n      onDateRangeChanged(dateRange);\n    }\n  };\n\n  const renderFilteringDateValue = () => {\n    const def = \"Filter by date\";\n    if (DateRange) {\n      const { startDate, endDate, label } = DateRange;\n\n      if (label) {\n        return label;\n      }\n      let _startDateText = \"\";\n      if (startDate) {\n        _startDateText = new Intl.DateTimeFormat(\"en\").format(startDate);\n      }\n      let _endDateText = \"\";\n      if (endDate) {\n        _endDateText = new Intl.DateTimeFormat(\"en\").format(endDate);\n      }\n      return (\n        <React.Fragment>\n          {_startDateText}\n          {_endDateText && (\n            <FastForward\n              style={{\n                width: 14,\n                height: 14,\n                color: theme.palette.text.disabled,\n                marginLeft: 4,\n                marginRight: 4,\n              }}\n            />\n          )}\n          {_endDateText}\n        </React.Fragment>\n      );\n    }\n\n    return def;\n  };\n\n  return (\n    <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\n      <div style={{ postiion: \"relative\" }}>\n        <div style={{ position: \"fixed\", zIndex: 129831298319 }}>\n          <DateRangePicker\n            open={DateFilterOpen}\n            definedRanges={DateRanges}\n            toggle={toggleDateRangeFilter}\n            onChange={handleChangeDateRange}\n          />\n        </div>\n      </div>\n\n      <IconButton size=\"small\" onClick={toggleDateRangeFilter}>\n        <FilterListIcon style={{ color: theme.palette.text.disabled }} />\n      </IconButton>\n    </div>\n  );\n}\nexport default React.memo(DateFilter);\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Filters\\UserFilter.jsx",["1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137","1138"],"import React, { useState, useRef, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { isFunction } from \"../../helpers/utils\";\nimport {\n  DateRangePicker,\n  DateRange,\n  DefinedRange,\n} from \"materialui-daterange-picker\";\nimport ClearAllIcon from \"@material-ui/icons/ClearAll\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Select from \"@material-ui/core/Select\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Chip from \"@material-ui/core/Chip\";\nimport userFilterStore from \"../../store/UserFilter\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport {\n  Menu,\n  Button,\n  IconButton,\n  ButtonGroup,\n  Divider,\n  Typography,\n  Badge,\n} from \"@material-ui/core\";\nimport {\n  Close,\n  Public,\n  FilterList as FilterListIcon,\n  KeyboardArrowDown as KeyboardArrowDownIcon,\n  FastForward,\n  Search,\n} from \"@material-ui/icons\";\nimport DateRanges from \"../../constants/DateRanges\";\nimport countryFilterStore from \"../../store/CountryFilter\";\nimport ActionTypes from \"../../constants/ActionTypes\";\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    \"&:before\": {\n      border: \"none\",\n    },\n    \"&:after\": {\n      border: \"none\",\n    },\n    \"&:focus\": {\n      border: \"none\",\n      outline: \"none\",\n    },\n    \"& .MuiSelect-select \": {\n      backgroundColor: \"transparent!important\",\n      border: \"none\",\n    },\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  chip: {\n    margin: 2,\n  },\n  noLabel: {\n    marginTop: theme.spacing(3),\n  },\n  selectedCountriesContainer: {\n    display: \"inline-flex\",\n    maxWidth: 520,\n    flexWrap: \"nowrap\",\n    overflow: \"hidden\",\n  },\n}));\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 7 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nfunction UserFilter({ onUserFilterChanged }) {\n  const [SelectedUsers, setSelectedUsers] = useState([]);\n\n  const [Users, setUsers] = useState(userFilterStore.get());\n\n  const [DateRange, setDateRange] = useState(null);\n\n  const anchorRef = React.useRef(null);\n  const usersAnchorRef = React.useRef(null);\n\n  const [UserMenuOpen, setUserMenuOpen] = React.useState(false);\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const closeUserMenu = (evt) => {\n    if (usersAnchorRef.current && usersAnchorRef.current.contains(evt.target)) {\n      return;\n    }\n    return setUserMenuOpen(false);\n  };\n\n  const toggleUsersMenu = (evt) => {\n    setUserMenuOpen(true);\n  };\n\n  const onUserFilterSync = () => {\n    setUsers(userFilterStore.get());\n  };\n\n  const bindListeners = () => {\n    userFilterStore.addChangeListener(\n      ActionTypes.UserFilter.USER_FILTER_SYNC,\n      onUserFilterSync\n    );\n\n    return () => {\n      userFilterStore.removeChangeListener(\n        ActionTypes.UserFilter.USER_FILTER_SYNC,\n        onUserFilterSync\n      );\n    };\n  };\n\n  useEffect(() => {\n    return bindListeners();\n  });\n\n  const hasFilterForUser = (userId) => {\n    return SelectedUsers.includes(userId);\n  };\n\n  const toggleUserFilter = (name) => {\n    const userIdIndex = SelectedUsers.indexOf(name);\n    if (userIdIndex !== -1) {\n      const clone = [...SelectedUsers];\n      clone.splice(userIdIndex, 1);\n      handleUsersFilterChanged(clone);\n    } else {\n      handleUsersFilterChanged([...SelectedUsers, name]);\n    }\n  };\n\n  const clearUsersFilter = () => {\n    handleUsersFilterChanged([]);\n    setTimeout(() => {\n      setUserMenuOpen(false);\n    });\n  };\n\n  const handleUsersFilterChanged = (selectedUsers) => {\n    setSelectedUsers(selectedUsers);\n    if (isFunction(onUserFilterChanged)) {\n      onUserFilterChanged(selectedUsers);\n    }\n  };\n\n  return (\n    <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\n      {Users && (\n        <Badge\n          badgeContent={\n            SelectedUsers && SelectedUsers.length ? SelectedUsers.length : \"\"\n          }\n          color=\"secondary\"\n          variant=\"dot\"\n        >\n          <IconButton\n            size=\"small\"\n            aria-controls=\"users-menu\"\n            aria-haspopup=\"true\"\n            onClick={toggleUsersMenu}\n            ref={usersAnchorRef}\n          >\n            <PersonIcon style={{ color: theme.palette.text.disabled }} />\n          </IconButton>\n        </Badge>\n      )}\n\n      <Menu\n        id=\"users-menu\"\n        open={UserMenuOpen}\n        PaperProps={MenuProps.PaperProps}\n        keepMounted\n        onClose={closeUserMenu}\n        anchorEl={usersAnchorRef.current}\n        style={{ paddingTop: 0 }}\n      >\n        <MenuItem button onClick={clearUsersFilter}>\n          <Button\n            disableRipple={true}\n            disableFocusRipple={true}\n            disableTouchRipple={true}\n            variant=\"small\"\n            startIcon={<ClearAllIcon />}\n          >\n            Clear and show all\n          </Button>\n        </MenuItem>\n        <Divider />\n\n        {Users &&\n          Object.keys(Users).map((userId) => (\n            <MenuItem\n              alignItems=\"center\"\n              key={userId}\n              onClick={() => {\n                toggleUserFilter(userId);\n              }}\n              value={userId}\n            >\n              <Checkbox\n                color=\"secondary\"\n                checked={hasFilterForUser(userId)}\n                size=\"small\"\n                disableRipple\n              />\n              {Users[userId]}\n            </MenuItem>\n          ))}\n      </Menu>\n    </div>\n  );\n}\nexport default React.memo(UserFilter);\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\CrawlerThreadsStatuses.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Selects\\ChartViewMode.js",[],["1139","1140"],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Tables\\TrackedUrls.jsx",["1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { useConfirm } from \"material-ui-confirm\";\r\nimport MultifunctionalHeading from \"../Table/MultifunctionalHeading\";\r\nimport countriesActions from \"../../actions/Countries\";\r\nimport hostsActions from \"../../actions/Hosts\";\r\nimport DEFAULT_PARSING_REGEX from \"../../constants/Scraper\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Checkbox,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableFooter,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Tooltip,\r\n  Menu,\r\n  MenuItem,\r\n  Link,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport uiActions from \"../../actions/UI\";\r\nimport ScrapingThreadApi from \"../../api/ScrapingThread\";\r\nimport tableStore from \"../../store/Tables\";\r\nimport scrapingThreadsStore from \"../../store/ScrapingThreads\";\r\nimport TablePaginationActions from \"./Pagination\";\r\n\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport ActionTypes from \"../../constants/ActionTypes\";\r\nimport EditHostParsingRegexDialog from \"../Dialogs/EditHostParsingRegex\";\r\nimport {\r\n  Delete,\r\n  AssignmentTurnedIn as AssignmentTurnedInIcon,\r\n  Search,\r\n  MoreVert,\r\n  Edit,\r\n} from \"@material-ui/icons\";\r\n\r\nimport tableActions from \"../../actions/Table\";\r\nimport TableNames from \"../../constants/Tables\";\r\nimport TableData from \"../../models/TableData\";\r\nimport MultiFilter from \"../Filters/MultiFilter\";\r\nimport Country from \"../../models/Country\";\r\nimport { timeSince } from \"../../helpers/time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableContainer: {\r\n    overflowY: \"scroll\",\r\n    overflowX: \"hidden\",\r\n  },\r\n  table: {\r\n    minWidth: 500,\r\n    tableLayout: \"fixed\",\r\n    overflowY: \"auto\",\r\n    overflowX: \"hidden\",\r\n  },\r\n\r\n  editRegexIcon: {\r\n    opacity: 0,\r\n  },\r\n  tableRow: {\r\n    height: 70,\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n    '&:hover [name=\"editRegexIcon\"]': {\r\n      opacity: 1,\r\n    },\r\n  },\r\n  emptyRow: {\r\n    height: 70,\r\n    backgroundColor: \"white!important\",\r\n    \"&:first-child td\": {\r\n      paddingTop: \"8rem\",\r\n      paddingBottom: \"8rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst THIS_TABLE_NAME = TableNames.MANAGE_URLS;\r\nconst COLUMNS = [\r\n  {\r\n    name: \"age\",\r\n    label: \"Age\",\r\n    align: \"right\",\r\n  },\r\n  {\r\n    name: \"url\",\r\n    label: \"URL\",\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    name: \"total_scraped_jobs\",\r\n    label: \"Jobs scraped\",\r\n    align: \"right\",\r\n  },\r\n  {\r\n    name: \"crawler_threads_cnt\",\r\n    label: \"Times crawled\",\r\n    align: \"right\",\r\n  },\r\n  {\r\n    name: \"Score\",\r\n    label: \"URL Score\",\r\n    align: \"right\",\r\n  },\r\n  {\r\n    name: \"actions\",\r\n    label: \"\",\r\n    sortable: false,\r\n  },\r\n];\r\nconst ManageUrlsTable = ({ filter }) => {\r\n  let [tableData, setTableData] = useState(\r\n    tableStore.getTableData(THIS_TABLE_NAME)\r\n  );\r\n\r\n  const [RowActionObject, setRowActionObject] = useState(null);\r\n  const [rowMenuAnchorRef, setRowMenuAnchorRef] = React.useState(null);\r\n\r\n  const [SelectedRows, setSelectedRows] = useState([]);\r\n  const [DateRange, setDateRange] = useState(null);\r\n\r\n  const toggleRowMenuOpen = (event, country) => {\r\n    setRowActionObject(country);\r\n    setRowMenuAnchorRef(event.currentTarget);\r\n  };\r\n\r\n  const handleRowMenuClose = (event) => {\r\n    if (\r\n      rowMenuAnchorRef.current &&\r\n      rowMenuAnchorRef.current.contains(event.target)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setRowMenuAnchorRef(null);\r\n  };\r\n\r\n  const HasTableData = tableData !== undefined;\r\n\r\n  if (!HasTableData) {\r\n    tableData = TableData.defaults(THIS_TABLE_NAME);\r\n  }\r\n  const confirm = useConfirm();\r\n  const rowsPerPage = tableData.rowsPerPage;\r\n  const page = tableData.page;\r\n  const countryFilter = tableData.countryFilter;\r\n  const dateRange = tableData.dateRange;\r\n  let rows = tableData.rows;\r\n\r\n  const IsLoadingResults = tableData.isLoading;\r\n  let hasInheritedRows = false;\r\n  if (IsLoadingResults && tableData.previousTableData) {\r\n    rows = tableData.previousTableData.rows;\r\n    hasInheritedRows = true;\r\n  }\r\n\r\n  const isLoadingResults = tableData ? tableData.isLoading : true;\r\n  const rowsLength = Array.isArray(rows) ? rows.length : 0;\r\n  const classes = useStyles();\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, rowsLength - page * rowsPerPage) +\r\n    (rowsLength > 1 ? 0 : 1);\r\n\r\n  const deleteSelectedRows = () => {\r\n    if (SelectedRows.length) {\r\n      confirm({\r\n        description: `Are you sure you want to delete ${SelectedRows.length} links?`,\r\n        title: `Delete ${SelectedRows.length} links`,\r\n      })\r\n        .then(async () => {\r\n          const res = await ScrapingThreadApi.Delete(SelectedRows);\r\n          if (res && res.success) {\r\n            uiActions.showSnackbar(`Links deleted successfully`, \"success\");\r\n            setSelectedRows([]);\r\n            setTimeout(() => {\r\n              syncTableData({});\r\n            });\r\n          }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n  const handleUserFilterChanged = (userFilter) => {\r\n    return;\r\n    //setUserFilter(userFilter);\r\n  };\r\n\r\n  const selectAllRows = (evt) => {\r\n    const checked = evt.target.checked;\r\n    if (!checked) {\r\n      setSelectedRows([]);\r\n    } else if (checked) {\r\n      if (Array.isArray(rows)) {\r\n        setSelectedRows(rows.map((row) => row.threadId));\r\n      }\r\n    }\r\n  };\r\n\r\n  const getTableData = () => {\r\n    return tableStore.getTableData(THIS_TABLE_NAME) || tableData;\r\n  };\r\n  const syncTableData = ({ newPage, newRowsPerPage, newDateRange }) => {\r\n    const _tableData = getTableData();\r\n\r\n    tableActions.createTableData({\r\n      rowsPerPage:\r\n        newRowsPerPage !== undefined ? newRowsPerPage : _tableData.rowsPerPage,\r\n      totalRowsCount: _tableData.totalRowsCount,\r\n      page:\r\n        newRowsPerPage !== -1\r\n          ? newPage !== undefined\r\n            ? newPage\r\n            : _tableData.page\r\n          : 0,\r\n      filter: filter || \"\",\r\n      tableName: THIS_TABLE_NAME,\r\n      previousRowCount:\r\n        _tableData && _tableData.totalRowsCount\r\n          ? _tableData.totalRowsCount\r\n          : undefined,\r\n      dateRange:\r\n        newDateRange !== undefined ? newDateRange : _tableData.dateRange,\r\n    });\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    console.log(\"handleChangePage.newPage\", newPage);\r\n    syncTableData({ newPage });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    syncTableData({ newRowsPerPage, newPage: 0 });\r\n  };\r\n\r\n  /**\r\n   * @type {Object} obj\r\n   * @type {TableData} obj.tableData\r\n   */\r\n  const onTableRowsDataUpdated = ({ tableData }) => {\r\n    if (tableData.tableName === THIS_TABLE_NAME) {\r\n      const foundTable = tableStore.getByTableName(THIS_TABLE_NAME);\r\n      console.log(\"foundTable\", foundTable);\r\n      setTableData(foundTable);\r\n    }\r\n  };\r\n  console.log(\"rendering\", tableData);\r\n\r\n  // const onScrapingThreadCreated = () => {\r\n  //   setTimeout(() => {\r\n  //     syncTableData({ newPage: 0 });\r\n  //   });\r\n  // };\r\n\r\n  const reSync = () => {\r\n    setTimeout(() => {\r\n      syncTableData({});\r\n    });\r\n  };\r\n\r\n  const bindListeners = () => {\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_CREATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\r\n      reSync\r\n    );\r\n    tableStore.addChangeListener(\r\n      ActionTypes.Table.DATA_UPDATED,\r\n      onTableRowsDataUpdated\r\n    );\r\n\r\n    return () => {\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_CREATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.CountryFilter.COUNTRY_FILTER_SYNC,\r\n        reSync\r\n      );\r\n      tableStore.removeChangeListener(\r\n        ActionTypes.Table.DATA_UPDATED,\r\n        onTableRowsDataUpdated\r\n      );\r\n    };\r\n  };\r\n  const onRowSelectionChanged = (id) => {\r\n    console.log(SelectedRows);\r\n    const alreadySelectedIndex = SelectedRows.findIndex((c) => c === id);\r\n    const alreadySelected =\r\n      alreadySelectedIndex !== -1 && alreadySelectedIndex !== false;\r\n    if (alreadySelected) {\r\n      SelectedRows.splice(alreadySelectedIndex, 1);\r\n      setSelectedRows([...SelectedRows]);\r\n    } else {\r\n      setSelectedRows([id, ...SelectedRows]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Means data has not yet loaded nor requested\r\n    setTimeout(() => {\r\n      syncTableData({});\r\n    });\r\n\r\n    return bindListeners();\r\n  }, []);\r\n\r\n  const handleCountryFilterChanged = (_countryFilter) => {\r\n    syncTableData({ newCountryFilter: _countryFilter });\r\n  };\r\n  const handleDateFilterChanged = (_dateRange) => {\r\n    syncTableData({ newDateRange: _dateRange });\r\n  };\r\n\r\n  const theme = useTheme();\r\n\r\n  const renderEmptyRows = () => {\r\n    if (rowsPerPage === rowsLength) {\r\n      return \"\";\r\n    }\r\n    const isJustFilling = rowsLength > 0;\r\n    const hasFilterApplied =\r\n      tableData.totalRowsCount < tableData.unfilteredRowsCount;\r\n    const _renderHint = () => {\r\n      if (hasFilterApplied) {\r\n        return (\r\n          <Typography\r\n            variant={isJustFilling ? \"body2\" : \"h6\"}\r\n            style={{ color: theme.palette.text.hint }}\r\n          >\r\n            Try changing filter options\r\n          </Typography>\r\n        );\r\n      }\r\n      if (!isJustFilling)\r\n        return (\r\n          <Typography variant=\"h6\" style={{ color: theme.palette.text.hint }}>\r\n            Add some links to get started\r\n          </Typography>\r\n        );\r\n    };\r\n    const _emptyRowContent = () => (\r\n      <TableCell colspan=\"6\">\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n        >\r\n          {!isJustFilling && (\r\n            <Search\r\n              style={{\r\n                color: theme.palette.text.disabled,\r\n                width: 48,\r\n                height: 48,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography\r\n              variant={isJustFilling ? \"h6\" : \"h4\"}\r\n              style={{\r\n                color: isJustFilling\r\n                  ? theme.palette.text.hint\r\n                  : theme.palette.text.primary,\r\n              }}\r\n            >\r\n              No{rowsLength > 0 ? \" more\" : \"\"} links found\r\n            </Typography>\r\n          </Box>\r\n          {_renderHint()}\r\n        </Box>\r\n      </TableCell>\r\n    );\r\n\r\n    const _createRow = () => (\r\n      <TableRow\r\n        className={clsx({\r\n          [classes.tableRow]: true,\r\n          [classes.emptyRow]: true,\r\n        })}\r\n        key={Math.random()}\r\n      >\r\n        {_emptyRowContent()}\r\n      </TableRow>\r\n    );\r\n\r\n    return _createRow();\r\n  };\r\n\r\n  const viewJobYieldingLinksExample = () => {\r\n    let hostId = RowActionObject.hostId;\r\n    let handle = window.open(\r\n      `https://api2-scrapers.bebee.com/hosts/${hostId}/job-yielding-sample`,\r\n      \"_blank\"\r\n    );\r\n    handle.focus();\r\n  };\r\n\r\n  const viewHtmlSample = () => {\r\n    let hostId = RowActionObject.hostId;\r\n    let handle = window.open(\r\n      `https://api2-scrapers.bebee.com/hosts/${hostId}/view-html-sample`,\r\n      \"_blank\"\r\n    );\r\n    handle.focus();\r\n  };\r\n\r\n  const testRegex = () => {\r\n    let hostId = RowActionObject.hostId;\r\n    let handle = window.open(\r\n      `https://api2-scrapers.bebee.com/hosts/${hostId}/test-regex`,\r\n      \"_blank\"\r\n    );\r\n    handle.focus();\r\n  };\r\n\r\n  const _createRowActionsButton = (country) => {\r\n    const key = country.countryId;\r\n    return (\r\n      <React.Fragment>\r\n        <IconButton\r\n          size=\"small\"\r\n          aria-haspopup=\"true\"\r\n          onClick={(event) => {\r\n            toggleRowMenuOpen(event, country);\r\n          }}\r\n          aria-controls={`row-actions-menu`}\r\n        >\r\n          <MoreVert />\r\n        </IconButton>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const _attachRowActionsMenu = () => {\r\n    return (\r\n      <Menu\r\n        id={`row-actions-menu`}\r\n        anchorEl={rowMenuAnchorRef}\r\n        // keepMounted\r\n        open={Boolean(rowMenuAnchorRef)}\r\n        onClose={handleRowMenuClose}\r\n      >\r\n        <MenuItem\r\n          // onClick={() => {\r\n          //   handleRowMenuClose();\r\n          //   //toggleCountryRenameDialog();\r\n          // }}\r\n          component={RouterLink}\r\n          to={`/url-details/`}\r\n        >\r\n          View details\r\n        </MenuItem>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  const onSortChanged = ({ name, sort }) => {\r\n    syncTableData({ newSort: { name, sort } });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.tableContainer}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          <colgroup>\r\n            <col style={{ width: 54 }} />\r\n            <col style={{ width: 100 }} />\r\n            <col style={{ width: \"50%\" }} />\r\n            <col style={{ width: \"15%\" }} />\r\n          </colgroup>\r\n          <MultifunctionalHeading\r\n            columns={COLUMNS}\r\n            sort={tableData && tableData.sort}\r\n            onSortChanged={onSortChanged}\r\n          />\r\n          <TableBody>\r\n            {isLoadingResults && !hasInheritedRows\r\n              ? [\r\n                  ...Array(rowsPerPage !== undefined ? rowsPerPage : 10).keys(),\r\n                ].map((x) => (\r\n                  <TableRow key={x} style={{ height: 56 }}>\r\n                    <TableCell width=\"5%\">\r\n                      <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                    </TableCell>\r\n                    <TableCell width=\"50%\">\r\n                      <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                    </TableCell>\r\n                    <TableCell width=\"15%\">\r\n                      <Skeleton animation=\"wave\" style={{ width: \"75%\" }} />\r\n                    </TableCell>\r\n                    <TableCell width=\"15%\" align=\"right\">\r\n                      <Skeleton\r\n                        animation=\"wave\"\r\n                        style={{\r\n                          width: \"75%\",\r\n                          display: \"inline-block\",\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell width=\"15%\" align=\"right\">\r\n                      <Skeleton\r\n                        animation=\"wave\"\r\n                        style={{\r\n                          width: \"75%\",\r\n                          display: \"inline-block\",\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              : rows.map((row, index) => {\r\n                  const innerRow = (\r\n                    <React.Fragment>\r\n                      <TableCell width=\"64px\">\r\n                        <Checkbox\r\n                          size=\"small\"\r\n                          checked={SelectedRows.includes(row.threadId)}\r\n                          onChange={(evt) => {\r\n                            onRowSelectionChanged(row.threadId);\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          style={{ color: theme.palette.text.disabled }}\r\n                        >\r\n                          {timeSince(row.age)}\r\n                        </Typography>\r\n                      </TableCell>\r\n\r\n                      <TableCell scope=\"row\">\r\n                        <div\r\n                          style={{\r\n                            display: \"inline-flex\",\r\n                            alignItems: \"center\",\r\n                            overflow: \"hidden\",\r\n                            display: \"block\",\r\n                            textOverflow: \"ellipsis\",\r\n                          }}\r\n                        >\r\n                          <Link\r\n                            href={\"https://\" + row.url}\r\n                            target=\"_blank\"\r\n                            style={{ textOverflow: \"ellipsis\" }}\r\n                          >\r\n                            {row.url}\r\n                          </Link>\r\n                        </div>\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"right\">\r\n                        {row.total_scraped_jobs}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {row.crawler_threads_cnt}\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"right\">{\"TBD\"}</TableCell>\r\n\r\n                      <TableCell component=\"th\" align=\"right\">\r\n                        {_createRowActionsButton(row)}\r\n                      </TableCell>\r\n                    </React.Fragment>\r\n                  );\r\n                  const wrapComponent = (\r\n                    <TableRow className={classes.tableRow} key={row.uuid}>\r\n                      {innerRow}\r\n                    </TableRow>\r\n                  );\r\n                  return wrapComponent;\r\n                })}\r\n            {!IsLoadingResults && renderEmptyRows()}\r\n            {/* Row actions menu */}\r\n            {_attachRowActionsMenu()}\r\n            {/* Row actions menu */}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n\r\n      {rowsLength > 0 && (\r\n        <div>\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 8, 10, 25, { label: \"All\", value: -1 }]}\r\n            colSpan={3}\r\n            count={tableData.totalRowsCount}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            SelectProps={{\r\n              inputProps: { \"aria-label\": \"rows per page\" },\r\n              native: true,\r\n            }}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            ActionsComponent={TablePaginationActions}\r\n          />\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ManageUrlsTable;\r\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Charts\\CrawlerThreads.jsx",["1171","1172"],"import Chart from \"chart.js\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function LineGraph({ chartData }) {\n  const chartRef = useRef(null);\n  const datasets = [];\n  const labels = [];\n\n  const { graph, timeFrame, dateRange } = chartData;\n\n  let dateDiff = Math.abs(\n    dateRange.endDate\n      ? dateRange.endDate\n      : 0 - dateRange.startDate\n      ? dateRange.startDate\n      : 0\n  );\n\n  let dataset_tracked_urls = {\n    label: \"Crawler requests\",\n    borderColor: \"blue\",\n    data: [],\n  };\n\n  let dataset_scraped_jobs = {\n    label: \"Scraped jobs\",\n    borderColor: \"green\",\n    data: [],\n  };\n\n  let yMinTimestamp = \"\";\n  let yMaxTimestamp = \"\";\n\n  for (let axes of graph) {\n    let x = axes.x;\n    let y = axes.y;\n    x.replace(\"-\", \"/\");\n    let t = new Date(axes.timestamp);\n    if (!yMinTimestamp || t < yMinTimestamp) {\n      yMinTimestamp = t;\n    }\n    if (!yMaxTimestamp || t > yMaxTimestamp) {\n      yMaxTimestamp = t;\n    }\n    switch (timeFrame) {\n      case \"HOUR\":\n        labels.push(`${x.slice(11, 13)}:00`);\n        break;\n      case \"DAY\":\n        labels.push(`${x.slice(5, 10)}`);\n        break;\n      case \"MONTH\":\n        labels.push(`${x.slice(0, 7)}`);\n        break;\n\n      default:\n        labels.push(`${x}`);\n        break;\n    }\n\n    dataset_tracked_urls.data.push(y);\n    dataset_scraped_jobs.data.push(axes.y2);\n  }\n  datasets.push(dataset_tracked_urls);\n  datasets.push(dataset_scraped_jobs);\n\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\");\n    const chart = new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        labels,\n        datasets,\n      },\n      options: {\n        animation: false,\n        spanGaps: true, // enable for all datasets\n        tooltips: {\n          mode: \"index\",\n          intersect: false,\n        },\n        scales: {\n          xAxes: [\n            {\n              scaleLabel: {\n                display: true,\n                // labelString: `${yMinTimestamp.toLocaleString()} ${\n                //   yMaxTimestamp ? \"-> \" + yMaxTimestamp.toLocaleString() : \"\"\n                // }`,\n              },\n            },\n          ],\n          yAxes: [\n            {\n              ticks: {\n                //stepSize: 50,\n                callback: (value, index) => value > 0 && value,\n                beginAtZero: true,\n              },\n              suggestedMin: 0,\n            },\n          ],\n        },\n      },\n    });\n    return () => {\n      try {\n        chart.destroy();\n      } catch (e) {}\n    };\n  }, [chartData]);\n\n  return (\n    <canvas\n      style={{ width: \"100%\", height: \"100%\", minHeight: 480, maxHeight: 480 }}\n      id=\"myChart\"\n      ref={chartRef}\n    />\n  );\n}\n","C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\constants\\Statistics.js",[],"C:\\Users\\Teo\\Documents\\GitHub\\linksforcash\\src\\components\\Charts\\TrackedUrls.jsx",["1173","1174"],"import Chart from \"chart.js\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function LineGraph({ chartData }) {\n  const chartRef = useRef(null);\n  const datasets = [];\n  const labels = [];\n\n  const { graph, timeFrame, dateRange } = chartData;\n\n  let dateDiff = Math.abs(\n    dateRange.endDate\n      ? dateRange.endDate\n      : 0 - dateRange.startDate\n      ? dateRange.startDate\n      : 0\n  );\n\n  let dataset_tracked_urls = {\n    label: \"Newly added URLs\",\n    borderColor: \"blue\",\n    data: [],\n  };\n\n  let yMinTimestamp = \"\";\n  let yMaxTimestamp = \"\";\n\n  for (let axes of graph) {\n    let x = axes.x;\n    let y = axes.y;\n    x.replace(\"-\", \"/\");\n    let t = new Date(axes.timestamp);\n    if (!yMinTimestamp || t < yMinTimestamp) {\n      yMinTimestamp = t;\n    }\n    if (!yMaxTimestamp || t > yMaxTimestamp) {\n      yMaxTimestamp = t;\n    }\n    switch (timeFrame) {\n      case \"HOUR\":\n        labels.push(`${x.slice(11, 13)}:00`);\n        break;\n      case \"DAY\":\n        labels.push(`${x.slice(5, 10)}`);\n        break;\n      case \"MONTH\":\n        labels.push(`${x.slice(0, 7)}`);\n        break;\n\n      default:\n        labels.push(`${x}`);\n        break;\n    }\n\n    dataset_tracked_urls.data.push(y);\n  }\n  datasets.push(dataset_tracked_urls);\n\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\");\n    const chart = new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        labels,\n        datasets,\n      },\n      options: {\n        animation: false,\n        tooltips: {\n          mode: \"index\",\n          intersect: false,\n        },\n        scales: {\n          xAxes: [\n            {\n              scaleLabel: {\n                display: true,\n              },\n            },\n          ],\n          yAxes: [\n            {\n              ticks: {\n                //stepSize: 50,\n                callback: (value, index) => value > 0 && value,\n                beginAtZero: true,\n              },\n              suggestedMin: 0,\n            },\n          ],\n        },\n      },\n    });\n    return () => {\n      try {\n        chart.destroy();\n      } catch (e) {}\n    };\n  }, [chartData]);\n\n  return (\n    <canvas\n      style={{ width: \"100%\", height: \"100%\", minHeight: 480, maxHeight: 480 }}\n      id=\"myChart\"\n      ref={chartRef}\n    />\n  );\n}\n",{"ruleId":"1175","replacedBy":"1176"},{"ruleId":"1177","replacedBy":"1178"},{"ruleId":"1179","severity":1,"message":"1180","line":9,"column":10,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1183","line":6,"column":8,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1184","line":11,"column":3,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1185","line":22,"column":3,"nodeType":"1181","messageId":"1182","endLine":22,"endColumn":6},{"ruleId":"1179","severity":1,"message":"1186","line":26,"column":16,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":26},{"ruleId":"1179","severity":1,"message":"1187","line":32,"column":8,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1188","line":33,"column":8,"nodeType":"1181","messageId":"1182","endLine":33,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1189","line":34,"column":8,"nodeType":"1181","messageId":"1182","endLine":34,"endColumn":24},{"ruleId":"1179","severity":1,"message":"1190","line":36,"column":8,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1191","line":42,"column":11,"nodeType":"1181","messageId":"1182","endLine":42,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1192","line":44,"column":11,"nodeType":"1181","messageId":"1182","endLine":44,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1193","line":46,"column":27,"nodeType":"1181","messageId":"1182","endLine":46,"endColumn":51},{"ruleId":"1179","severity":1,"message":"1194","line":49,"column":13,"nodeType":"1181","messageId":"1182","endLine":49,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1195","line":50,"column":3,"nodeType":"1181","messageId":"1182","endLine":50,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1196","line":55,"column":8,"nodeType":"1181","messageId":"1182","endLine":55,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1197","line":158,"column":16,"nodeType":"1181","messageId":"1182","endLine":158,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1198","line":186,"column":9,"nodeType":"1181","messageId":"1182","endLine":186,"endColumn":27},{"ruleId":"1179","severity":1,"message":"1199","line":1,"column":17,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1200","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1201","line":3,"column":10,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1202","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1203","line":5,"column":22,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1204","line":7,"column":10,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1205","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1206","line":14,"column":8,"nodeType":"1181","messageId":"1182","endLine":14,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1207","line":20,"column":10,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1208","line":37,"column":5,"nodeType":"1181","messageId":"1182","endLine":37,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1209","line":59,"column":9,"nodeType":"1181","messageId":"1182","endLine":59,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1210","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1211","line":6,"column":7,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1212","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1213","line":15,"column":10,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":24},{"ruleId":"1179","severity":1,"message":"1214","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1215","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1206","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":19},{"ruleId":"1216","severity":1,"message":"1217","line":6,"column":1,"nodeType":"1218","messageId":"1219","endLine":17,"endColumn":2},{"ruleId":"1220","severity":1,"message":"1221","line":8,"column":27,"nodeType":"1222","messageId":"1219","endLine":8,"endColumn":29},{"ruleId":"1220","severity":1,"message":"1221","line":12,"column":43,"nodeType":"1222","messageId":"1219","endLine":12,"endColumn":45},{"ruleId":"1179","severity":1,"message":"1223","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1206","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1223","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1200","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1224","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1225","line":3,"column":10,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1226","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1227","line":6,"column":8,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1228","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1229","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1230","line":10,"column":8,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1231","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1232","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1233","line":14,"column":8,"nodeType":"1181","messageId":"1182","endLine":14,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1234","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1235","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":26},{"ruleId":"1179","severity":1,"message":"1236","line":17,"column":8,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1237","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1238","line":25,"column":3,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1239","line":26,"column":3,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1240","line":27,"column":3,"nodeType":"1181","messageId":"1182","endLine":27,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1241","line":30,"column":3,"nodeType":"1181","messageId":"1182","endLine":30,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1242","line":32,"column":3,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1243","line":35,"column":8,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1205","line":36,"column":8,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1244","line":37,"column":8,"nodeType":"1181","messageId":"1182","endLine":37,"endColumn":24},{"ruleId":"1179","severity":1,"message":"1223","line":38,"column":8,"nodeType":"1181","messageId":"1182","endLine":38,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1245","line":40,"column":7,"nodeType":"1181","messageId":"1182","endLine":40,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1207","line":47,"column":10,"nodeType":"1181","messageId":"1182","endLine":47,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1209","line":61,"column":9,"nodeType":"1181","messageId":"1182","endLine":61,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1199","line":1,"column":28,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1246","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1247","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":27},{"ruleId":"1179","severity":1,"message":"1248","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1249","line":14,"column":10,"nodeType":"1181","messageId":"1182","endLine":14,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1250","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1251","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1248","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1211","line":6,"column":7,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":13},{"ruleId":"1252","severity":1,"message":"1253","line":13,"column":1,"nodeType":"1254","endLine":13,"endColumn":24},{"ruleId":"1179","severity":1,"message":"1224","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1255","line":4,"column":10,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1256","line":5,"column":10,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1257","line":9,"column":3,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1258","line":10,"column":3,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1259","line":14,"column":3,"nodeType":"1181","messageId":"1182","endLine":14,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1260","line":16,"column":3,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1229","line":17,"column":3,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1261","line":23,"column":10,"nodeType":"1181","messageId":"1182","endLine":23,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1205","line":25,"column":8,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1262","line":29,"column":8,"nodeType":"1181","messageId":"1182","endLine":29,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1237","line":33,"column":8,"nodeType":"1181","messageId":"1182","endLine":33,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1263","line":35,"column":3,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1264","line":36,"column":3,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1265","line":37,"column":3,"nodeType":"1181","messageId":"1182","endLine":37,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1266","line":39,"column":3,"nodeType":"1181","messageId":"1182","endLine":39,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1267","line":40,"column":3,"nodeType":"1181","messageId":"1182","endLine":40,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1268","line":41,"column":3,"nodeType":"1181","messageId":"1182","endLine":41,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1269","line":42,"column":3,"nodeType":"1181","messageId":"1182","endLine":42,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1270","line":43,"column":3,"nodeType":"1181","messageId":"1182","endLine":43,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1271","line":44,"column":3,"nodeType":"1181","messageId":"1182","endLine":44,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1272","line":50,"column":8,"nodeType":"1181","messageId":"1182","endLine":50,"endColumn":24},{"ruleId":"1179","severity":1,"message":"1273","line":51,"column":8,"nodeType":"1181","messageId":"1182","endLine":51,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1274","line":52,"column":8,"nodeType":"1181","messageId":"1182","endLine":52,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1248","line":54,"column":8,"nodeType":"1181","messageId":"1182","endLine":54,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1275","line":176,"column":5,"nodeType":"1181","messageId":"1182","endLine":176,"endColumn":32},{"ruleId":"1276","severity":1,"message":"1277","line":318,"column":6,"nodeType":"1278","endLine":318,"endColumn":8,"suggestions":"1279"},{"ruleId":"1179","severity":1,"message":"1280","line":5,"column":5,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1223","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1281","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1205","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1282","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1206","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1283","line":10,"column":8,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1284","line":11,"column":10,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1215","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1285","line":6,"column":10,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1211","line":8,"column":7,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1205","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1282","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1223","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1281","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1286","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1205","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1283","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":18},{"ruleId":"1287","severity":1,"message":"1288","line":38,"column":7,"nodeType":"1289","endLine":41,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1224","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1255","line":5,"column":10,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1290","line":12,"column":3,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1258","line":14,"column":3,"nodeType":"1181","messageId":"1182","endLine":14,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1260","line":19,"column":3,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1261","line":29,"column":10,"nodeType":"1181","messageId":"1182","endLine":29,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1205","line":31,"column":8,"nodeType":"1181","messageId":"1182","endLine":31,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1291","line":33,"column":8,"nodeType":"1181","messageId":"1182","endLine":33,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1262","line":35,"column":8,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1237","line":39,"column":8,"nodeType":"1181","messageId":"1182","endLine":39,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1292","line":41,"column":3,"nodeType":"1181","messageId":"1182","endLine":41,"endColumn":6},{"ruleId":"1179","severity":1,"message":"1293","line":99,"column":9,"nodeType":"1181","messageId":"1182","endLine":99,"endColumn":18},{"ruleId":"1276","severity":1,"message":"1294","line":213,"column":6,"nodeType":"1278","endLine":213,"endColumn":8,"suggestions":"1295"},{"ruleId":"1179","severity":1,"message":"1225","line":3,"column":10,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1290","line":8,"column":3,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1240","line":12,"column":3,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1296","line":15,"column":3,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1242","line":17,"column":3,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1297","line":25,"column":8,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1298","line":28,"column":8,"nodeType":"1181","messageId":"1182","endLine":28,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1200","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1224","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1226","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1227","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1228","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1229","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1230","line":12,"column":8,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1231","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1232","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1233","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1234","line":17,"column":8,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1235","line":18,"column":8,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":26},{"ruleId":"1179","severity":1,"message":"1236","line":19,"column":8,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1299","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1238","line":25,"column":3,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1239","line":26,"column":3,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1240","line":27,"column":3,"nodeType":"1181","messageId":"1182","endLine":27,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1241","line":30,"column":3,"nodeType":"1181","messageId":"1182","endLine":30,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1242","line":32,"column":3,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1243","line":35,"column":8,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1205","line":36,"column":8,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1300","line":37,"column":8,"nodeType":"1181","messageId":"1182","endLine":37,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1223","line":38,"column":8,"nodeType":"1181","messageId":"1182","endLine":38,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1207","line":40,"column":10,"nodeType":"1181","messageId":"1182","endLine":40,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1209","line":62,"column":9,"nodeType":"1181","messageId":"1182","endLine":62,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1301","line":76,"column":10,"nodeType":"1181","messageId":"1182","endLine":76,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1302","line":76,"column":21,"nodeType":"1181","messageId":"1182","endLine":76,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1303","line":105,"column":9,"nodeType":"1181","messageId":"1182","endLine":105,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1304","line":106,"column":9,"nodeType":"1181","messageId":"1182","endLine":106,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1293","line":119,"column":9,"nodeType":"1181","messageId":"1182","endLine":119,"endColumn":18},{"ruleId":"1276","severity":1,"message":"1277","line":324,"column":6,"nodeType":"1278","endLine":324,"endColumn":8,"suggestions":"1305"},{"ruleId":"1179","severity":1,"message":"1306","line":330,"column":9,"nodeType":"1181","messageId":"1182","endLine":330,"endColumn":32},{"ruleId":"1179","severity":1,"message":"1307","line":3,"column":3,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1308","line":4,"column":3,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1309","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1238","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1241","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1310","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1311","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1312","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1232","line":12,"column":24,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":34},{"ruleId":"1179","severity":1,"message":"1313","line":13,"column":17,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1314","line":52,"column":7,"nodeType":"1181","messageId":"1182","endLine":52,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1315","line":61,"column":7,"nodeType":"1181","messageId":"1182","endLine":61,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1316","line":79,"column":22,"nodeType":"1181","messageId":"1182","endLine":79,"endColumn":35},{"ruleId":"1179","severity":1,"message":"1317","line":131,"column":7,"nodeType":"1181","messageId":"1182","endLine":131,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1214","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1215","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1206","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":19},{"ruleId":"1252","severity":1,"message":"1253","line":14,"column":1,"nodeType":"1254","endLine":14,"endColumn":39},{"ruleId":"1179","severity":1,"message":"1199","line":1,"column":17,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1203","line":2,"column":22,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1246","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1318","line":9,"column":3,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":7},{"ruleId":"1179","severity":1,"message":"1319","line":12,"column":3,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":7},{"ruleId":"1179","severity":1,"message":"1320","line":16,"column":3,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1259","line":23,"column":18,"nodeType":"1181","messageId":"1182","endLine":23,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1321","line":94,"column":9,"nodeType":"1181","messageId":"1182","endLine":94,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1322","line":126,"column":47,"nodeType":"1181","messageId":"1182","endLine":126,"endColumn":54},{"ruleId":"1252","severity":1,"message":"1253","line":16,"column":1,"nodeType":"1254","endLine":16,"endColumn":41},{"ruleId":"1179","severity":1,"message":"1215","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1250","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1211","line":7,"column":7,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":13},{"ruleId":"1252","severity":1,"message":"1253","line":16,"column":1,"nodeType":"1254","endLine":16,"endColumn":41},{"ruleId":"1179","severity":1,"message":"1215","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1250","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1323","line":6,"column":8,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1211","line":7,"column":7,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1223","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1281","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1223","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1281","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1223","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1281","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1205","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1282","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1206","line":10,"column":8,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1283","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1284","line":12,"column":10,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1223","line":1,"column":8,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1281","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1286","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1205","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1282","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1206","line":10,"column":8,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1283","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1284","line":12,"column":10,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1324","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1325","line":4,"column":22,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":43},{"ruleId":"1252","severity":1,"message":"1253","line":36,"column":1,"nodeType":"1254","endLine":36,"endColumn":53},{"ruleId":"1179","severity":1,"message":"1326","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1284","line":4,"column":10,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1327","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1328","line":20,"column":7,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":25},{"ruleId":"1252","severity":1,"message":"1253","line":47,"column":1,"nodeType":"1254","endLine":47,"endColumn":47},{"ruleId":"1179","severity":1,"message":"1215","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1250","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1324","line":6,"column":8,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1329","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1211","line":9,"column":7,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1330","line":128,"column":7,"nodeType":"1181","messageId":"1182","endLine":128,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1215","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1250","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1323","line":6,"column":8,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1331","line":7,"column":10,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1211","line":8,"column":7,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1214","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1215","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1206","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1200","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1224","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1332","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1226","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1227","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1228","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1229","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1230","line":12,"column":8,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1231","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1232","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1233","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1234","line":17,"column":8,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1235","line":18,"column":8,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":26},{"ruleId":"1179","severity":1,"message":"1236","line":19,"column":8,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1299","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1290","line":24,"column":3,"nodeType":"1181","messageId":"1182","endLine":24,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1238","line":25,"column":3,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1239","line":26,"column":3,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1240","line":27,"column":3,"nodeType":"1181","messageId":"1182","endLine":27,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1333","line":28,"column":3,"nodeType":"1181","messageId":"1182","endLine":28,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1310","line":29,"column":3,"nodeType":"1181","messageId":"1182","endLine":29,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1241","line":30,"column":3,"nodeType":"1181","messageId":"1182","endLine":30,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1334","line":31,"column":3,"nodeType":"1181","messageId":"1182","endLine":31,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1242","line":32,"column":3,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1335","line":33,"column":3,"nodeType":"1181","messageId":"1182","endLine":33,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1243","line":35,"column":8,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1205","line":36,"column":8,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1223","line":38,"column":8,"nodeType":"1181","messageId":"1182","endLine":38,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1245","line":39,"column":7,"nodeType":"1181","messageId":"1182","endLine":39,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1207","line":46,"column":10,"nodeType":"1181","messageId":"1182","endLine":46,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1336","line":58,"column":9,"nodeType":"1181","messageId":"1182","endLine":58,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1209","line":60,"column":9,"nodeType":"1181","messageId":"1182","endLine":60,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1321","line":62,"column":9,"nodeType":"1181","messageId":"1182","endLine":62,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1337","line":64,"column":9,"nodeType":"1181","messageId":"1182","endLine":64,"endColumn":24},{"ruleId":"1179","severity":1,"message":"1200","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1224","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1226","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1227","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1228","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1229","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1230","line":12,"column":8,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1231","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1232","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1233","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1234","line":17,"column":8,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1235","line":18,"column":8,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":26},{"ruleId":"1179","severity":1,"message":"1236","line":19,"column":8,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1299","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1238","line":25,"column":3,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1239","line":26,"column":3,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1240","line":27,"column":3,"nodeType":"1181","messageId":"1182","endLine":27,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1241","line":30,"column":3,"nodeType":"1181","messageId":"1182","endLine":30,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1242","line":32,"column":3,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1338","line":45,"column":10,"nodeType":"1181","messageId":"1182","endLine":45,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1209","line":48,"column":9,"nodeType":"1181","messageId":"1182","endLine":48,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1200","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1224","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1226","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1227","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1228","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1229","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1230","line":12,"column":8,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1231","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1232","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1233","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1234","line":17,"column":8,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1235","line":18,"column":8,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":26},{"ruleId":"1179","severity":1,"message":"1236","line":19,"column":8,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1299","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1238","line":25,"column":3,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1239","line":26,"column":3,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1240","line":27,"column":3,"nodeType":"1181","messageId":"1182","endLine":27,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1241","line":30,"column":3,"nodeType":"1181","messageId":"1182","endLine":30,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1242","line":32,"column":3,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1243","line":35,"column":8,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1205","line":36,"column":8,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1223","line":38,"column":8,"nodeType":"1181","messageId":"1182","endLine":38,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1209","line":50,"column":9,"nodeType":"1181","messageId":"1182","endLine":50,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1200","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1224","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1226","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1227","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1228","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1229","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1230","line":12,"column":8,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1231","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1232","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1233","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1234","line":17,"column":8,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1235","line":18,"column":8,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":26},{"ruleId":"1179","severity":1,"message":"1236","line":19,"column":8,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1299","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1238","line":25,"column":3,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1239","line":26,"column":3,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1240","line":27,"column":3,"nodeType":"1181","messageId":"1182","endLine":27,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1241","line":30,"column":3,"nodeType":"1181","messageId":"1182","endLine":30,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1242","line":32,"column":3,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1243","line":35,"column":8,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1205","line":36,"column":8,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1223","line":38,"column":8,"nodeType":"1181","messageId":"1182","endLine":38,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1207","line":40,"column":10,"nodeType":"1181","messageId":"1182","endLine":40,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1209","line":62,"column":9,"nodeType":"1181","messageId":"1182","endLine":62,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1339","line":7,"column":10,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1340","line":74,"column":10,"nodeType":"1181","messageId":"1182","endLine":74,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1341","line":80,"column":32,"nodeType":"1181","messageId":"1182","endLine":80,"endColumn":56},{"ruleId":"1179","severity":1,"message":"1342","line":89,"column":10,"nodeType":"1181","messageId":"1182","endLine":89,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1343","line":89,"column":20,"nodeType":"1181","messageId":"1182","endLine":89,"endColumn":31},{"ruleId":"1179","severity":1,"message":"1336","line":104,"column":9,"nodeType":"1181","messageId":"1182","endLine":104,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1344","line":168,"column":9,"nodeType":"1181","messageId":"1182","endLine":168,"endColumn":24},{"ruleId":"1179","severity":1,"message":"1345","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1224","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1332","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1226","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1227","line":10,"column":8,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1228","line":11,"column":8,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1260","line":12,"column":8,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1229","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1230","line":14,"column":8,"nodeType":"1181","messageId":"1182","endLine":14,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1231","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1232","line":18,"column":8,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1233","line":19,"column":8,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1234","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1235","line":21,"column":8,"nodeType":"1181","messageId":"1182","endLine":21,"endColumn":26},{"ruleId":"1179","severity":1,"message":"1236","line":22,"column":8,"nodeType":"1181","messageId":"1182","endLine":22,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1186","line":24,"column":10,"nodeType":"1181","messageId":"1182","endLine":24,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1243","line":26,"column":8,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1205","line":28,"column":8,"nodeType":"1181","messageId":"1182","endLine":28,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1346","line":29,"column":8,"nodeType":"1181","messageId":"1182","endLine":29,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1223","line":30,"column":8,"nodeType":"1181","messageId":"1182","endLine":30,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1324","line":40,"column":8,"nodeType":"1181","messageId":"1182","endLine":40,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1347","line":86,"column":5,"nodeType":"1181","messageId":"1182","endLine":86,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1348","line":110,"column":9,"nodeType":"1181","messageId":"1182","endLine":110,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1349","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1261","line":6,"column":10,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1350","line":6,"column":18,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1351","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1352","line":19,"column":3,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":7},{"ruleId":"1179","severity":1,"message":"1353","line":22,"column":3,"nodeType":"1181","messageId":"1182","endLine":22,"endColumn":11},{"ruleId":"1179","severity":1,"message":"1354","line":27,"column":10,"nodeType":"1181","messageId":"1182","endLine":27,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1269","line":31,"column":3,"nodeType":"1181","messageId":"1182","endLine":31,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1355","line":33,"column":3,"nodeType":"1181","messageId":"1182","endLine":33,"endColumn":7},{"ruleId":"1179","severity":1,"message":"1356","line":34,"column":3,"nodeType":"1181","messageId":"1182","endLine":34,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1357","line":35,"column":3,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1358","line":36,"column":3,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1359","line":37,"column":3,"nodeType":"1181","messageId":"1182","endLine":37,"endColumn":7},{"ruleId":"1179","severity":1,"message":"1360","line":43,"column":8,"nodeType":"1181","messageId":"1182","endLine":43,"endColumn":19},{"ruleId":"1276","severity":1,"message":"1361","line":114,"column":6,"nodeType":"1278","endLine":114,"endColumn":8,"suggestions":"1362"},{"ruleId":"1179","severity":1,"message":"1363","line":204,"column":9,"nodeType":"1181","messageId":"1182","endLine":204,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1364","line":230,"column":9,"nodeType":"1181","messageId":"1182","endLine":230,"endColumn":12},{"ruleId":"1365","severity":1,"message":"1366","line":376,"column":20,"nodeType":"1367","messageId":"1368","endLine":376,"endColumn":40},{"ruleId":"1179","severity":1,"message":"1203","line":3,"column":22,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1369","line":4,"column":10,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1224","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1370","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1371","line":6,"column":10,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1339","line":6,"column":27,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1372","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1255","line":11,"column":10,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1333","line":17,"column":3,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1290","line":19,"column":3,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1258","line":21,"column":3,"nodeType":"1181","messageId":"1182","endLine":21,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1257","line":26,"column":3,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1260","line":27,"column":3,"nodeType":"1181","messageId":"1182","endLine":27,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1242","line":34,"column":3,"nodeType":"1181","messageId":"1182","endLine":34,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1373","line":37,"column":8,"nodeType":"1181","messageId":"1182","endLine":37,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1261","line":40,"column":10,"nodeType":"1181","messageId":"1182","endLine":40,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1374","line":41,"column":18,"nodeType":"1181","messageId":"1182","endLine":41,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1205","line":42,"column":8,"nodeType":"1181","messageId":"1182","endLine":42,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1291","line":44,"column":8,"nodeType":"1181","messageId":"1182","endLine":44,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1375","line":45,"column":8,"nodeType":"1181","messageId":"1182","endLine":45,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1262","line":47,"column":8,"nodeType":"1181","messageId":"1182","endLine":47,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1237","line":51,"column":8,"nodeType":"1181","messageId":"1182","endLine":51,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1292","line":53,"column":3,"nodeType":"1181","messageId":"1182","endLine":53,"endColumn":6},{"ruleId":"1179","severity":1,"message":"1376","line":54,"column":3,"nodeType":"1181","messageId":"1182","endLine":54,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1313","line":58,"column":3,"nodeType":"1181","messageId":"1182","endLine":58,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1377","line":59,"column":3,"nodeType":"1181","messageId":"1182","endLine":59,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1299","line":68,"column":8,"nodeType":"1181","messageId":"1182","endLine":68,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1301","line":97,"column":10,"nodeType":"1181","messageId":"1182","endLine":97,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1302","line":97,"column":21,"nodeType":"1181","messageId":"1182","endLine":97,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1293","line":121,"column":9,"nodeType":"1181","messageId":"1182","endLine":121,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1378","line":203,"column":9,"nodeType":"1181","messageId":"1182","endLine":203,"endColumn":32},{"ruleId":"1179","severity":1,"message":"1379","line":6,"column":8,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":24},{"ruleId":"1179","severity":1,"message":"1380","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1381","line":10,"column":3,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1239","line":18,"column":3,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1259","line":21,"column":3,"nodeType":"1181","messageId":"1182","endLine":21,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1291","line":31,"column":8,"nodeType":"1181","messageId":"1182","endLine":31,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1382","line":38,"column":3,"nodeType":"1181","messageId":"1182","endLine":38,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1273","line":39,"column":25,"nodeType":"1181","messageId":"1182","endLine":39,"endColumn":47},{"ruleId":"1179","severity":1,"message":"1383","line":42,"column":3,"nodeType":"1181","messageId":"1182","endLine":42,"endColumn":7},{"ruleId":"1179","severity":1,"message":"1384","line":48,"column":8,"nodeType":"1181","messageId":"1182","endLine":48,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1323","line":49,"column":8,"nodeType":"1181","messageId":"1182","endLine":49,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1301","line":124,"column":10,"nodeType":"1181","messageId":"1182","endLine":124,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1302","line":124,"column":21,"nodeType":"1181","messageId":"1182","endLine":124,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1293","line":164,"column":9,"nodeType":"1181","messageId":"1182","endLine":164,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1385","line":169,"column":9,"nodeType":"1181","messageId":"1182","endLine":169,"endColumn":27},{"ruleId":"1179","severity":1,"message":"1386","line":188,"column":9,"nodeType":"1181","messageId":"1182","endLine":188,"endColumn":32},{"ruleId":"1179","severity":1,"message":"1387","line":193,"column":9,"nodeType":"1181","messageId":"1182","endLine":193,"endColumn":22},{"ruleId":"1276","severity":1,"message":"1388","line":312,"column":6,"nodeType":"1278","endLine":312,"endColumn":8,"suggestions":"1389"},{"ruleId":"1179","severity":1,"message":"1390","line":314,"column":9,"nodeType":"1181","messageId":"1182","endLine":314,"endColumn":35},{"ruleId":"1179","severity":1,"message":"1306","line":317,"column":9,"nodeType":"1181","messageId":"1182","endLine":317,"endColumn":32},{"ruleId":"1179","severity":1,"message":"1391","line":398,"column":9,"nodeType":"1181","messageId":"1182","endLine":398,"endColumn":37},{"ruleId":"1179","severity":1,"message":"1392","line":448,"column":9,"nodeType":"1181","messageId":"1182","endLine":448,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1393","line":457,"column":11,"nodeType":"1181","messageId":"1182","endLine":457,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1394","line":4,"column":8,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1224","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1370","line":10,"column":8,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1371","line":12,"column":10,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1339","line":12,"column":27,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1372","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1194","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1255","line":17,"column":10,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1395","line":17,"column":27,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1396","line":18,"column":8,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1333","line":23,"column":3,"nodeType":"1181","messageId":"1182","endLine":23,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1290","line":25,"column":3,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1258","line":27,"column":3,"nodeType":"1181","messageId":"1182","endLine":27,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1397","line":28,"column":3,"nodeType":"1181","messageId":"1182","endLine":28,"endColumn":7},{"ruleId":"1179","severity":1,"message":"1257","line":32,"column":3,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1260","line":33,"column":3,"nodeType":"1181","messageId":"1182","endLine":33,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1242","line":42,"column":3,"nodeType":"1181","messageId":"1182","endLine":42,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1373","line":45,"column":8,"nodeType":"1181","messageId":"1182","endLine":45,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1261","line":48,"column":10,"nodeType":"1181","messageId":"1182","endLine":48,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1374","line":49,"column":18,"nodeType":"1181","messageId":"1182","endLine":49,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1205","line":50,"column":8,"nodeType":"1181","messageId":"1182","endLine":50,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1291","line":52,"column":8,"nodeType":"1181","messageId":"1182","endLine":52,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1375","line":53,"column":8,"nodeType":"1181","messageId":"1182","endLine":53,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1262","line":55,"column":8,"nodeType":"1181","messageId":"1182","endLine":55,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1237","line":59,"column":8,"nodeType":"1181","messageId":"1182","endLine":59,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1292","line":61,"column":3,"nodeType":"1181","messageId":"1182","endLine":61,"endColumn":6},{"ruleId":"1179","severity":1,"message":"1376","line":62,"column":3,"nodeType":"1181","messageId":"1182","endLine":62,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1398","line":64,"column":3,"nodeType":"1181","messageId":"1182","endLine":64,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1273","line":65,"column":25,"nodeType":"1181","messageId":"1182","endLine":65,"endColumn":47},{"ruleId":"1179","severity":1,"message":"1313","line":66,"column":3,"nodeType":"1181","messageId":"1182","endLine":66,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1377","line":67,"column":3,"nodeType":"1181","messageId":"1182","endLine":67,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1299","line":76,"column":8,"nodeType":"1181","messageId":"1182","endLine":76,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1323","line":77,"column":8,"nodeType":"1181","messageId":"1182","endLine":77,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1301","line":128,"column":10,"nodeType":"1181","messageId":"1182","endLine":128,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1302","line":128,"column":21,"nodeType":"1181","messageId":"1182","endLine":128,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1293","line":168,"column":9,"nodeType":"1181","messageId":"1182","endLine":168,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1378","line":251,"column":9,"nodeType":"1181","messageId":"1182","endLine":251,"endColumn":32},{"ruleId":"1179","severity":1,"message":"1393","line":436,"column":11,"nodeType":"1181","messageId":"1182","endLine":436,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1381","line":2,"column":3,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1239","line":12,"column":3,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1259","line":15,"column":3,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1382","line":19,"column":10,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1250","line":35,"column":8,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1291","line":36,"column":8,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1301","line":80,"column":10,"nodeType":"1181","messageId":"1182","endLine":80,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1302","line":80,"column":21,"nodeType":"1181","messageId":"1182","endLine":80,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1399","line":83,"column":9,"nodeType":"1181","messageId":"1182","endLine":83,"endColumn":21},{"ruleId":"1179","severity":1,"message":"1303","line":88,"column":9,"nodeType":"1181","messageId":"1182","endLine":88,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1304","line":89,"column":9,"nodeType":"1181","messageId":"1182","endLine":89,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1293","line":116,"column":9,"nodeType":"1181","messageId":"1182","endLine":116,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1386","line":139,"column":9,"nodeType":"1181","messageId":"1182","endLine":139,"endColumn":32},{"ruleId":"1179","severity":1,"message":"1378","line":200,"column":9,"nodeType":"1181","messageId":"1182","endLine":200,"endColumn":32},{"ruleId":"1276","severity":1,"message":"1277","line":311,"column":6,"nodeType":"1278","endLine":311,"endColumn":8,"suggestions":"1400"},{"ruleId":"1179","severity":1,"message":"1390","line":313,"column":9,"nodeType":"1181","messageId":"1182","endLine":313,"endColumn":35},{"ruleId":"1179","severity":1,"message":"1306","line":316,"column":9,"nodeType":"1181","messageId":"1182","endLine":316,"endColumn":32},{"ruleId":"1179","severity":1,"message":"1259","line":1,"column":15,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1271","line":4,"column":3,"nodeType":"1181","messageId":"1182","endLine":4,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1267","line":5,"column":3,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1270","line":6,"column":3,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1266","line":7,"column":3,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1401","line":21,"column":7,"nodeType":"1181","messageId":"1182","endLine":21,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1402","line":22,"column":7,"nodeType":"1181","messageId":"1182","endLine":22,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1403","line":23,"column":7,"nodeType":"1181","messageId":"1182","endLine":23,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1210","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1309","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1339","line":6,"column":3,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1404","line":7,"column":3,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1238","line":12,"column":8,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1241","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1310","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1311","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1312","line":17,"column":8,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1405","line":19,"column":8,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1232","line":25,"column":3,"nodeType":"1181","messageId":"1182","endLine":25,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1369","line":28,"column":3,"nodeType":"1181","messageId":"1182","endLine":28,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1406","line":31,"column":3,"nodeType":"1181","messageId":"1182","endLine":31,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1313","line":32,"column":3,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1407","line":87,"column":10,"nodeType":"1181","messageId":"1182","endLine":87,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1336","line":121,"column":9,"nodeType":"1181","messageId":"1182","endLine":121,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1408","line":123,"column":10,"nodeType":"1181","messageId":"1182","endLine":123,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1316","line":123,"column":22,"nodeType":"1181","messageId":"1182","endLine":123,"endColumn":35},{"ruleId":"1179","severity":1,"message":"1409","line":137,"column":9,"nodeType":"1181","messageId":"1182","endLine":137,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1410","line":329,"column":9,"nodeType":"1181","messageId":"1182","endLine":329,"endColumn":25},{"ruleId":"1252","severity":1,"message":"1253","line":20,"column":1,"nodeType":"1254","endLine":20,"endColumn":75},{"ruleId":"1179","severity":1,"message":"1224","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1184","line":6,"column":8,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1352","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1353","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1411","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1311","line":10,"column":8,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1412","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1413","line":14,"column":8,"nodeType":"1181","messageId":"1182","endLine":14,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1243","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1369","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1414","line":19,"column":10,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1323","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1415","line":42,"column":10,"nodeType":"1181","messageId":"1182","endLine":42,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1336","line":43,"column":9,"nodeType":"1181","messageId":"1182","endLine":43,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1224","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1333","line":5,"column":8,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1412","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1243","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1369","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1323","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1416","line":38,"column":10,"nodeType":"1181","messageId":"1182","endLine":38,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1417","line":38,"column":25,"nodeType":"1181","messageId":"1182","endLine":38,"endColumn":41},{"ruleId":"1179","severity":1,"message":"1200","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1206","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1224","line":3,"column":8,"nodeType":"1181","messageId":"1182","endLine":3,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1184","line":6,"column":8,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1352","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1353","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1411","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1311","line":10,"column":8,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1412","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1413","line":14,"column":8,"nodeType":"1181","messageId":"1182","endLine":14,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1243","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1418","line":18,"column":8,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1414","line":19,"column":10,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1323","line":20,"column":8,"nodeType":"1181","messageId":"1182","endLine":20,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1336","line":50,"column":9,"nodeType":"1181","messageId":"1182","endLine":50,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1419","line":10,"column":10,"nodeType":"1181","messageId":"1182","endLine":10,"endColumn":17},{"ruleId":"1179","severity":1,"message":"1420","line":14,"column":5,"nodeType":"1181","messageId":"1182","endLine":14,"endColumn":18},{"ruleId":"1252","severity":1,"message":"1253","line":17,"column":1,"nodeType":"1254","endLine":17,"endColumn":34},{"ruleId":"1175","replacedBy":"1421"},{"ruleId":"1177","replacedBy":"1422"},{"ruleId":"1179","severity":1,"message":"1203","line":11,"column":22,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":30},{"ruleId":"1179","severity":1,"message":"1350","line":12,"column":10,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":25},{"ruleId":"1179","severity":1,"message":"1423","line":49,"column":9,"nodeType":"1181","messageId":"1182","endLine":49,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1424","line":50,"column":9,"nodeType":"1181","messageId":"1182","endLine":50,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1336","line":52,"column":9,"nodeType":"1181","messageId":"1182","endLine":52,"endColumn":16},{"ruleId":"1179","severity":1,"message":"1425","line":78,"column":9,"nodeType":"1181","messageId":"1182","endLine":78,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1210","line":1,"column":27,"nodeType":"1181","messageId":"1182","endLine":1,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1309","line":2,"column":8,"nodeType":"1181","messageId":"1182","endLine":2,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1371","line":5,"column":3,"nodeType":"1181","messageId":"1182","endLine":5,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1339","line":6,"column":3,"nodeType":"1181","messageId":"1182","endLine":6,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1404","line":7,"column":3,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1238","line":12,"column":8,"nodeType":"1181","messageId":"1182","endLine":12,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1241","line":13,"column":8,"nodeType":"1181","messageId":"1182","endLine":13,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1310","line":15,"column":8,"nodeType":"1181","messageId":"1182","endLine":15,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1311","line":16,"column":8,"nodeType":"1181","messageId":"1182","endLine":16,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1312","line":17,"column":8,"nodeType":"1181","messageId":"1182","endLine":17,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1405","line":19,"column":8,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1414","line":21,"column":10,"nodeType":"1181","messageId":"1182","endLine":21,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1242","line":26,"column":3,"nodeType":"1181","messageId":"1182","endLine":26,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1369","line":28,"column":3,"nodeType":"1181","messageId":"1182","endLine":28,"endColumn":13},{"ruleId":"1179","severity":1,"message":"1406","line":32,"column":3,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1313","line":33,"column":3,"nodeType":"1181","messageId":"1182","endLine":33,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1373","line":34,"column":17,"nodeType":"1181","messageId":"1182","endLine":34,"endColumn":31},{"ruleId":"1179","severity":1,"message":"1372","line":35,"column":24,"nodeType":"1181","messageId":"1182","endLine":35,"endColumn":45},{"ruleId":"1179","severity":1,"message":"1426","line":36,"column":3,"nodeType":"1181","messageId":"1182","endLine":36,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1427","line":37,"column":3,"nodeType":"1181","messageId":"1182","endLine":37,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1329","line":39,"column":8,"nodeType":"1181","messageId":"1182","endLine":39,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1428","line":40,"column":8,"nodeType":"1181","messageId":"1182","endLine":40,"endColumn":26},{"ruleId":"1179","severity":1,"message":"1407","line":88,"column":10,"nodeType":"1181","messageId":"1182","endLine":88,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1301","line":102,"column":10,"nodeType":"1181","messageId":"1182","endLine":102,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1302","line":102,"column":21,"nodeType":"1181","messageId":"1182","endLine":102,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1423","line":104,"column":9,"nodeType":"1181","messageId":"1182","endLine":104,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1336","line":109,"column":9,"nodeType":"1181","messageId":"1182","endLine":109,"endColumn":16},{"ruleId":"1175","replacedBy":"1429"},{"ruleId":"1177","replacedBy":"1430"},{"ruleId":"1179","severity":1,"message":"1379","line":7,"column":8,"nodeType":"1181","messageId":"1182","endLine":7,"endColumn":24},{"ruleId":"1179","severity":1,"message":"1431","line":8,"column":8,"nodeType":"1181","messageId":"1182","endLine":8,"endColumn":20},{"ruleId":"1179","severity":1,"message":"1380","line":9,"column":8,"nodeType":"1181","messageId":"1182","endLine":9,"endColumn":29},{"ruleId":"1179","severity":1,"message":"1381","line":11,"column":3,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":8},{"ruleId":"1179","severity":1,"message":"1229","line":18,"column":3,"nodeType":"1181","messageId":"1182","endLine":18,"endColumn":14},{"ruleId":"1179","severity":1,"message":"1239","line":19,"column":3,"nodeType":"1181","messageId":"1182","endLine":19,"endColumn":12},{"ruleId":"1179","severity":1,"message":"1259","line":22,"column":3,"nodeType":"1181","messageId":"1182","endLine":22,"endColumn":10},{"ruleId":"1179","severity":1,"message":"1291","line":32,"column":8,"nodeType":"1181","messageId":"1182","endLine":32,"endColumn":28},{"ruleId":"1179","severity":1,"message":"1432","line":37,"column":8,"nodeType":"1181","messageId":"1182","endLine":37,"endColumn":34},{"ruleId":"1179","severity":1,"message":"1382","line":39,"column":3,"nodeType":"1181","messageId":"1182","endLine":39,"endColumn":9},{"ruleId":"1179","severity":1,"message":"1273","line":40,"column":25,"nodeType":"1181","messageId":"1182","endLine":40,"endColumn":47},{"ruleId":"1179","severity":1,"message":"1383","line":43,"column":3,"nodeType":"1181","messageId":"1182","endLine":43,"endColumn":7},{"ruleId":"1179","severity":1,"message":"1384","line":49,"column":8,"nodeType":"1181","messageId":"1182","endLine":49,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1323","line":50,"column":8,"nodeType":"1181","messageId":"1182","endLine":50,"endColumn":15},{"ruleId":"1179","severity":1,"message":"1301","line":130,"column":10,"nodeType":"1181","messageId":"1182","endLine":130,"endColumn":19},{"ruleId":"1179","severity":1,"message":"1302","line":130,"column":21,"nodeType":"1181","messageId":"1182","endLine":130,"endColumn":33},{"ruleId":"1179","severity":1,"message":"1303","line":156,"column":9,"nodeType":"1181","messageId":"1182","endLine":156,"endColumn":22},{"ruleId":"1179","severity":1,"message":"1304","line":157,"column":9,"nodeType":"1181","messageId":"1182","endLine":157,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1293","line":170,"column":9,"nodeType":"1181","messageId":"1182","endLine":170,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1385","line":175,"column":9,"nodeType":"1181","messageId":"1182","endLine":175,"endColumn":27},{"ruleId":"1179","severity":1,"message":"1386","line":194,"column":9,"nodeType":"1181","messageId":"1182","endLine":194,"endColumn":32},{"ruleId":"1179","severity":1,"message":"1387","line":199,"column":9,"nodeType":"1181","messageId":"1182","endLine":199,"endColumn":22},{"ruleId":"1276","severity":1,"message":"1294","line":320,"column":6,"nodeType":"1278","endLine":320,"endColumn":8,"suggestions":"1433"},{"ruleId":"1179","severity":1,"message":"1390","line":322,"column":9,"nodeType":"1181","messageId":"1182","endLine":322,"endColumn":35},{"ruleId":"1179","severity":1,"message":"1306","line":325,"column":9,"nodeType":"1181","messageId":"1182","endLine":325,"endColumn":32},{"ruleId":"1179","severity":1,"message":"1434","line":406,"column":9,"nodeType":"1181","messageId":"1182","endLine":406,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1435","line":415,"column":9,"nodeType":"1181","messageId":"1182","endLine":415,"endColumn":23},{"ruleId":"1179","severity":1,"message":"1392","line":424,"column":9,"nodeType":"1181","messageId":"1182","endLine":424,"endColumn":18},{"ruleId":"1179","severity":1,"message":"1393","line":434,"column":11,"nodeType":"1181","messageId":"1182","endLine":434,"endColumn":14},{"ruleId":"1436","severity":1,"message":"1437","line":555,"column":29,"nodeType":"1438","messageId":"1219","endLine":555,"endColumn":36},{"ruleId":"1179","severity":1,"message":"1439","line":11,"column":7,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":15},{"ruleId":"1276","severity":1,"message":"1440","line":112,"column":6,"nodeType":"1278","endLine":112,"endColumn":17,"suggestions":"1441"},{"ruleId":"1179","severity":1,"message":"1439","line":11,"column":7,"nodeType":"1181","messageId":"1182","endLine":11,"endColumn":15},{"ruleId":"1276","severity":1,"message":"1440","line":100,"column":6,"nodeType":"1278","endLine":100,"endColumn":17,"suggestions":"1442"},"no-native-reassign",["1443"],"no-negated-in-lhs",["1444"],"no-unused-vars","'CssBaseline' is defined but never used.","Identifier","unusedVar","'ExtensionIcon' is defined but never used.","'Avatar' is defined but never used.","'Box' is defined but never used.","'useHistory' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'ChevronRightIcon' is defined but never used.","'ChevronLeftIcon' is defined but never used.","'CodeIcon' is defined but never used.","'HelpIcon' is defined but never used.","'SupervisedUserCircleIcon' is defined but never used.","'GlobeIcon' is defined but never used.","'Domain' is defined but never used.","'logoIconSvg' is defined but never used.","'setUser' is assigned a value but never used.","'renderShortLetters' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'BrowserRouter' is defined but never used.","'uiActions' is defined but never used.","'useTheme' is defined but never used.","'Backdrop' is defined but never used.","'sessionStore' is defined but never used.","'ActionTypes' is defined but never used.","'createData' is defined but never used.","'lastChanged' is assigned a value but never used.","'history' is assigned a value but never used.","'useRef' is defined but never used.","'Errors' is assigned a value but never used.","'ClientData' is defined but never used.","'SettingsRemote' is defined but never used.","'UrlTrackingThread' is defined but never used.","'User' is defined but never used.","no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'dispatcher' is defined but never used.","'PropTypes' is defined but never used.","'useConfirm' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableFooter' is defined but never used.","'TablePagination' is defined but never used.","'TableRow' is defined but never used.","'IconButton' is defined but never used.","'FirstPageIcon' is defined but never used.","'KeyboardArrowLeft' is defined but never used.","'KeyboardArrowRight' is defined but never used.","'LastPageIcon' is defined but never used.","'scrapingThreadsActions' is defined but never used.","'Input' is defined but never used.","'TableHead' is defined but never used.","'TextField' is defined but never used.","'InputLabel' is defined but never used.","'ButtonGroup' is defined but never used.","'AddIcon' is defined but never used.","'AddTrackUrlTable' is defined but never used.","'useStyles' is assigned a value but never used.","'keyMirror' is defined but never used.","'scrapingThreadStore' is defined but never used.","'ScrapingThread' is defined but never used.","'Socket' is defined but never used.","'TableData' is defined but never used.","'tableActions' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'prettyTimelapse' is defined but never used.","'Statuses' is defined but never used.","'CircularProgress' is defined but never used.","'LinearProgress' is defined but never used.","'Tooltip' is defined but never used.","'TableContainer' is defined but never used.","'motion' is defined but never used.","'EmptyTablePlaceholder' is defined but never used.","'BrandingWatermark' is defined but never used.","'Cancel' is defined but never used.","'HourglassFull' is defined but never used.","'HourglassEmpty' is defined but never used.","'DoneAll' is defined but never used.","'BrandingWatermarkOutlined' is defined but never used.","'Check' is defined but never used.","'ErrorOutline' is defined but never used.","'BugReport' is defined but never used.","'ImportExportIcon' is defined but never used.","'AssignmentTurnedInIcon' is defined but never used.","'FindInPageIcon' is defined but never used.","'TRIGGER_ROW_ADDED_ANIMATION' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'refreshFunc', 'registerEventListeners', and 'syncTableData'. Either include them or remove the dependency array.","ArrayExpression",["1445"],"'SortVariants' is assigned a value but never used.","'sessionActions' is defined but never used.","'tableStore' is defined but never used.","'TableNames' is defined but never used.","'sendMessage' is defined but never used.","'getPanelId' is defined but never used.","'scrapingThreadActions' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Divider' is defined but never used.","'scrapingThreadsStore' is defined but never used.","'Add' is defined but never used.","'emptyRows' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'bindListeners' and 'syncTableData'. Either include them or remove the dependency array.",["1446"],"'FormLabel' is defined but never used.","'ClearIcon' is defined but never used.","'LinearScaleIcon' is defined but never used.","'LinkIcon' is defined but never used.","'ManageUrlsTable' is defined but never used.","'DateRange' is assigned a value but never used.","'setDateRange' is assigned a value but never used.","'countryFilter' is assigned a value but never used.","'dateRange' is assigned a value but never used.",["1447"],"'handleDateFilterChanged' is assigned a value but never used.","'makeStyles' is defined but never used.","'ThemeProvider' is defined but never used.","'clsx' is defined but never used.","'FormControl' is defined but never used.","'ListItemText' is defined but never used.","'Select' is defined but never used.","'Public' is defined but never used.","'MenuProps' is assigned a value but never used.","'names' is assigned a value but never used.","'setPersonName' is assigned a value but never used.","'gotTruncated' is assigned a value but never used.","'cyan' is defined but never used.","'lime' is defined but never used.","'yellow' is defined but never used.","'theme' is assigned a value but never used.","'tooltip' is assigned a value but never used.","'Country' is defined but never used.","'Statistics' is defined but never used.","'StatisticsSyncRequest' is defined but never used.","'SocketEvents' is defined but never used.","'HostsStore' is defined but never used.","'retrieveHostByName' is assigned a value but never used.","'DateRanges' is defined but never used.","'willEmitChange' is assigned a value but never used.","'hostname' is defined but never used.","'SearchIcon' is defined but never used.","'Button' is defined but never used.","'InputAdornment' is defined but never used.","'OutlinedInput' is defined but never used.","'classes' is assigned a value but never used.","'onFilterChanged' is assigned a value but never used.","'Filter' is assigned a value but never used.","'DateRange' is defined but never used.","'ChartViewMode' is assigned a value but never used.","'setActiveStatisticsTypes' is assigned a value but never used.","'ViewMode' is assigned a value but never used.","'setViewMode' is assigned a value but never used.","'changeChartView' is assigned a value but never used.","'Chart' is defined but never used.","'ManagaUrlsTable' is defined but never used.","'filterTimeout' is assigned a value but never used.","'bull' is assigned a value but never used.","'HttpIcon' is defined but never used.","'AnimatePresence' is defined but never used.","'Collapse' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'DataGrid' is defined but never used.","'Mail' is defined but never used.","'Person' is defined but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","'Lock' is defined but never used.","'Collapsable' is defined but never used.","React Hook useEffect has a missing dependency: 'retrieveResults'. Either include it or remove the dependency array.",["1448"],"'renderJobSchemaFound' is assigned a value but never used.","'url' is assigned a value but never used.","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'Typography' is defined but never used.","'DateRangeIcon' is defined but never used.","'DateRangePicker' is defined but never used.","'KeyboardArrowDownIcon' is defined but never used.","'FilterListIcon' is defined but never used.","'RouterLink' is defined but never used.","'CountryFilter' is defined but never used.","'AddCircle' is defined but never used.","'RssFeedTwoTone' is defined but never used.","'onScrapingThreadCreated' is assigned a value but never used.","'countriesActions' is defined but never used.","'DEFAULT_PARSING_REGEX' is defined but never used.","'Badge' is defined but never used.","'Delete' is defined but never used.","'Edit' is defined but never used.","'MultiFilter' is defined but never used.","'deleteSelectedRows' is assigned a value but never used.","'handleUserFilterChanged' is assigned a value but never used.","'selectAllRows' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'HasTableData', 'bindListeners', 'filter', 'syncTableData', and 'tableData.filter'. Either include them or remove the dependency array.",["1449"],"'handleCountryFilterChanged' is assigned a value but never used.","'toggleHostParsingRegexDialog' is assigned a value but never used.","'testRegex' is assigned a value but never used.","'key' is assigned a value but never used.","'Paper' is defined but never used.","'timeSince' is defined but never used.","'UserAvatar' is defined but never used.","'Link' is defined but never used.","'Today' is defined but never used.","'HasTableData' is assigned a value but never used.",["1450"],"'innerText' is assigned a value but never used.","'caption' is assigned a value but never used.","'status' is assigned a value but never used.","'DefinedRange' is defined but never used.","'Chip' is defined but never used.","'Close' is defined but never used.","'getStyles' is defined but never used.","'personName' is assigned a value but never used.","'toggleCountriesMenu' is assigned a value but never used.","'renderUserButton' is assigned a value but never used.","'ListItemAvatar' is defined but never used.","'PersonIcon' is defined but never used.","'LanguageIcon' is defined but never used.","'Skeleton' is defined but never used.","'Countries' is assigned a value but never used.","'selectedValue' is assigned a value but never used.","'setSelectedValue' is assigned a value but never used.","'countriesStore' is defined but never used.","'lighten' is defined but never used.","'columnExample' is assigned a value but never used.",["1443"],["1444"],"'anchorRef' is assigned a value but never used.","'usersAnchorRef' is assigned a value but never used.","'renderFilteringDateValue' is assigned a value but never used.","'FastForward' is defined but never used.","'Search' is defined but never used.","'countryFilterStore' is defined but never used.",["1443"],["1444"],"'hostsActions' is defined but never used.","'EditHostParsingRegexDialog' is defined but never used.",["1451"],"'viewJobYieldingLinksExample' is assigned a value but never used.","'viewHtmlSample' is assigned a value but never used.","no-dupe-keys","Duplicate key 'display'.","ObjectExpression","'dateDiff' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'datasets' and 'labels'. Either include them or remove the dependency array.",["1452"],["1453"],"no-global-assign","no-unsafe-negation",{"desc":"1454","fix":"1455"},{"desc":"1456","fix":"1457"},{"desc":"1454","fix":"1458"},{"desc":"1459","fix":"1460"},{"desc":"1461","fix":"1462"},{"desc":"1454","fix":"1463"},{"desc":"1456","fix":"1464"},{"desc":"1465","fix":"1466"},{"desc":"1465","fix":"1467"},"Update the dependencies array to be: [refreshFunc, registerEventListeners, syncTableData]",{"range":"1468","text":"1469"},"Update the dependencies array to be: [bindListeners, syncTableData]",{"range":"1470","text":"1471"},{"range":"1472","text":"1469"},"Update the dependencies array to be: [retrieveResults]",{"range":"1473","text":"1474"},"Update the dependencies array to be: [HasTableData, bindListeners, filter, syncTableData, tableData.filter]",{"range":"1475","text":"1476"},{"range":"1477","text":"1469"},{"range":"1478","text":"1471"},"Update the dependencies array to be: [chartData, datasets, labels]",{"range":"1479","text":"1480"},{"range":"1481","text":"1480"},[9048,9050],"[refreshFunc, registerEventListeners, syncTableData]",[6067,6069],"[bindListeners, syncTableData]",[9273,9275],[2904,2906],"[retrieveResults]",[8539,8541],"[HasTableData, bindListeners, filter, syncTableData, tableData.filter]",[9237,9239],[8648,8650],[2564,2575],"[chartData, datasets, labels]",[2151,2162]]